// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}
func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*Scanner).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:60

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:573

type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMMEDIATE",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8771

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	446, 28,
	-2, 954,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 70,
	176, 791,
	193, 791,
	207, 228,
	279, 228,
	287, 647,
	314, 228,
	323, 647,
	360, 647,
	384, 228,
	407, 647,
	-2, 0,
	-1, 76,
	207, 232,
	-2, 0,
	-1, 77,
	105, 954,
	182, 954,
	393, 954,
	394, 954,
	-2, 0,
	-1, 88,
	118, 928,
	132, 928,
	190, 928,
	218, 928,
	247, 928,
	256, 928,
	389, 928,
	-2, 915,
	-1, 116,
	123, 573,
	206, 573,
	377, 573,
	-2, 0,
	-1, 117,
	4, 956,
	21, 956,
	22, 956,
	23, 956,
	24, 956,
	25, 956,
	27, 956,
	32, 956,
	37, 956,
	38, 956,
	39, 956,
	40, 956,
	41, 956,
	42, 956,
	43, 956,
	44, 956,
	45, 956,
	46, 956,
	48, 956,
	49, 956,
	50, 956,
	51, 956,
	52, 956,
	53, 956,
	56, 956,
	57, 956,
	58, 956,
	59, 956,
	61, 956,
	62, 956,
	66, 956,
	67, 956,
	68, 956,
	69, 956,
	70, 956,
	72, 956,
	73, 956,
	74, 956,
	75, 956,
	77, 956,
	79, 956,
	80, 956,
	81, 956,
	84, 956,
	85, 956,
	93, 956,
	94, 956,
	95, 956,
	96, 956,
	97, 956,
	98, 956,
	99, 956,
	100, 956,
	102, 956,
	104, 956,
	105, 956,
	107, 956,
	110, 956,
	111, 956,
	112, 956,
	114, 956,
	116, 956,
	117, 956,
	119, 956,
	120, 956,
	121, 956,
	122, 956,
	123, 956,
	124, 956,
	125, 956,
	126, 956,
	127, 956,
	128, 956,
	129, 956,
	137, 956,
	138, 956,
	139, 956,
	140, 956,
	141, 956,
	142, 956,
	144, 956,
	146, 956,
	150, 956,
	151, 956,
	153, 956,
	154, 956,
	156, 956,
	157, 956,
	159, 956,
	160, 956,
	161, 956,
	162, 956,
	163, 956,
	164, 956,
	165, 956,
	166, 956,
	167, 956,
	168, 956,
	171, 956,
	172, 956,
	177, 956,
	178, 956,
	179, 956,
	182, 956,
	183, 956,
	184, 956,
	185, 956,
	186, 956,
	187, 956,
	188, 956,
	189, 956,
	191, 956,
	193, 956,
	196, 956,
	197, 956,
	198, 956,
	200, 956,
	201, 956,
	204, 956,
	205, 956,
	206, 956,
	207, 956,
	209, 956,
	210, 956,
	212, 956,
	213, 956,
	215, 956,
	216, 956,
	219, 956,
	220, 956,
	223, 956,
	225, 956,
	226, 956,
	229, 956,
	230, 956,
	231, 956,
	232, 956,
	233, 956,
	235, 956,
	236, 956,
	237, 956,
	238, 956,
	243, 956,
	244, 956,
	245, 956,
	246, 956,
	248, 956,
	249, 956,
	250, 956,
	252, 956,
	253, 956,
	254, 956,
	257, 956,
	258, 956,
	260, 956,
	262, 956,
	263, 956,
	264, 956,
	265, 956,
	266, 956,
	267, 956,
	268, 956,
	269, 956,
	270, 956,
	272, 956,
	273, 956,
	274, 956,
	275, 956,
	276, 956,
	278, 956,
	280, 956,
	281, 956,
	282, 956,
	283, 956,
	284, 956,
	285, 956,
	286, 956,
	287, 956,
	288, 956,
	290, 956,
	291, 956,
	292, 956,
	293, 956,
	294, 956,
	296, 956,
	297, 956,
	298, 956,
	299, 956,
	300, 956,
	301, 956,
	302, 956,
	303, 956,
	305, 956,
	307, 956,
	308, 956,
	309, 956,
	310, 956,
	311, 956,
	312, 956,
	314, 956,
	315, 956,
	316, 956,
	317, 956,
	318, 956,
	319, 956,
	320, 956,
	321, 956,
	323, 956,
	324, 956,
	325, 956,
	326, 956,
	327, 956,
	328, 956,
	329, 956,
	330, 956,
	331, 956,
	332, 956,
	334, 956,
	335, 956,
	336, 956,
	337, 956,
	339, 956,
	340, 956,
	341, 956,
	342, 956,
	344, 956,
	345, 956,
	346, 956,
	347, 956,
	348, 956,
	349, 956,
	350, 956,
	351, 956,
	352, 956,
	353, 956,
	354, 956,
	355, 956,
	357, 956,
	358, 956,
	359, 956,
	361, 956,
	362, 956,
	363, 956,
	364, 956,
	365, 956,
	366, 956,
	367, 956,
	368, 956,
	369, 956,
	371, 956,
	372, 956,
	373, 956,
	374, 956,
	377, 956,
	378, 956,
	379, 956,
	380, 956,
	381, 956,
	383, 956,
	384, 956,
	385, 956,
	387, 956,
	388, 956,
	391, 956,
	392, 956,
	393, 956,
	394, 956,
	395, 956,
	397, 956,
	399, 956,
	400, 956,
	401, 956,
	402, 956,
	403, 956,
	404, 956,
	405, 956,
	407, 956,
	408, 956,
	409, 956,
	414, 956,
	415, 956,
	416, 956,
	417, 956,
	418, 956,
	419, 956,
	-2, 0,
	-1, 118,
	1, 848,
	196, 848,
	278, 848,
	285, 848,
	445, 848,
	446, 848,
	-2, 0,
	-1, 120,
	1, 848,
	445, 848,
	446, 848,
	-2, 0,
	-1, 121,
	1, 848,
	445, 848,
	446, 848,
	-2, 0,
	-1, 122,
	1, 852,
	445, 852,
	446, 852,
	-2, 0,
	-1, 146,
	118, 927,
	132, 927,
	190, 927,
	218, 927,
	247, 927,
	256, 927,
	389, 927,
	-2, 924,
	-1, 176,
	4, 963,
	5, 963,
	6, 963,
	7, 963,
	8, 963,
	9, 963,
	10, 963,
	21, 963,
	22, 963,
	23, 963,
	24, 963,
	25, 963,
	27, 963,
	32, 963,
	33, 963,
	37, 963,
	38, 963,
	39, 963,
	40, 963,
	41, 963,
	42, 963,
	43, 963,
	44, 963,
	45, 963,
	46, 963,
	48, 963,
	49, 963,
	50, 963,
	51, 963,
	52, 963,
	53, 963,
	54, 963,
	55, 963,
	56, 963,
	57, 963,
	58, 963,
	59, 963,
	61, 963,
	62, 963,
	64, 963,
	66, 963,
	67, 963,
	68, 963,
	69, 963,
	70, 963,
	72, 963,
	73, 963,
	74, 963,
	75, 963,
	77, 963,
	79, 963,
	80, 963,
	81, 963,
	83, 963,
	84, 963,
	85, 963,
	86, 963,
	87, 963,
	88, 963,
	89, 963,
	90, 963,
	91, 963,
	92, 963,
	93, 963,
	94, 963,
	95, 963,
	96, 963,
	97, 963,
	98, 963,
	99, 963,
	100, 963,
	101, 963,
	102, 963,
	104, 963,
	105, 963,
	107, 963,
	110, 963,
	111, 963,
	112, 963,
	114, 963,
	116, 963,
	117, 963,
	119, 963,
	120, 963,
	121, 963,
	122, 963,
	123, 963,
	124, 963,
	125, 963,
	126, 963,
	127, 963,
	128, 963,
	129, 963,
	130, 963,
	131, 963,
	137, 963,
	138, 963,
	139, 963,
	140, 963,
	141, 963,
	142, 963,
	144, 963,
	146, 963,
	149, 963,
	150, 963,
	151, 963,
	153, 963,
	154, 963,
	156, 963,
	157, 963,
	159, 963,
	160, 963,
	161, 963,
	162, 963,
	163, 963,
	164, 963,
	165, 963,
	166, 963,
	167, 963,
	168, 963,
	169, 963,
	171, 963,
	172, 963,
	177, 963,
	178, 963,
	179, 963,
	181, 963,
	182, 963,
	183, 963,
	184, 963,
	185, 963,
	186, 963,
	187, 963,
	188, 963,
	189, 963,
	191, 963,
	193, 963,
	194, 963,
	195, 963,
	196, 963,
	197, 963,
	198, 963,
	199, 963,
	200, 963,
	201, 963,
	204, 963,
	205, 963,
	206, 963,
	207, 963,
	209, 963,
	210, 963,
	212, 963,
	213, 963,
	214, 963,
	215, 963,
	216, 963,
	217, 963,
	219, 963,
	220, 963,
	223, 963,
	225, 963,
	226, 963,
	227, 963,
	228, 963,
	229, 963,
	230, 963,
	231, 963,
	232, 963,
	233, 963,
	234, 963,
	235, 963,
	236, 963,
	237, 963,
	238, 963,
	239, 963,
	241, 963,
	242, 963,
	243, 963,
	244, 963,
	245, 963,
	246, 963,
	248, 963,
	249, 963,
	250, 963,
	253, 963,
	254, 963,
	257, 963,
	258, 963,
	259, 963,
	260, 963,
	261, 963,
	262, 963,
	263, 963,
	264, 963,
	265, 963,
	266, 963,
	267, 963,
	268, 963,
	269, 963,
	270, 963,
	272, 963,
	273, 963,
	274, 963,
	275, 963,
	276, 963,
	278, 963,
	280, 963,
	281, 963,
	282, 963,
	283, 963,
	284, 963,
	285, 963,
	286, 963,
	287, 963,
	288, 963,
	290, 963,
	291, 963,
	292, 963,
	293, 963,
	294, 963,
	296, 963,
	297, 963,
	298, 963,
	299, 963,
	300, 963,
	301, 963,
	302, 963,
	303, 963,
	305, 963,
	306, 963,
	307, 963,
	308, 963,
	309, 963,
	310, 963,
	311, 963,
	312, 963,
	314, 963,
	315, 963,
	316, 963,
	317, 963,
	318, 963,
	319, 963,
	320, 963,
	321, 963,
	323, 963,
	324, 963,
	325, 963,
	326, 963,
	327, 963,
	328, 963,
	329, 963,
	330, 963,
	331, 963,
	332, 963,
	333, 963,
	334, 963,
	335, 963,
	336, 963,
	337, 963,
	338, 963,
	339, 963,
	340, 963,
	341, 963,
	342, 963,
	344, 963,
	345, 963,
	346, 963,
	347, 963,
	348, 963,
	349, 963,
	350, 963,
	351, 963,
	352, 963,
	353, 963,
	354, 963,
	355, 963,
	357, 963,
	358, 963,
	359, 963,
	361, 963,
	362, 963,
	363, 963,
	364, 963,
	365, 963,
	366, 963,
	367, 963,
	368, 963,
	369, 963,
	371, 963,
	372, 963,
	373, 963,
	374, 963,
	377, 963,
	378, 963,
	379, 963,
	380, 963,
	381, 963,
	382, 963,
	383, 963,
	384, 963,
	385, 963,
	387, 963,
	388, 963,
	390, 963,
	391, 963,
	392, 963,
	393, 963,
	394, 963,
	395, 963,
	396, 963,
	397, 963,
	399, 963,
	400, 963,
	401, 963,
	402, 963,
	403, 963,
	404, 963,
	405, 963,
	407, 963,
	408, 963,
	409, 963,
	414, 963,
	415, 963,
	416, 963,
	417, 963,
	418, 963,
	419, 963,
	420, 963,
	428, 963,
	433, 963,
	434, 963,
	435, 963,
	442, 963,
	448, 963,
	-2, 0,
	-1, 179,
	1, 28,
	446, 28,
	-2, 954,
	-1, 528,
	148, 1614,
	375, 1614,
	425, 1614,
	444, 1614,
	-2, 0,
	-1, 529,
	148, 1690,
	375, 1690,
	425, 1690,
	444, 1690,
	-2, 0,
	-1, 530,
	148, 1604,
	375, 1604,
	425, 1604,
	444, 1604,
	-2, 0,
	-1, 532,
	148, 1770,
	375, 1770,
	425, 1770,
	444, 1770,
	-2, 0,
	-1, 534,
	148, 1799,
	375, 1799,
	425, 1799,
	444, 1799,
	-2, 0,
	-1, 541,
	148, 1696,
	375, 1696,
	425, 1696,
	444, 1696,
	-2, 450,
	-1, 558,
	444, 1564,
	447, 1564,
	-2, 616,
	-1, 559,
	444, 1566,
	447, 1566,
	-2, 617,
	-1, 560,
	444, 1565,
	447, 1565,
	-2, 618,
	-1, 561,
	447, 1516,
	-2, 619,
	-1, 705,
	1, 546,
	441, 546,
	443, 546,
	445, 546,
	446, 546,
	-2, 0,
	-1, 706,
	1, 615,
	145, 615,
	441, 615,
	443, 615,
	445, 615,
	446, 615,
	-2, 0,
	-1, 712,
	1, 560,
	441, 560,
	443, 560,
	445, 560,
	446, 560,
	-2, 0,
	-1, 714,
	1, 564,
	441, 564,
	443, 564,
	445, 564,
	446, 564,
	-2, 0,
	-1, 716,
	1, 574,
	441, 574,
	443, 574,
	445, 574,
	446, 574,
	-2, 0,
	-1, 717,
	1, 580,
	441, 580,
	443, 580,
	445, 580,
	446, 580,
	-2, 0,
	-1, 718,
	1, 583,
	441, 583,
	443, 583,
	445, 583,
	446, 583,
	-2, 0,
	-1, 722,
	1, 597,
	441, 597,
	443, 597,
	445, 597,
	446, 597,
	-2, 0,
	-1, 723,
	1, 599,
	441, 599,
	443, 599,
	445, 599,
	446, 599,
	-2, 0,
	-1, 766,
	132, 967,
	218, 967,
	247, 967,
	-2, 924,
	-1, 781,
	132, 966,
	218, 966,
	247, 966,
	-2, 924,
	-1, 803,
	442, 1879,
	-2, 1263,
	-1, 804,
	442, 1880,
	-2, 1264,
	-1, 834,
	442, 1558,
	-2, 1549,
	-1, 840,
	5, 1091,
	-2, 1595,
	-1, 841,
	5, 1092,
	-2, 1599,
	-1, 842,
	5, 1093,
	-2, 1598,
	-1, 843,
	5, 1094,
	-2, 1796,
	-1, 844,
	5, 1095,
	-2, 1698,
	-1, 845,
	5, 1096,
	-2, 1762,
	-1, 846,
	5, 1097,
	-2, 1764,
	-1, 847,
	5, 1098,
	-2, 1775,
	-1, 848,
	5, 1099,
	-2, 1765,
	-1, 849,
	5, 1100,
	-2, 1766,
	-1, 850,
	5, 1101,
	-2, 1594,
	-1, 851,
	5, 1102,
	-2, 1810,
	-1, 852,
	5, 1103,
	-2, 1665,
	-1, 853,
	5, 1104,
	-2, 1705,
	-1, 854,
	5, 1105,
	-2, 1707,
	-1, 855,
	5, 1106,
	-2, 1669,
	-1, 856,
	5, 1107,
	442, 1573,
	-2, 1564,
	-1, 857,
	5, 1160,
	442, 1160,
	-2, 1845,
	-1, 862,
	442, 1574,
	-2, 1565,
	-1, 864,
	5, 1111,
	-2, 1843,
	-1, 865,
	5, 1112,
	-2, 1844,
	-1, 866,
	5, 1113,
	-2, 1668,
	-1, 867,
	5, 1114,
	-2, 1856,
	-1, 868,
	5, 1115,
	-2, 1670,
	-1, 869,
	5, 1116,
	-2, 1671,
	-1, 870,
	5, 1117,
	-2, 1672,
	-1, 871,
	5, 1118,
	-2, 1825,
	-1, 872,
	5, 1119,
	-2, 1854,
	-1, 873,
	5, 1120,
	-2, 1649,
	-1, 874,
	5, 1121,
	-2, 1650,
	-1, 875,
	5, 1135,
	-2, 1837,
	-1, 877,
	5, 1110,
	-2, 1833,
	-1, 878,
	5, 1110,
	-2, 1832,
	-1, 879,
	5, 1110,
	-2, 1849,
	-1, 880,
	5, 1127,
	-2, 1827,
	-1, 881,
	5, 1128,
	-2, 1596,
	-1, 882,
	5, 1138,
	-2, 1826,
	-1, 883,
	5, 1140,
	-2, 1864,
	-1, 885,
	5, 1151,
	-2, 1624,
	-1, 886,
	5, 1152,
	-2, 1858,
	-1, 887,
	5, 1154,
	-2, 1859,
	-1, 888,
	5, 1156,
	-2, 1860,
	-1, 889,
	5, 1158,
	-2, 1797,
	-1, 890,
	5, 1078,
	-2, 1678,
	-1, 891,
	5, 1079,
	-2, 1679,
	-1, 911,
	5, 1146,
	-2, 1785,
	-1, 929,
	5, 1145,
	-2, 1865,
	-1, 930,
	5, 1147,
	408, 1147,
	-2, 1828,
	-1, 931,
	5, 1148,
	408, 1148,
	-2, 1829,
	-1, 976,
	442, 1573,
	-2, 1564,
	-1, 1007,
	148, 1799,
	375, 1799,
	425, 1799,
	444, 1799,
	-2, 0,
	-1, 1008,
	196, 860,
	278, 860,
	285, 860,
	-2, 438,
	-1, 1126,
	296, 1546,
	435, 1546,
	-2, 1545,
	-1, 1182,
	287, 647,
	407, 647,
	-2, 227,
	-1, 1202,
	268, 952,
	-2, 764,
	-1, 1211,
	251, 1568,
	-2, 0,
	-1, 1275,
	1, 330,
	441, 330,
	443, 330,
	445, 330,
	446, 330,
	-2, 926,
	-1, 1278,
	4, 1863,
	11, 1863,
	12, 1863,
	14, 1863,
	15, 1863,
	16, 1863,
	17, 1863,
	18, 1863,
	19, 1863,
	21, 1863,
	22, 1863,
	23, 1863,
	24, 1863,
	25, 1863,
	27, 1863,
	30, 1863,
	32, 1863,
	34, 1863,
	37, 1863,
	38, 1863,
	39, 1863,
	40, 1863,
	41, 1863,
	42, 1863,
	43, 1863,
	44, 1863,
	45, 1863,
	46, 1863,
	48, 1863,
	49, 1863,
	50, 1863,
	51, 1863,
	52, 1863,
	53, 1863,
	56, 1863,
	57, 1863,
	58, 1863,
	59, 1863,
	61, 1863,
	62, 1863,
	63, 1863,
	66, 1863,
	67, 1863,
	68, 1863,
	69, 1863,
	70, 1863,
	71, 1863,
	72, 1863,
	73, 1863,
	74, 1863,
	75, 1863,
	77, 1863,
	78, 1863,
	79, 1863,
	80, 1863,
	81, 1863,
	83, 1863,
	84, 1863,
	85, 1863,
	93, 1863,
	94, 1863,
	95, 1863,
	96, 1863,
	97, 1863,
	98, 1863,
	99, 1863,
	100, 1863,
	102, 1863,
	104, 1863,
	105, 1863,
	107, 1863,
	110, 1863,
	111, 1863,
	112, 1863,
	114, 1863,
	116, 1863,
	117, 1863,
	119, 1863,
	120, 1863,
	121, 1863,
	122, 1863,
	123, 1863,
	124, 1863,
	125, 1863,
	126, 1863,
	127, 1863,
	128, 1863,
	129, 1863,
	133, 1863,
	134, 1863,
	135, 1863,
	136, 1863,
	137, 1863,
	138, 1863,
	139, 1863,
	140, 1863,
	141, 1863,
	142, 1863,
	143, 1863,
	144, 1863,
	146, 1863,
	149, 1863,
	150, 1863,
	151, 1863,
	153, 1863,
	154, 1863,
	156, 1863,
	157, 1863,
	159, 1863,
	160, 1863,
	161, 1863,
	162, 1863,
	163, 1863,
	164, 1863,
	165, 1863,
	166, 1863,
	167, 1863,
	168, 1863,
	169, 1863,
	170, 1863,
	171, 1863,
	172, 1863,
	173, 1863,
	174, 1863,
	175, 1863,
	177, 1863,
	178, 1863,
	179, 1863,
	181, 1863,
	182, 1863,
	183, 1863,
	184, 1863,
	185, 1863,
	186, 1863,
	187, 1863,
	188, 1863,
	189, 1863,
	191, 1863,
	193, 1863,
	194, 1863,
	195, 1863,
	196, 1863,
	197, 1863,
	198, 1863,
	199, 1863,
	200, 1863,
	201, 1863,
	202, 1863,
	203, 1863,
	204, 1863,
	205, 1863,
	206, 1863,
	207, 1863,
	209, 1863,
	210, 1863,
	212, 1863,
	213, 1863,
	214, 1863,
	215, 1863,
	216, 1863,
	217, 1863,
	219, 1863,
	220, 1863,
	223, 1863,
	224, 1863,
	225, 1863,
	226, 1863,
	229, 1863,
	230, 1863,
	231, 1863,
	232, 1863,
	233, 1863,
	234, 1863,
	235, 1863,
	236, 1863,
	237, 1863,
	238, 1863,
	241, 1863,
	243, 1863,
	244, 1863,
	245, 1863,
	246, 1863,
	248, 1863,
	249, 1863,
	250, 1863,
	253, 1863,
	254, 1863,
	255, 1863,
	257, 1863,
	258, 1863,
	260, 1863,
	262, 1863,
	263, 1863,
	264, 1863,
	265, 1863,
	266, 1863,
	267, 1863,
	268, 1863,
	269, 1863,
	270, 1863,
	272, 1863,
	273, 1863,
	274, 1863,
	275, 1863,
	276, 1863,
	278, 1863,
	280, 1863,
	281, 1863,
	282, 1863,
	283, 1863,
	284, 1863,
	285, 1863,
	286, 1863,
	287, 1863,
	288, 1863,
	290, 1863,
	291, 1863,
	292, 1863,
	293, 1863,
	294, 1863,
	295, 1863,
	296, 1863,
	297, 1863,
	298, 1863,
	299, 1863,
	300, 1863,
	301, 1863,
	302, 1863,
	303, 1863,
	305, 1863,
	306, 1863,
	307, 1863,
	308, 1863,
	309, 1863,
	310, 1863,
	311, 1863,
	312, 1863,
	313, 1863,
	314, 1863,
	315, 1863,
	316, 1863,
	317, 1863,
	318, 1863,
	319, 1863,
	320, 1863,
	321, 1863,
	323, 1863,
	324, 1863,
	325, 1863,
	326, 1863,
	327, 1863,
	328, 1863,
	329, 1863,
	330, 1863,
	331, 1863,
	332, 1863,
	334, 1863,
	335, 1863,
	336, 1863,
	337, 1863,
	338, 1863,
	339, 1863,
	340, 1863,
	341, 1863,
	342, 1863,
	344, 1863,
	345, 1863,
	346, 1863,
	347, 1863,
	348, 1863,
	349, 1863,
	350, 1863,
	351, 1863,
	352, 1863,
	353, 1863,
	354, 1863,
	355, 1863,
	357, 1863,
	358, 1863,
	359, 1863,
	361, 1863,
	362, 1863,
	363, 1863,
	364, 1863,
	365, 1863,
	366, 1863,
	367, 1863,
	368, 1863,
	369, 1863,
	371, 1863,
	372, 1863,
	373, 1863,
	374, 1863,
	377, 1863,
	378, 1863,
	379, 1863,
	380, 1863,
	381, 1863,
	383, 1863,
	384, 1863,
	385, 1863,
	387, 1863,
	388, 1863,
	391, 1863,
	392, 1863,
	393, 1863,
	394, 1863,
	395, 1863,
	397, 1863,
	399, 1863,
	400, 1863,
	401, 1863,
	402, 1863,
	403, 1863,
	404, 1863,
	405, 1863,
	407, 1863,
	408, 1863,
	409, 1863,
	414, 1863,
	415, 1863,
	416, 1863,
	417, 1863,
	418, 1863,
	419, 1863,
	420, 1863,
	421, 1863,
	423, 1863,
	424, 1863,
	425, 1863,
	426, 1863,
	427, 1863,
	428, 1863,
	430, 1863,
	431, 1863,
	432, 1863,
	433, 1863,
	434, 1863,
	435, 1863,
	436, 1863,
	437, 1863,
	438, 1863,
	440, 1863,
	443, 1863,
	444, 1863,
	447, 1863,
	448, 1863,
	-2, 0,
	-1, 1281,
	148, 1770,
	375, 1770,
	425, 1770,
	444, 1770,
	-2, 0,
	-1, 1348,
	1, 1817,
	441, 1817,
	443, 1817,
	444, 1817,
	445, 1817,
	446, 1817,
	-2, 595,
	-1, 1349,
	1, 1768,
	441, 1768,
	443, 1768,
	444, 1768,
	445, 1768,
	446, 1768,
	-2, 596,
	-1, 1362,
	196, 860,
	278, 860,
	285, 860,
	-2, 855,
	-1, 1367,
	132, 966,
	218, 966,
	247, 966,
	-2, 924,
	-1, 1460,
	118, 928,
	132, 928,
	190, 928,
	218, 928,
	247, 928,
	256, 928,
	389, 928,
	-2, 1318,
	-1, 1511,
	443, 1451,
	-2, 0,
	-1, 1544,
	118, 928,
	132, 928,
	190, 928,
	218, 928,
	247, 928,
	256, 928,
	389, 928,
	-2, 1036,
	-1, 1598,
	442, 1150,
	-2, 1138,
	-1, 1637,
	196, 860,
	278, 860,
	285, 860,
	-2, 440,
	-1, 1886,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1196,
	-1, 1887,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1197,
	-1, 1888,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1198,
	-1, 1889,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1199,
	-1, 1890,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1200,
	-1, 1891,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1201,
	-1, 1892,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1202,
	-1, 1893,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1203,
	-1, 1905,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1215,
	-1, 1906,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1216,
	-1, 1907,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1217,
	-1, 1910,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1222,
	-1, 1916,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1226,
	-1, 1918,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1234,
	-1, 1919,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1235,
	-1, 1920,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1236,
	-1, 1921,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1237,
	-1, 2012,
	5, 1107,
	148, 1462,
	442, 1573,
	-2, 1564,
	-1, 2013,
	148, 1463,
	-2, 1821,
	-1, 2014,
	148, 1464,
	-2, 1695,
	-1, 2015,
	148, 1465,
	-2, 1625,
	-1, 2016,
	148, 1466,
	-2, 1659,
	-1, 2017,
	148, 1467,
	-2, 1694,
	-1, 2018,
	148, 1468,
	-2, 1761,
	-1, 2086,
	1, 1037,
	83, 1037,
	118, 1037,
	132, 1037,
	145, 1037,
	149, 1037,
	155, 1037,
	158, 1037,
	181, 1037,
	190, 1037,
	199, 1037,
	214, 1037,
	218, 1037,
	234, 1037,
	247, 1037,
	251, 1037,
	256, 1037,
	304, 1037,
	306, 1037,
	389, 1037,
	398, 1037,
	411, 1037,
	412, 1037,
	413, 1037,
	422, 1037,
	441, 1037,
	443, 1037,
	445, 1037,
	446, 1037,
	447, 1037,
	-2, 1036,
	-1, 2091,
	442, 1550,
	-2, 1562,
	-1, 2110,
	442, 1149,
	-2, 1139,
	-1, 2319,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1224,
	-1, 2320,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1228,
	-1, 2326,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1230,
	-1, 2500,
	196, 860,
	278, 860,
	285, 860,
	-2, 437,
	-1, 2571,
	443, 1521,
	447, 1521,
	-2, 1537,
	-1, 2583,
	268, 952,
	-2, 764,
	-1, 2660,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1232,
	-1, 2667,
	194, 0,
	195, 0,
	241, 0,
	-2, 1251,
	-1, 2728,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1282,
	-1, 2729,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1283,
	-1, 2730,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1284,
	-1, 2734,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1288,
	-1, 2735,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1289,
	-1, 2736,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1290,
	-1, 2778,
	442, 1551,
	-2, 1563,
	-1, 2898,
	194, 0,
	195, 0,
	241, 0,
	-2, 1252,
	-1, 2901,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1255,
	-1, 2902,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1257,
	-1, 3043,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1256,
	-1, 3044,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1258,
	-1, 3054,
	194, 0,
	-2, 1291,
	-1, 3144,
	194, 0,
	-2, 1292,
	-1, 3250,
	40, 0,
	169, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1824,
}

const sqlPrivate = 57344

const sqlLast = 65497

var sqlAct = [...]int{

	862, 3249, 3082, 3107, 3330, 3259, 2999, 3320, 2234, 2572,
	3222, 3223, 3209, 3225, 2047, 3261, 3260, 2242, 3085, 3110,
	3071, 1801, 2796, 2698, 3248, 3148, 3012, 980, 1873, 791,
	2848, 2843, 2078, 2957, 1267, 3035, 1933, 2797, 2569, 1568,
	205, 2347, 205, 205, 1375, 2594, 205, 205, 205, 205,
	205, 2853, 2600, 205, 782, 539, 2592, 1539, 1556, 2312,
	2605, 560, 2274, 3058, 1130, 1031, 819, 1458, 2209, 884,
	2466, 1569, 2231, 2212, 2477, 1762, 2345, 1537, 2933, 205,
	2428, 969, 2265, 560, 1780, 2074, 1759, 2442, 656, 1518,
	2243, 2273, 1751, 2140, 1689, 2079, 1752, 1680, 2131, 2453,
	2267, 2751, 861, 2192, 2138, 1468, 2427, 3149, 1870, 1964,
	1866, 1263, 200, 1946, 5, 2508, 1142, 2308, 1707, 2604,
	1668, 790, 139, 2210, 1362, 1713, 87, 1139, 1019, 3108,
	1666, 1976, 858, 2482, 1123, 1519, 1930, 2170, 779, 2193,
	1260, 2570, 1132, 1276, 1250, 2236, 1748, 1196, 202, 201,
	2277, 2081, 2044, 1010, 561, 1958, 507, 2066, 961, 562,
	964, 1528, 2051, 1547, 817, 943, 2169, 1947, 33, 2008,
	1376, 205, 205, 1449, 1374, 146, 523, 147, 556, 1768,
	1226, 533, 632, 1150, 601, 1274, 1679, 510, 818, 781,
	1481, 941, 651, 491, 966, 1380, 1361, 697, 515, 139,
	2767, 1208, 2343, 2768, 518, 1782, 1782, 1802, 1782, 565,
	568, 3358, 2235, 1388, 1389, 2060, 2194, 3349, 1538, 3348,
	3329, 2060, 2077, 2060, 1720, 3316, 3314, 2194, 2655, 2971,
	2971, 565, 568, 3280, 3279, 2612, 3276, 2060, 2060, 1391,
	3277, 1794, 3273, 3270, 786, 3246, 3274, 1720, 2611, 1720,
	3245, 3242, 2754, 786, 1720, 1794, 1388, 1389, 2578, 1716,
	2498, 665, 1431, 1432, 1433, 1390, 1388, 1389, 3241, 992,
	3204, 2362, 1794, 1410, 2103, 787, 3195, 2363, 2053, 3194,
	2971, 972, 1391, 2971, 3188, 1437, 3182, 3180, 1720, 3146,
	2971, 2971, 1391, 2103, 3132, 3129, 3099, 2187, 1720, 2971,
	1720, 139, 3098, 3091, 2060, 3090, 1720, 1720, 1390, 2971,
	3064, 947, 2157, 948, 1720, 767, 1410, 766, 1390, 2894,
	3045, 3026, 944, 944, 2103, 2624, 2995, 2989, 2970, 2900,
	2060, 2060, 2971, 2103, 3205, 1413, 1414, 1415, 1416, 2100,
	2867, 993, 958, 774, 2860, 1396, 2859, 2773, 2763, 2757,
	2860, 2774, 2764, 2060, 2691, 2631, 2439, 2395, 1720, 2632,
	2060, 2060, 2394, 945, 2390, 2375, 2060, 2364, 2060, 2376,
	2263, 2060, 3133, 1720, 1798, 1418, 1419, 1420, 1413, 1414,
	1415, 1416, 2116, 2102, 1794, 2097, 2060, 2103, 1396, 2060,
	2093, 2059, 2754, 1797, 1720, 2060, 1171, 1798, 1396, 2052,
	176, 2990, 997, 1720, 2632, 2184, 2129, 176, 1640, 2624,
	2218, 2311, 1719, 2127, 1428, 1438, 1514, 1149, 1418, 1419,
	1420, 179, 176, 1659, 2613, 949, 1411, 176, 1418, 1419,
	1420, 946, 773, 3266, 772, 2060, 771, 770, 178, 769,
	765, 1388, 1389, 2614, 2346, 178, 764, 763, 1961, 762,
	761, 760, 759, 1165, 1783, 1783, 758, 1783, 1159, 652,
	178, 757, 1426, 756, 755, 178, 754, 1391, 695, 1411,
	694, 693, 692, 789, 691, 690, 689, 688, 687, 1411,
	686, 177, 685, 684, 59, 683, 654, 682, 177, 681,
	680, 170, 679, 1390, 678, 60, 205, 1417, 170, 171,
	2239, 677, 676, 177, 675, 205, 171, 674, 177, 64,
	673, 1962, 672, 170, 671, 1412, 664, 663, 623, 622,
	148, 171, 581, 1540, 580, 579, 205, 148, 571, 570,
	1459, 569, 2948, 205, 2611, 546, 1388, 1389, 545, 70,
	1417, 544, 148, 543, 527, 1387, 198, 148, 197, 205,
	1034, 205, 205, 1135, 205, 1034, 205, 1720, 1412, 993,
	1170, 196, 1391, 195, 205, 205, 194, 1018, 1412, 76,
	193, 1023, 192, 1396, 191, 1999, 190, 2052, 86, 1963,
	1960, 189, 77, 1429, 188, 2400, 2401, 187, 1390, 205,
	186, 185, 184, 990, 183, 182, 181, 2224, 2912, 1790,
	1781, 180, 1846, 205, 2861, 1135, 1135, 205, 205, 2771,
	205, 2480, 2400, 2401, 2369, 2358, 2294, 1164, 2197, 2085,
	78, 2094, 205, 1153, 1664, 1554, 1997, 1475, 1155, 1804,
	205, 1995, 1401, 1399, 1400, 1392, 1393, 1394, 1395, 1397,
	1398, 1025, 1993, 982, 205, 205, 205, 205, 205, 1135,
	1135, 3247, 1991, 3178, 1135, 860, 205, 1135, 205, 1008,
	3139, 3081, 3136, 3027, 1126, 1427, 2950, 1145, 1396, 3134,
	1470, 1965, 2415, 1430, 2932, 1401, 1399, 1400, 1392, 1393,
	1394, 1395, 1397, 1398, 1271, 1401, 1399, 1400, 1392, 1393,
	1394, 1395, 1397, 1398, 3020, 1803, 2931, 957, 1418, 1419,
	1420, 993, 1135, 2400, 2401, 2919, 2918, 1027, 2917, 1120,
	1125, 2916, 565, 568, 1005, 2910, 176, 2406, 1152, 1209,
	1209, 176, 205, 1151, 2909, 2908, 79, 2907, 2833, 2786,
	2785, 2783, 2777, 2748, 2747, 2746, 205, 1213, 2675, 2671,
	2475, 2400, 2401, 1158, 2406, 1163, 2435, 1169, 2635, 1411,
	2426, 205, 2399, 2396, 178, 2393, 2391, 145, 82, 178,
	83, 2374, 2352, 2351, 2225, 2344, 2264, 2086, 1959, 1279,
	1969, 1387, 1032, 176, 1725, 1264, 139, 1143, 176, 176,
	787, 1470, 1756, 1723, 1459, 1457, 1386, 3356, 3328, 1254,
	1257, 655, 2108, 176, 116, 3327, 1277, 177, 2416, 1471,
	3281, 1469, 177, 59, 981, 2700, 3237, 170, 1367, 1210,
	3235, 178, 170, 3173, 60, 171, 178, 178, 3171, 3168,
	171, 1368, 3167, 3163, 3157, 2416, 3128, 3127, 64, 1936,
	1286, 178, 3077, 3056, 971, 2406, 148, 1289, 1412, 3032,
	117, 2238, 2400, 2401, 3031, 2418, 2419, 2420, 1660, 2171,
	3010, 3007, 149, 3003, 177, 2947, 2930, 2307, 70, 177,
	177, 2896, 2881, 2878, 170, 1394, 1395, 1397, 1398, 170,
	170, 2812, 171, 2406, 177, 2811, 2800, 171, 171, 2799,
	2759, 2666, 2625, 2586, 170, 3019, 2558, 2417, 76, 2539,
	2518, 2517, 171, 148, 1360, 2494, 1293, 86, 148, 653,
	2438, 77, 2415, 2492, 2373, 1366, 2372, 2357, 2335, 816,
	2206, 1482, 1942, 148, 2417, 1479, 2112, 2111, 2089, 2071,
	1373, 2058, 1989, 2223, 1453, 1553, 1517, 1365, 1513, 2400,
	2401, 1512, 1511, 1510, 1509, 1508, 1507, 1506, 1363, 78,
	1505, 1503, 1502, 205, 1501, 1500, 1499, 1498, 1497, 1388,
	1389, 1496, 1495, 787, 2416, 1494, 1399, 1400, 1392, 1393,
	1394, 1395, 1397, 1398, 3151, 2459, 767, 2949, 766, 205,
	1493, 1525, 1516, 1369, 2406, 1391, 1492, 1491, 1472, 1454,
	1383, 1384, 205, 1034, 205, 205, 1452, 2400, 2401, 1805,
	1447, 1135, 560, 205, 205, 1004, 995, 560, 205, 987,
	2904, 1390, 1562, 205, 2411, 2409, 2410, 2402, 2403, 2404,
	2405, 2407, 2408, 2105, 2518, 1471, 1998, 1650, 1649, 1635,
	2782, 1659, 1656, 2766, 1548, 2421, 1034, 2762, 1535, 2361,
	801, 2411, 2409, 2410, 2402, 2403, 2404, 2405, 2407, 2408,
	2072, 1522, 1523, 2417, 2490, 79, 2400, 2401, 1450, 1662,
	1549, 1565, 2542, 795, 1659, 2416, 1632, 1022, 1634, 1659,
	3172, 2406, 1575, 1020, 1684, 1600, 972, 1996, 972, 1483,
	1484, 2595, 1994, 3025, 2991, 1536, 145, 82, 3137, 83,
	2194, 2769, 139, 1992, 1655, 3135, 1659, 2627, 973, 1488,
	2626, 1540, 787, 1990, 944, 1489, 1486, 1498, 176, 2173,
	1358, 3080, 1487, 2380, 1308, 2379, 1498, 1021, 2378, 2377,
	655, 1646, 2317, 116, 1653, 2159, 1017, 1559, 2810, 2406,
	2574, 1961, 2573, 1477, 1802, 3111, 1545, 2404, 2405, 2407,
	2408, 752, 1637, 1753, 1515, 2641, 178, 956, 2553, 1702,
	565, 568, 2416, 3059, 2417, 565, 568, 1388, 1389, 1135,
	205, 3331, 2235, 2702, 2367, 1658, 1034, 1674, 1542, 117,
	1572, 2409, 2410, 2402, 2403, 2404, 2405, 2407, 2408, 753,
	1564, 149, 3267, 1391, 2030, 1631, 1977, 2110, 1504, 177,
	1485, 1566, 2400, 2401, 1962, 2567, 1745, 3278, 1186, 170,
	1757, 3275, 2607, 2792, 3219, 205, 205, 171, 2844, 1390,
	2416, 2271, 205, 3304, 1601, 1557, 1651, 547, 3305, 2981,
	3187, 746, 205, 1174, 618, 1733, 613, 2502, 148, 1297,
	2117, 205, 1456, 205, 1184, 205, 3353, 744, 3268, 205,
	3105, 2417, 3102, 1654, 742, 1332, 1836, 1704, 3101, 3100,
	1706, 205, 739, 1710, 748, 2826, 2823, 1688, 1665, 1834,
	2822, 2789, 1963, 1960, 2412, 2413, 2414, 2788, 2356, 785,
	2355, 2411, 2409, 2410, 2402, 2403, 2404, 2405, 2407, 2408,
	2232, 2354, 2353, 2321, 2189, 1714, 1647, 2183, 2180, 1396,
	2161, 1135, 205, 1135, 2099, 612, 1388, 1389, 1135, 2417,
	1022, 619, 205, 205, 1185, 1917, 1364, 2142, 565, 568,
	553, 1148, 1135, 1135, 1152, 205, 1681, 1774, 1744, 1151,
	1765, 205, 1391, 2133, 2406, 2133, 560, 205, 1331, 205,
	1022, 205, 1806, 205, 2815, 205, 2132, 2998, 1988, 1987,
	1741, 784, 1709, 1718, 1678, 205, 2491, 205, 1390, 1785,
	1021, 3040, 1787, 2541, 1965, 1789, 205, 736, 1986, 1792,
	2410, 2402, 2403, 2404, 2405, 2407, 2408, 1682, 1683, 1985,
	1815, 1843, 1295, 3186, 1875, 205, 1735, 1734, 2642, 1197,
	1021, 205, 1219, 1217, 1218, 1216, 1398, 1238, 1721, 2160,
	1772, 555, 1290, 2829, 2145, 1180, 1844, 1811, 2092, 3087,
	1818, 1034, 2152, 3239, 1932, 2977, 1343, 786, 2151, 2644,
	1371, 1767, 1932, 1003, 1770, 1195, 785, 787, 2802, 2402,
	2403, 2404, 2405, 2407, 2408, 1771, 1327, 1940, 1396, 1807,
	2106, 1853, 1938, 1277, 2643, 1549, 1850, 611, 2291, 610,
	670, 1965, 3296, 780, 2602, 2685, 1182, 2682, 2309, 2310,
	1270, 1959, 1194, 2550, 1845, 2603, 1660, 1657, 1418, 1419,
	1420, 1977, 1928, 985, 2545, 1575, 1575, 614, 1600, 1600,
	1871, 1872, 1309, 1005, 565, 568, 1799, 1328, 1948, 1949,
	1701, 1676, 549, 2408, 1926, 1291, 1034, 834, 784, 1660,
	2171, 3343, 1388, 1389, 1660, 2171, 1948, 1974, 554, 1330,
	3164, 2177, 3323, 1669, 1825, 1782, 3304, 1670, 2602, 1411,
	2561, 1684, 621, 620, 1686, 2683, 1848, 2120, 1391, 2530,
	1197, 1660, 2171, 1851, 2144, 205, 984, 1357, 2007, 2122,
	2011, 2011, 2021, 2023, 2028, 1690, 1948, 1965, 551, 2503,
	783, 650, 2050, 2975, 1390, 3263, 2501, 3295, 2824, 1034,
	205, 1847, 1694, 1849, 786, 1842, 1852, 1014, 2529, 205,
	1984, 2123, 205, 1572, 1572, 1034, 767, 1480, 1862, 767,
	767, 1863, 1864, 2220, 2121, 548, 2181, 1676, 2090, 1392,
	1393, 1394, 1395, 1397, 1398, 1922, 2296, 1973, 2886, 787,
	3050, 2087, 1671, 1923, 1691, 2098, 1924, 740, 1412, 1929,
	1340, 3175, 787, 1446, 1673, 2073, 787, 1965, 1669, 2083,
	2084, 552, 1670, 740, 2402, 2403, 2404, 2405, 2407, 2408,
	741, 1835, 550, 1874, 1396, 1296, 2371, 750, 740, 971,
	749, 971, 1944, 2813, 1833, 2130, 1968, 2143, 3037, 1015,
	2803, 2067, 972, 3202, 205, 2082, 1016, 786, 2882, 1971,
	2780, 2888, 2532, 1237, 1418, 1419, 1420, 2976, 1675, 972,
	998, 1179, 3264, 3262, 1669, 1695, 975, 2299, 1670, 1294,
	3303, 727, 3088, 2534, 1305, 1034, 944, 3294, 3301, 3117,
	205, 1314, 1341, 787, 2835, 3321, 2019, 783, 205, 2039,
	2048, 3009, 2101, 778, 2590, 2056, 2057, 1671, 205, 139,
	2068, 2069, 2064, 2063, 2227, 1411, 1746, 1638, 1978, 1673,
	1524, 205, 1379, 1914, 1135, 737, 2533, 1545, 1392, 1393,
	1394, 1395, 1397, 1398, 2323, 503, 205, 1034, 1696, 1697,
	205, 205, 1931, 1705, 1817, 3265, 1925, 1692, 3036, 1684,
	3344, 2107, 2134, 1370, 1939, 1927, 1002, 1676, 996, 498,
	1292, 3322, 1342, 1671, 1783, 991, 205, 205, 2298, 2968,
	205, 490, 728, 1675, 1693, 1673, 2887, 1575, 2564, 3200,
	1600, 1685, 2164, 2115, 2295, 205, 2536, 2207, 3093, 2146,
	2148, 1009, 205, 3324, 205, 2965, 205, 2091, 2928, 3092,
	2483, 3075, 205, 2163, 1412, 205, 1378, 205, 3201, 205,
	2114, 205, 205, 2118, 205, 1135, 1135, 1135, 3154, 1135,
	2791, 2591, 2191, 205, 205, 2215, 205, 1483, 1484, 1675,
	2514, 983, 205, 1126, 2980, 3338, 2966, 2510, 2228, 1527,
	2137, 2979, 3038, 205, 572, 205, 2211, 2190, 2283, 2737,
	2259, 2260, 1912, 1915, 1531, 2178, 2154, 1698, 2332, 2208,
	1766, 2297, 1676, 205, 205, 205, 2162, 205, 2156, 1755,
	1754, 2229, 1729, 1446, 3176, 1572, 2681, 1462, 2467, 2179,
	2330, 1467, 2172, 2174, 2175, 2176, 1534, 1858, 565, 568,
	205, 1672, 1377, 973, 1152, 973, 2246, 2165, 2186, 2195,
	1911, 2289, 2204, 2290, 2065, 1531, 3210, 2128, 1839, 1641,
	729, 1014, 2270, 2199, 2849, 2201, 2219, 1378, 1676, 1532,
	1699, 1379, 2255, 1400, 1392, 1393, 1394, 1395, 1397, 1398,
	1645, 2285, 2261, 2286, 3013, 2929, 2241, 1534, 1527, 139,
	1315, 2257, 1676, 727, 2205, 2248, 1240, 1667, 3076, 2252,
	2520, 2253, 2256, 2254, 2456, 1529, 2519, 2237, 2315, 2237,
	1812, 1277, 2262, 1306, 2062, 778, 2284, 2272, 2061, 2468,
	1532, 1712, 2324, 2096, 2961, 2301, 3337, 2962, 2095, 2978,
	2738, 2327, 1211, 1859, 669, 1014, 2739, 2349, 2350, 205,
	1530, 1711, 2328, 1015, 1643, 2333, 1672, 2217, 784, 1212,
	1016, 662, 2359, 1377, 1531, 499, 3159, 2455, 2304, 1644,
	730, 1533, 2964, 1128, 1307, 2306, 3177, 1304, 3, 1708,
	776, 1913, 727, 1225, 2967, 2303, 3083, 1223, 3000, 2636,
	505, 2166, 2167, 1764, 728, 3308, 1534, 2484, 3109, 573,
	574, 3073, 1682, 1683, 778, 2563, 2934, 2360, 731, 3213,
	3160, 2752, 1672, 1982, 1529, 3310, 3055, 500, 2430, 2927,
	1355, 1337, 1533, 1335, 2828, 1202, 1205, 1015, 2429, 1532,
	2665, 2322, 2486, 2392, 1016, 1034, 3074, 2334, 1325, 777,
	2440, 2437, 2188, 787, 2158, 2447, 2448, 1323, 1321, 1530,
	1319, 205, 2113, 2449, 205, 501, 1555, 502, 1317, 1552,
	1356, 205, 1287, 3084, 205, 205, 1034, 3214, 3161, 780,
	1832, 1311, 2293, 728, 2292, 1034, 2288, 1283, 1221, 1841,
	205, 1822, 1633, 576, 575, 2963, 2463, 2366, 1490, 2470,
	1201, 1981, 2329, 3258, 205, 3207, 2471, 2472, 2954, 2847,
	3121, 2331, 2808, 2806, 738, 2790, 2589, 2693, 2576, 2575,
	2462, 205, 205, 205, 2454, 2233, 2222, 205, 2221, 2461,
	205, 1533, 1300, 2464, 2474, 2499, 2202, 205, 205, 205,
	205, 205, 729, 577, 578, 1796, 972, 2504, 2487, 667,
	668, 205, 205, 1795, 972, 972, 2458, 2479, 972, 205,
	1575, 2478, 2497, 1600, 1793, 2489, 660, 661, 979, 2495,
	2496, 205, 1135, 1791, 205, 971, 1354, 1336, 2441, 1334,
	1034, 1788, 972, 1224, 2432, 2433, 2434, 1222, 1034, 2511,
	504, 1786, 971, 205, 1324, 1575, 205, 205, 1600, 1784,
	2515, 1775, 1726, 1322, 1320, 3305, 1318, 2444, 1135, 205,
	1724, 1135, 1135, 1135, 1316, 2451, 2452, 1715, 205, 2457,
	2485, 729, 2469, 1831, 205, 2544, 2507, 1310, 2579, 205,
	2577, 205, 2500, 1703, 1220, 743, 745, 1700, 205, 1687,
	2505, 2521, 730, 2524, 1677, 2516, 2593, 953, 3231, 1674,
	3029, 2313, 3028, 2522, 1381, 2526, 2527, 1663, 1572, 1176,
	3123, 1135, 1135, 2150, 2858, 2559, 2598, 2446, 1684, 205,
	205, 954, 1819, 205, 1674, 2535, 2623, 3166, 2540, 2597,
	731, 1352, 1353, 1744, 2609, 205, 1034, 205, 205, 1034,
	205, 2546, 2549, 1572, 3141, 2163, 2639, 2133, 2473, 2560,
	2555, 2554, 2133, 2935, 1714, 2551, 205, 2481, 2149, 2168,
	1714, 1388, 1389, 2147, 2537, 2153, 2538, 1388, 1389, 775,
	1385, 730, 2314, 2185, 859, 2155, 3206, 2617, 2618, 2619,
	2547, 2620, 2621, 2606, 2548, 506, 1382, 1391, 3179, 2839,
	3319, 2834, 2606, 2776, 2556, 2240, 2557, 2049, 2638, 1034,
	1636, 2596, 1567, 955, 2649, 787, 2634, 2615, 2488, 731,
	1034, 3336, 205, 1390, 203, 2668, 493, 494, 2622, 1390,
	511, 493, 511, 521, 526, 139, 1459, 542, 2400, 2401,
	1388, 1389, 2608, 517, 1299, 566, 2125, 2124, 2781, 2688,
	1298, 2125, 1575, 2493, 2126, 1600, 1983, 1956, 2905, 2680,
	1457, 2650, 2646, 659, 1455, 2703, 1339, 566, 3345, 1338,
	2481, 3067, 2653, 2651, 2647, 2677, 2678, 2679, 3023, 3002,
	2877, 1563, 2866, 1861, 2842, 2832, 2831, 2830, 2805, 973,
	2616, 975, 2587, 975, 2704, 2585, 2250, 2226, 2203, 1575,
	1575, 2749, 1600, 1600, 1871, 2707, 973, 2673, 1943, 1778,
	1777, 1776, 1561, 205, 2684, 2686, 2687, 1575, 1575, 2692,
	1600, 1600, 1871, 2717, 1758, 205, 1737, 1941, 1736, 2699,
	1732, 1034, 1731, 1730, 1728, 1727, 1372, 1351, 1350, 1333,
	1329, 2706, 1326, 1312, 1249, 2765, 1462, 2770, 1575, 205,
	1572, 1600, 1248, 2745, 2714, 493, 493, 1247, 2741, 2716,
	1246, 1245, 1244, 974, 1243, 1242, 1241, 1239, 1143, 1234,
	1233, 1032, 1232, 1231, 1230, 1193, 1192, 1191, 1190, 1189,
	1188, 1187, 1181, 1175, 1173, 2742, 1172, 1001, 1000, 928,
	839, 2035, 205, 1639, 751, 605, 2753, 1572, 1572, 2755,
	2756, 735, 2758, 2750, 2816, 3086, 1345, 2787, 75, 972,
	139, 1183, 2784, 592, 2031, 1572, 1572, 69, 2804, 3218,
	2772, 725, 2528, 2825, 1821, 205, 205, 205, 1313, 205,
	1747, 2690, 1823, 2460, 2827, 2070, 3199, 2913, 2370, 1717,
	1034, 205, 2696, 3147, 3049, 1135, 1572, 2820, 1980, 1476,
	71, 827, 910, 2955, 2793, 2276, 2275, 1037, 1648, 2807,
	2794, 2809, 205, 833, 1661, 2109, 2010, 1571, 836, 2862,
	2761, 1573, 838, 837, 1574, 205, 205, 1135, 1135, 1135,
	1478, 205, 205, 205, 835, 2814, 205, 205, 1570, 2850,
	2216, 2821, 2854, 205, 2163, 2244, 1228, 715, 1652, 1937,
	1975, 2873, 2365, 1473, 2855, 2779, 1034, 807, 829, 2851,
	2885, 1972, 994, 806, 2465, 2601, 2775, 3018, 1857, 2305,
	1854, 608, 2397, 1957, 986, 2845, 2841, 2036, 2029, 2025,
	1359, 1448, 2245, 1024, 2968, 810, 1935, 2903, 1464, 1744,
	2339, 2476, 2856, 2852, 2610, 2104, 1865, 952, 951, 950,
	2864, 205, 2863, 2778, 3224, 3221, 2899, 2884, 2869, 971,
	2965, 2838, 2880, 2958, 2890, 972, 2246, 971, 971, 2874,
	2875, 971, 2879, 1800, 2876, 2868, 2956, 1642, 2119, 1440,
	823, 2445, 2960, 1575, 2637, 1198, 1600, 3165, 1439, 747,
	3156, 2891, 1813, 1814, 1013, 971, 1012, 1011, 2513, 3342,
	2801, 2966, 175, 172, 174, 173, 2818, 2562, 91, 38,
	205, 37, 36, 18, 115, 114, 113, 112, 111, 110,
	1034, 109, 1034, 108, 107, 106, 2444, 105, 104, 103,
	102, 2959, 101, 100, 99, 98, 97, 96, 95, 205,
	205, 205, 94, 93, 92, 2926, 35, 538, 535, 51,
	50, 205, 90, 89, 17, 34, 15, 205, 55, 205,
	56, 14, 205, 205, 205, 205, 205, 30, 2939, 31,
	81, 80, 2973, 205, 205, 1135, 29, 1034, 16, 1135,
	988, 1572, 2941, 28, 2937, 2938, 26, 27, 2942, 659,
	2940, 12, 9, 8, 11, 205, 13, 25, 1034, 2946,
	144, 1135, 143, 2953, 74, 2943, 2478, 972, 2972, 2974,
	999, 205, 142, 2997, 73, 3004, 141, 542, 140, 72,
	2984, 2985, 24, 10, 23, 136, 68, 972, 138, 137,
	65, 135, 205, 203, 134, 203, 203, 1034, 1140, 2961,
	203, 66, 2962, 2951, 133, 3014, 2992, 132, 566, 1154,
	67, 3030, 131, 22, 2598, 2952, 3017, 3005, 6, 54,
	7, 2982, 2996, 1034, 3034, 3015, 2640, 3024, 2936, 2987,
	84, 3022, 85, 1178, 2983, 3016, 32, 2964, 63, 62,
	61, 2988, 21, 3011, 53, 20, 1744, 1200, 166, 2967,
	3033, 203, 203, 165, 1140, 164, 163, 159, 158, 1034,
	3061, 3041, 3039, 162, 160, 205, 203, 205, 2993, 1034,
	205, 2035, 2035, 973, 1236, 2606, 161, 157, 205, 130,
	3057, 973, 973, 168, 167, 973, 155, 152, 203, 203,
	203, 203, 1140, 3046, 2031, 2031, 151, 3070, 154, 156,
	542, 205, 203, 153, 2945, 150, 169, 1575, 3065, 973,
	1600, 3062, 3063, 3001, 205, 129, 58, 975, 3006, 3089,
	205, 128, 3066, 127, 3113, 1135, 126, 3068, 125, 124,
	205, 3104, 57, 19, 975, 2, 1, 0, 3021, 0,
	3114, 0, 0, 3116, 0, 0, 0, 0, 0, 0,
	2963, 205, 3112, 0, 0, 0, 3103, 0, 1575, 3126,
	0, 1600, 0, 3095, 3130, 3131, 203, 0, 0, 3118,
	205, 0, 3125, 2035, 2035, 2035, 205, 3096, 3097, 2854,
	203, 0, 3069, 3120, 205, 0, 3124, 0, 3122, 3119,
	0, 0, 0, 0, 0, 526, 2031, 2031, 2031, 0,
	0, 2598, 3162, 0, 3153, 1572, 3145, 0, 3150, 0,
	0, 205, 205, 3152, 3140, 2336, 2337, 0, 0, 1032,
	0, 0, 971, 0, 0, 0, 0, 3174, 205, 1135,
	0, 0, 0, 1575, 205, 0, 1600, 0, 1135, 1135,
	0, 0, 0, 0, 0, 3047, 205, 0, 205, 0,
	0, 0, 0, 0, 2182, 0, 1572, 3181, 3193, 0,
	0, 3185, 0, 0, 0, 0, 3203, 0, 205, 0,
	0, 0, 3191, 3192, 205, 205, 3215, 1034, 0, 3196,
	0, 3047, 0, 0, 0, 0, 205, 3190, 0, 0,
	3226, 1874, 0, 3184, 0, 3232, 3227, 0, 3229, 0,
	0, 0, 0, 0, 3197, 3220, 3198, 3240, 0, 3234,
	3243, 3236, 3228, 0, 0, 3169, 205, 2423, 2424, 2425,
	0, 0, 3238, 3244, 0, 0, 0, 3170, 3269, 0,
	0, 1572, 3216, 0, 0, 0, 3254, 3255, 0, 0,
	3257, 3256, 0, 0, 0, 2258, 3282, 0, 0, 3189,
	205, 3284, 0, 3286, 0, 3271, 0, 3291, 0, 0,
	0, 3292, 3293, 3283, 0, 0, 0, 3288, 3285, 205,
	3287, 0, 0, 3289, 3290, 1526, 0, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 3300, 493, 3302, 3299,
	0, 0, 205, 0, 3306, 3307, 0, 0, 3313, 3226,
	3315, 3309, 3312, 0, 0, 0, 3318, 3317, 1543, 0,
	974, 0, 0, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 3326, 3325, 0, 0, 1154, 0, 203, 1560,
	3333, 3335, 0, 0, 0, 0, 566, 1154, 511, 3339,
	0, 566, 1154, 3332, 0, 3334, 0, 542, 0, 3346,
	3311, 3347, 3340, 3341, 2246, 0, 0, 0, 3233, 0,
	3350, 3351, 3352, 2035, 2035, 3354, 3355, 0, 0, 0,
	0, 0, 3359, 0, 0, 0, 973, 0, 0, 0,
	0, 3357, 0, 0, 0, 0, 2031, 2031, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1874,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 0, 0, 0, 793, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 0, 2035, 2035, 2035, 2035, 2035, 2035, 2035,
	2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035,
	2035, 2035, 0, 2035, 0, 0, 2031, 2031, 2031, 2031,
	2031, 2031, 2031, 2031, 2031, 2031, 2031, 2031, 2031, 2031,
	2031, 2031, 2031, 2031, 2031, 0, 2031, 0, 0, 0,
	0, 0, 0, 0, 566, 1388, 1389, 0, 1421, 1422,
	1423, 1431, 1432, 1433, 0, 0, 0, 2661, 2662, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1391, 0, 0, 1437, 0, 0, 0, 0, 0,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 203,
	203, 975, 0, 0, 0, 0, 203, 1390, 0, 975,
	975, 0, 0, 975, 0, 1410, 1763, 0, 0, 0,
	0, 0, 1407, 0, 0, 203, 0, 203, 0, 203,
	0, 0, 0, 493, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 1779, 0, 2718, 2719, 2720,
	2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730,
	2731, 2732, 2733, 2734, 2735, 2736, 0, 2740, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1413, 1414, 1415,
	1416, 0, 0, 0, 0, 0, 542, 1396, 0, 0,
	0, 0, 2552, 0, 0, 0, 1140, 203, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 542,
	0, 0, 0, 1428, 1438, 203, 1561, 1418, 1419, 1420,
	566, 203, 0, 203, 0, 203, 0, 203, 2580, 203,
	0, 2582, 2583, 2584, 973, 0, 0, 0, 0, 1837,
	0, 1838, 0, 0, 0, 0, 1405, 1406, 0, 0,
	203, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 1426, 0, 0, 0, 0, 0, 0, 1411, 526,
	0, 0, 0, 0, 0, 542, 0, 0, 0, 0,
	0, 2629, 2630, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2400, 2401, 0, 2418, 2419, 2420, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2895, 0, 0, 0, 0, 0, 0, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 828, 88, 0, 0, 0, 0, 1412, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2415, 0, 793, 0, 0, 0, 793, 0, 0,
	0, 0, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1156,
	0, 1160, 0, 1166, 0, 0, 0, 0, 0, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 2406, 493, 0, 0, 0, 0, 0,
	0, 974, 0, 493, 0, 0, 203, 0, 0, 0,
	0, 0, 0, 0, 1427, 0, 0, 1402, 1403, 1409,
	1408, 1404, 1430, 0, 1401, 1399, 1400, 1392, 1393, 1394,
	1395, 1397, 1398, 0, 0, 0, 0, 0, 0, 0,
	0, 768, 0, 0, 2421, 0, 1285, 0, 0, 0,
	788, 0, 0, 1288, 975, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 59, 2416, 0, 0, 0, 2035, 0,
	962, 88, 0, 0, 60, 118, 0, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	0, 2031, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 40, 120, 0, 0, 2035, 0, 0,
	0, 0, 0, 0, 2141, 0, 39, 0, 70, 0,
	0, 0, 203, 0, 0, 0, 0, 0, 0, 0,
	2031, 0, 203, 0, 0, 0, 0, 0, 42, 0,
	0, 0, 0, 43, 0, 203, 0, 0, 76, 0,
	0, 121, 0, 2417, 0, 0, 41, 86, 0, 0,
	203, 77, 44, 0, 566, 2196, 0, 0, 0, 0,
	0, 0, 1441, 1442, 1443, 1444, 1445, 2870, 2871, 2872,
	0, 0, 0, 0, 0, 0, 0, 0, 45, 0,
	203, 1154, 0, 0, 203, 0, 2035, 0, 0, 78,
	975, 0, 1461, 0, 0, 0, 0, 0, 1474, 1763,
	0, 0, 3054, 0, 0, 0, 2141, 0, 493, 2031,
	2249, 0, 0, 0, 0, 0, 203, 0, 0, 203,
	0, 203, 0, 203, 0, 203, 203, 0, 1140, 0,
	0, 0, 0, 0, 0, 0, 0, 2268, 659, 0,
	2141, 3078, 0, 0, 0, 0, 203, 0, 0, 0,
	0, 0, 0, 2412, 2413, 2414, 0, 1154, 0, 1154,
	2411, 2409, 2410, 2402, 2403, 2404, 2405, 2407, 2408, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 203, 203,
	0, 203, 0, 59, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 60, 79, 0, 0, 0, 0,
	0, 206, 46, 0, 203, 0, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 1520, 1520, 1520, 0,
	0, 0, 0, 0, 0, 49, 145, 82, 0, 83,
	3144, 47, 975, 0, 0, 122, 0, 0, 70, 0,
	0, 48, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 0, 975, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 559, 116, 0, 2994, 0, 0, 76, 0,
	0, 0, 119, 0, 0, 0, 0, 86, 0, 0,
	0, 77, 0, 0, 559, 793, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1154, 0, 0, 0, 0, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	0, 149, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 0, 0, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 88, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 148, 0,
	0, 4, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 974, 0,
	0, 0, 0, 0, 0, 0, 974, 974, 2400, 2401,
	974, 2418, 2419, 2420, 0, 493, 0, 0, 493, 0,
	0, 0, 0, 0, 0, 493, 0, 2670, 493, 493,
	0, 0, 0, 0, 1543, 79, 0, 0, 0, 0,
	0, 0, 0, 0, 1154, 788, 88, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 1154, 0,
	88, 0, 0, 0, 0, 0, 145, 82, 2415, 83,
	0, 0, 0, 0, 0, 203, 2141, 2509, 0, 0,
	0, 2141, 0, 0, 2509, 0, 0, 0, 176, 0,
	0, 2141, 2509, 2141, 2509, 2509, 0, 0, 0, 0,
	655, 0, 0, 116, 0, 203, 203, 0, 0, 0,
	0, 0, 0, 1560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 178, 0, 1140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2406, 0, 0, 0, 0, 0, 0, 2566, 0, 117,
	2568, 2571, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 203, 0, 0, 0, 0, 0, 177,
	0, 0, 203, 0, 0, 967, 0, 0, 1140, 170,
	0, 0, 768, 2141, 0, 493, 0, 171, 0, 0,
	0, 2421, 2141, 0, 0, 0, 0, 0, 0, 0,
	1451, 0, 0, 0, 0, 1388, 1389, 0, 148, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 1460, 0,
	0, 2416, 1466, 203, 1763, 0, 0, 1763, 0, 863,
	0, 1391, 0, 0, 0, 0, 0, 0, 0, 2645,
	0, 1140, 203, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 1855, 0, 1860, 0, 1390, 0, 0,
	203, 1867, 0, 0, 0, 1410, 0, 0, 1876, 1877,
	1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887,
	1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897,
	1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
	1908, 1909, 1910, 0, 1916, 0, 1918, 1919, 1920, 1921,
	2417, 2664, 0, 0, 0, 0, 2701, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1945, 1413, 1414, 1415,
	1416, 0, 0, 0, 0, 0, 0, 1396, 0, 0,
	0, 1461, 0, 0, 0, 1970, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 1541, 0, 1544, 0, 0,
	0, 1035, 0, 0, 1136, 0, 1035, 1418, 1419, 1420,
	0, 0, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 0,
	0, 0, 0, 0, 0, 2027, 0, 2038, 2040, 2045,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 974, 0, 0, 0, 0, 0, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 1136, 1136, 1411, 493,
	2412, 2413, 2414, 0, 0, 0, 0, 2411, 2409, 2410,
	2402, 2403, 2404, 2405, 2407, 2408, 0, 0, 0, 0,
	0, 0, 0, 1154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1136, 1136, 0, 0, 0, 1136, 0, 0, 1136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 542, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1412, 0, 0,
	0, 0, 0, 1136, 0, 0, 0, 0, 0, 2836,
	203, 203, 0, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1388, 1389, 0, 0, 2141, 974, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2268,
	2268, 0, 0, 0, 0, 659, 659, 2141, 1391, 0,
	1763, 1763, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2198,
	0, 2200, 0, 0, 1390, 0, 0, 0, 0, 0,
	0, 0, 1410, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1401, 1399, 1400, 1392, 1393, 1394,
	1395, 1397, 1398, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2914, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2659, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 788, 0, 1413, 1414, 1415, 1416, 0, 0,
	0, 0, 0, 0, 1396, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 974,
	0, 0, 0, 0, 1154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1418, 1419, 1420, 0, 0, 1543,
	0, 0, 0, 0, 1029, 0, 0, 0, 0, 0,
	0, 1147, 0, 2141, 2509, 2141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1154, 0, 0, 0, 0,
	0, 2141, 0, 2509, 0, 0, 1154, 1154, 203, 2141,
	2509, 0, 0, 0, 0, 1411, 0, 203, 203, 0,
	0, 0, 768, 0, 0, 768, 768, 0, 0, 1036,
	0, 0, 1137, 0, 1036, 0, 0, 2319, 2320, 3008,
	0, 0, 0, 2326, 1035, 0, 0, 1229, 0, 0,
	0, 0, 1136, 559, 0, 2141, 0, 0, 559, 0,
	0, 0, 2340, 2341, 0, 0, 0, 0, 1970, 1253,
	1253, 1253, 1147, 0, 0, 0, 1154, 2348, 0, 0,
	1934, 0, 0, 1284, 1137, 1137, 1417, 1035, 0, 0,
	0, 0, 0, 0, 788, 0, 0, 0, 0, 0,
	0, 0, 0, 2368, 1412, 0, 0, 1460, 0, 0,
	0, 1460, 0, 0, 0, 2381, 0, 0, 0, 0,
	0, 0, 0, 0, 1388, 1389, 0, 0, 1137, 1137,
	0, 0, 0, 1137, 0, 0, 1137, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1344, 0, 2141,
	1391, 2509, 0, 0, 3072, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 0, 2045, 2045, 2045,
	0, 962, 0, 0, 0, 0, 1390, 0, 1520, 0,
	0, 1137, 0, 0, 1410, 542, 2450, 0, 1544, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2571, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 0, 88,
	1136, 0, 0, 0, 1154, 0, 0, 1035, 0, 0,
	0, 1401, 1399, 1400, 1392, 1393, 1394, 1395, 1397, 1398,
	2658, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	0, 793, 0, 0, 0, 0, 1413, 1414, 1415, 1416,
	0, 1388, 1389, 793, 2701, 0, 1396, 0, 0, 0,
	493, 0, 0, 0, 0, 0, 0, 0, 3072, 0,
	0, 0, 0, 0, 0, 0, 0, 1391, 2531, 0,
	0, 0, 0, 0, 0, 0, 1418, 1419, 1420, 0,
	0, 0, 0, 0, 0, 2141, 2509, 0, 0, 0,
	0, 0, 0, 1390, 0, 0, 0, 0, 0, 0,
	0, 1410, 203, 0, 0, 0, 0, 0, 2509, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	1154, 0, 1154, 0, 0, 0, 0, 1411, 0, 0,
	0, 0, 1136, 0, 1136, 0, 0, 0, 0, 1136,
	0, 88, 3211, 0, 0, 0, 0, 2325, 1154, 203,
	0, 2599, 0, 1136, 1136, 0, 88, 0, 88, 0,
	203, 0, 0, 1413, 1414, 1415, 1416, 559, 0, 0,
	0, 0, 0, 1396, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1550, 0, 0, 0, 0, 0,
	2701, 0, 0, 0, 0, 0, 0, 0, 1417, 1558,
	88, 0, 88, 1418, 1419, 1420, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1412, 0, 0, 0,
	0, 0, 0, 2652, 2141, 0, 0, 1867, 0, 88,
	0, 0, 0, 2656, 2657, 0, 0, 2660, 0, 0,
	0, 2663, 1035, 3072, 0, 0, 0, 0, 0, 0,
	2667, 0, 1036, 0, 1411, 0, 0, 0, 0, 2674,
	1137, 0, 2450, 0, 1388, 1389, 1154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2694, 0, 0, 0, 0, 0, 0,
	1391, 0, 0, 0, 0, 1036, 0, 0, 0, 0,
	2708, 2709, 0, 2710, 2711, 2712, 0, 0, 2713, 0,
	0, 0, 0, 0, 2715, 0, 1390, 0, 0, 0,
	0, 0, 0, 0, 1410, 1417, 0, 1035, 0, 0,
	0, 0, 0, 1401, 1399, 1400, 1392, 1393, 1394, 1395,
	1397, 1398, 0, 1412, 0, 2743, 2744, 1934, 0, 1388,
	1389, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1460, 0,
	2318, 2760, 0, 0, 0, 1391, 0, 2400, 2401, 0,
	2418, 2419, 2420, 0, 0, 0, 1413, 1414, 1415, 1416,
	1035, 0, 0, 0, 0, 0, 1396, 0, 0, 0,
	0, 1390, 0, 0, 0, 0, 1035, 0, 0, 1410,
	1739, 0, 0, 0, 0, 0, 0, 1750, 1137, 2400,
	2401, 0, 2418, 2419, 2420, 1036, 1418, 1419, 1420, 0,
	0, 0, 0, 2795, 2798, 0, 1229, 2415, 1769, 0,
	1769, 2400, 2401, 0, 2418, 2419, 2420, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2817, 0, 0, 0,
	1401, 1399, 1400, 1392, 1393, 1394, 1395, 1397, 1398, 0,
	0, 1413, 1414, 1415, 1416, 0, 0, 1411, 0, 2415,
	0, 1396, 0, 0, 0, 962, 0, 0, 0, 0,
	0, 0, 0, 962, 962, 0, 0, 962, 0, 0,
	0, 2415, 0, 0, 0, 0, 0, 0, 1809, 2406,
	0, 1418, 1419, 1420, 0, 0, 1035, 0, 1520, 0,
	0, 0, 0, 0, 0, 0, 1820, 0, 0, 2865,
	0, 0, 1826, 0, 1827, 0, 1828, 0, 1829, 0,
	1830, 0, 0, 0, 0, 0, 0, 0, 1417, 0,
	1137, 2406, 1137, 0, 0, 1136, 0, 1137, 0, 0,
	2421, 1840, 1411, 0, 0, 0, 1412, 0, 1035, 0,
	0, 1137, 1137, 2406, 2892, 2893, 0, 0, 2422, 0,
	2897, 2898, 0, 59, 0, 2901, 2902, 88, 0, 88,
	2416, 0, 2906, 0, 60, 0, 2400, 2401, 0, 2418,
	2419, 2420, 2421, 0, 0, 0, 0, 0, 64, 0,
	0, 2911, 0, 0, 0, 2669, 0, 88, 2915, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2416, 1417, 0, 0, 0, 0, 70, 0,
	0, 0, 0, 0, 0, 0, 1136, 1136, 1136, 0,
	1136, 1412, 0, 0, 2416, 0, 2415, 0, 0, 0,
	1036, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	788, 0, 0, 0, 0, 0, 0, 86, 0, 2417,
	0, 77, 0, 1401, 1399, 1400, 1392, 1393, 1394, 1395,
	1397, 1398, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2798, 0, 0, 0, 78,
	0, 2417, 0, 0, 0, 0, 0, 0, 2406, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2417, 0, 1036, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2088, 1401, 1399,
	1400, 1392, 1393, 1394, 1395, 1397, 1398, 0, 0, 2421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2412,
	2413, 2414, 0, 0, 2798, 0, 2411, 2409, 2410, 2402,
	2403, 2404, 2405, 2407, 2408, 0, 0, 0, 1036, 2416,
	3042, 3043, 3044, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1036, 79, 0, 0, 0, 0,
	0, 2412, 2413, 2414, 0, 0, 3052, 3053, 2411, 2409,
	2410, 2402, 2403, 2404, 2405, 2407, 2408, 0, 0, 0,
	3060, 0, 0, 2412, 2413, 2414, 145, 82, 0, 83,
	2411, 2409, 2410, 2402, 2403, 2404, 2405, 2407, 2408, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 2798, 962, 0,
	655, 0, 0, 116, 0, 3094, 0, 0, 2417, 0,
	0, 0, 0, 0, 0, 0, 1035, 793, 0, 0,
	0, 0, 0, 0, 3106, 0, 178, 0, 88, 0,
	0, 0, 0, 2798, 0, 0, 2798, 0, 0, 0,
	0, 1147, 0, 0, 1036, 0, 0, 1035, 0, 117,
	0, 0, 0, 0, 0, 0, 1035, 2798, 2798, 0,
	0, 149, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 2214, 0, 0, 0, 1750, 0, 0, 0, 170,
	0, 0, 0, 1137, 0, 0, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 1036, 0, 0, 0,
	0, 0, 0, 3155, 0, 0, 3158, 2251, 1280, 0,
	1253, 642, 1253, 0, 1253, 0, 1147, 1147, 2412, 2413,
	2414, 0, 0, 0, 0, 2411, 2409, 2410, 2402, 2403,
	2404, 2405, 2407, 2408, 624, 0, 0, 2287, 0, 0,
	0, 0, 0, 1136, 0, 0, 0, 0, 0, 0,
	0, 1035, 0, 0, 962, 0, 0, 0, 0, 1035,
	0, 0, 0, 0, 625, 0, 0, 0, 2300, 1147,
	2302, 0, 0, 626, 1137, 1137, 1137, 0, 1137, 1136,
	0, 0, 1136, 1136, 1136, 0, 0, 0, 627, 0,
	0, 0, 0, 0, 0, 2316, 0, 0, 793, 0,
	0, 0, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 628,
	0, 0, 0, 0, 0, 0, 3253, 3253, 3253, 0,
	0, 0, 1136, 1136, 0, 0, 629, 0, 0, 0,
	0, 0, 0, 0, 0, 3272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 630, 1035, 0, 631,
	1035, 2798, 0, 2798, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3253, 0, 0, 0,
	0, 0, 0, 0, 0, 646, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 962, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1035, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1035, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 633, 0, 0, 88, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 650, 634,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 649, 0, 0, 0,
	0, 0, 0, 635, 0, 0, 636, 0, 0, 0,
	0, 0, 644, 0, 1036, 0, 0, 0, 0, 637,
	0, 0, 1035, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2506, 0, 0, 0,
	0, 0, 0, 0, 0, 1036, 0, 0, 638, 645,
	0, 0, 0, 0, 1036, 0, 0, 0, 639, 0,
	0, 0, 0, 0, 0, 0, 2543, 2214, 0, 641,
	0, 0, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 643, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1388, 1389, 0, 1421, 1422, 1423, 1431, 1432, 1433,
	0, 0, 0, 0, 2581, 0, 0, 0, 0, 0,
	1424, 1035, 0, 2588, 0, 0, 1136, 1391, 0, 0,
	1437, 1137, 0, 0, 0, 0, 0, 1934, 0, 1036,
	0, 0, 0, 0, 0, 0, 0, 1036, 0, 0,
	0, 0, 0, 1390, 0, 0, 0, 0, 1136, 1136,
	1136, 1410, 0, 0, 0, 0, 0, 1137, 1407, 0,
	1137, 1137, 1137, 0, 2633, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1035, 0, 0,
	0, 0, 0, 2648, 0, 1147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2654, 0, 0, 0, 0, 0, 0, 0, 0,
	1137, 1137, 0, 1413, 1414, 1415, 1416, 0, 0, 0,
	0, 0, 0, 1396, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1036, 0, 0, 1036, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1428,
	1438, 0, 0, 1418, 1419, 1420, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 1435, 0, 0, 0, 0,
	0, 88, 1405, 1406, 0, 0, 0, 0, 0, 0,
	0, 1035, 0, 1035, 0, 0, 0, 1426, 1036, 0,
	0, 0, 0, 0, 1411, 0, 0, 0, 0, 1036,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1136, 0, 1035, 0,
	1136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1035,
	0, 0, 1136, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1412, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1035, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1429, 0,
	1036, 0, 1388, 1389, 0, 1421, 1422, 1423, 1431, 1432,
	1433, 0, 0, 0, 1035, 0, 0, 0, 0, 0,
	0, 1424, 0, 0, 0, 0, 0, 0, 1391, 0,
	0, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2837, 0, 0, 2840, 0, 0, 0, 0, 0,
	1035, 0, 0, 0, 1390, 0, 2846, 0, 0, 0,
	1035, 0, 1410, 0, 0, 0, 0, 0, 0, 1407,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 0, 0, 1402, 1403, 1409, 1408, 1404, 1430, 0,
	1401, 1399, 1400, 1392, 1393, 1394, 1395, 1397, 1398, 0,
	0, 0, 0, 2922, 0, 0, 0, 2921, 2883, 1036,
	0, 0, 0, 0, 1137, 0, 1136, 0, 0, 0,
	0, 0, 0, 0, 1413, 1414, 1415, 1416, 0, 0,
	0, 0, 0, 0, 1396, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1137, 1137, 1137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1597, 0,
	1428, 1438, 0, 0, 1418, 1419, 1420, 0, 0, 0,
	0, 0, 0, 0, 0, 1036, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 1435, 0, 0, 0,
	0, 0, 0, 1405, 1406, 1609, 1591, 1598, 1581, 1619,
	1618, 0, 0, 1583, 1582, 0, 0, 0, 1426, 0,
	0, 1629, 1630, 0, 0, 1411, 0, 0, 0, 0,
	1136, 0, 0, 0, 0, 0, 0, 0, 0, 1136,
	1136, 0, 1436, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 1620, 0, 1616, 1615, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1614, 0, 0, 1035, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2986,
	0, 0, 0, 0, 0, 0, 1417, 0, 2214, 1036,
	0, 1036, 0, 0, 1613, 1611, 1612, 0, 0, 0,
	0, 0, 0, 0, 1412, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1593, 0, 0, 1429,
	0, 0, 0, 0, 0, 0, 0, 1602, 1596, 1604,
	1606, 1607, 1608, 1603, 1137, 1601, 1036, 0, 1137, 0,
	0, 0, 0, 0, 1625, 1626, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1036, 0, 0,
	1137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1617, 0,
	0, 0, 1594, 0, 1595, 0, 1036, 0, 0, 0,
	0, 1427, 0, 0, 1402, 1403, 1409, 1408, 1404, 1430,
	0, 1401, 1399, 1400, 1392, 1393, 1394, 1395, 1397, 1398,
	0, 0, 1036, 3079, 2386, 0, 0, 0, 2387, 0,
	1610, 0, 0, 0, 1578, 1576, 1577, 1580, 1579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1036, 0,
	0, 0, 0, 0, 0, 3115, 0, 0, 1036, 1586,
	1587, 1589, 1590, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1605, 1588, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1628, 3138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1584, 0, 1621, 1622, 1623, 1624, 0,
	0, 0, 0, 0, 1137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1592, 0, 0, 0, 0, 1599, 1627,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3217, 0, 0, 0, 0, 0, 0, 0, 1137, 0,
	0, 3230, 0, 0, 0, 0, 0, 1137, 1137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1033, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1036, 207, 208, 209,
	210, 211, 1039, 212, 1040, 1041, 1042, 1043, 445, 1044,
	1045, 1046, 1047, 213, 214, 215, 446, 447, 216, 448,
	217, 218, 449, 1048, 219, 220, 221, 222, 223, 224,
	1049, 1050, 225, 450, 451, 452, 1051, 226, 453, 1052,
	1038, 1053, 227, 228, 229, 230, 231, 0, 233, 234,
	235, 232, 1054, 236, 0, 237, 238, 239, 1055, 912,
	240, 241, 1056, 1057, 1059, 1058, 1060, 1061, 1062, 242,
	243, 244, 245, 246, 247, 454, 455, 1063, 248, 1064,
	250, 249, 1065, 251, 1066, 1067, 252, 253, 254, 1068,
	255, 1069, 256, 257, 1070, 456, 258, 259, 261, 264,
	260, 265, 266, 267, 457, 458, 1071, 913, 1072, 0,
	0, 0, 0, 268, 269, 270, 459, 271, 272, 0,
	273, 1073, 274, 1074, 1075, 914, 275, 276, 1076, 277,
	460, 1077, 461, 278, 1078, 279, 280, 281, 282, 283,
	284, 285, 462, 463, 464, 916, 1079, 468, 287, 0,
	0, 0, 1080, 286, 288, 295, 1081, 915, 289, 465,
	291, 290, 292, 293, 294, 466, 1082, 467, 1083, 296,
	917, 918, 297, 298, 299, 919, 300, 301, 0, 0,
	302, 303, 304, 305, 1084, 307, 306, 1085, 308, 469,
	920, 309, 310, 921, 1086, 311, 312, 1087, 1088, 313,
	0, 314, 315, 978, 977, 316, 317, 319, 320, 318,
	922, 321, 322, 324, 323, 1089, 1090, 923, 1091, 470,
	471, 325, 326, 1092, 327, 328, 329, 1093, 1094, 331,
	332, 1095, 1096, 333, 472, 924, 334, 925, 473, 335,
	330, 336, 337, 338, 339, 340, 341, 1097, 342, 474,
	343, 475, 344, 1098, 345, 0, 346, 347, 348, 349,
	350, 351, 476, 352, 353, 1099, 354, 355, 356, 357,
	358, 0, 360, 361, 362, 359, 363, 364, 365, 366,
	1100, 367, 926, 368, 369, 370, 371, 477, 372, 0,
	373, 377, 378, 379, 380, 381, 382, 383, 1101, 390,
	391, 384, 386, 387, 388, 385, 389, 392, 393, 1102,
	394, 374, 375, 395, 927, 396, 478, 397, 398, 1103,
	408, 399, 400, 401, 376, 402, 406, 407, 403, 404,
	405, 479, 1104, 410, 411, 409, 1105, 412, 413, 414,
	415, 416, 262, 417, 263, 418, 1106, 480, 481, 482,
	419, 1107, 1108, 420, 421, 483, 422, 484, 1109, 423,
	424, 425, 0, 426, 427, 1110, 1111, 428, 429, 430,
	431, 433, 1112, 434, 1113, 432, 435, 436, 437, 485,
	486, 487, 1114, 439, 438, 488, 1115, 1116, 1117, 1118,
	440, 441, 489, 442, 443, 444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1033,
	0, 0, 0, 0, 0, 0, 2075, 0, 0, 0,
	0, 0, 0, 0, 0, 2076, 207, 208, 209, 210,
	211, 1039, 212, 1040, 1041, 1042, 1043, 445, 1044, 1045,
	1046, 1047, 213, 214, 215, 446, 447, 216, 448, 217,
	218, 449, 1048, 219, 220, 221, 222, 223, 224, 1049,
	1050, 225, 450, 451, 452, 1051, 226, 453, 1052, 1038,
	1053, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 1054, 236, 0, 237, 238, 239, 1055, 912, 240,
	241, 1056, 1057, 1059, 1058, 1060, 1061, 1062, 242, 243,
	244, 245, 246, 247, 454, 455, 1063, 248, 1064, 250,
	249, 1065, 251, 1066, 1067, 252, 253, 254, 1068, 255,
	1069, 256, 257, 1070, 456, 258, 259, 261, 264, 260,
	265, 266, 267, 457, 458, 1071, 913, 1072, 0, 0,
	0, 0, 268, 269, 270, 459, 271, 272, 0, 273,
	1073, 274, 1074, 1075, 914, 275, 276, 1076, 277, 460,
	1077, 461, 278, 1078, 279, 280, 281, 282, 283, 284,
	285, 462, 463, 464, 916, 1079, 468, 287, 0, 0,
	0, 1080, 286, 288, 295, 1081, 915, 289, 465, 291,
	290, 292, 293, 294, 466, 1082, 467, 1083, 296, 917,
	918, 297, 298, 299, 919, 300, 301, 0, 0, 302,
	303, 304, 305, 1084, 307, 306, 1085, 308, 469, 920,
	309, 310, 921, 1086, 311, 312, 1087, 1088, 313, 0,
	314, 315, 978, 977, 316, 317, 319, 320, 318, 922,
	321, 322, 324, 323, 1089, 1090, 923, 1091, 470, 471,
	325, 326, 1092, 327, 328, 329, 1093, 1094, 331, 332,
	1095, 1096, 333, 472, 924, 334, 925, 473, 335, 330,
	336, 337, 338, 339, 340, 341, 1097, 342, 474, 343,
	475, 344, 1098, 345, 0, 346, 347, 348, 349, 350,
	351, 476, 352, 353, 1099, 354, 355, 356, 357, 358,
	0, 360, 361, 362, 359, 363, 364, 365, 366, 1100,
	367, 926, 368, 369, 370, 371, 477, 372, 0, 373,
	377, 378, 379, 380, 381, 382, 383, 1101, 390, 391,
	384, 386, 387, 388, 385, 389, 392, 393, 1102, 394,
	374, 375, 395, 927, 396, 478, 397, 398, 1103, 408,
	399, 400, 401, 376, 402, 406, 407, 403, 404, 405,
	479, 1104, 410, 411, 409, 1105, 412, 413, 414, 415,
	416, 262, 417, 263, 418, 1106, 480, 481, 482, 419,
	1107, 1108, 420, 421, 483, 422, 484, 1109, 423, 424,
	425, 0, 426, 427, 1110, 1111, 428, 429, 430, 431,
	433, 1112, 434, 1113, 432, 435, 436, 437, 485, 486,
	487, 1114, 439, 438, 488, 1115, 1116, 1117, 1118, 440,
	441, 489, 442, 443, 444, 0, 0, 0, 0, 1033,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2944, 207, 208, 209, 210,
	211, 1039, 212, 1040, 1041, 1042, 1043, 445, 1044, 1045,
	1046, 1047, 213, 214, 215, 446, 447, 216, 448, 217,
	218, 449, 1048, 219, 220, 221, 222, 223, 224, 1049,
	1050, 225, 450, 451, 452, 1051, 226, 453, 1052, 1038,
	1053, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 1054, 236, 0, 237, 238, 239, 1055, 912, 240,
	241, 1056, 1057, 1059, 1058, 1060, 1061, 1062, 242, 243,
	244, 245, 246, 247, 454, 455, 1063, 248, 1064, 250,
	249, 1065, 251, 1066, 1067, 252, 253, 254, 1068, 255,
	1069, 256, 257, 1070, 456, 258, 259, 261, 264, 260,
	265, 266, 267, 457, 458, 1071, 913, 1072, 0, 0,
	0, 0, 268, 269, 270, 459, 271, 272, 0, 273,
	1073, 274, 1074, 1075, 914, 275, 276, 1076, 277, 460,
	1077, 461, 278, 1078, 279, 280, 281, 282, 283, 284,
	285, 462, 463, 464, 916, 1079, 468, 287, 0, 0,
	0, 1080, 286, 288, 295, 1081, 915, 289, 465, 291,
	290, 292, 293, 294, 466, 1082, 467, 1083, 296, 917,
	918, 297, 298, 299, 919, 300, 301, 0, 0, 302,
	303, 304, 305, 1084, 307, 306, 1085, 308, 469, 920,
	309, 310, 921, 1086, 311, 312, 1087, 1088, 313, 0,
	314, 315, 978, 977, 316, 317, 319, 320, 318, 922,
	321, 322, 324, 323, 1089, 1090, 923, 1091, 470, 471,
	325, 326, 1092, 327, 328, 329, 1093, 1094, 331, 332,
	1095, 1096, 333, 472, 924, 334, 925, 473, 335, 330,
	336, 337, 338, 339, 340, 341, 1097, 342, 474, 343,
	475, 344, 1098, 345, 0, 346, 347, 348, 349, 350,
	351, 476, 352, 353, 1099, 354, 355, 356, 357, 358,
	0, 360, 361, 362, 359, 363, 364, 365, 366, 1100,
	367, 926, 368, 369, 370, 371, 477, 372, 0, 373,
	377, 378, 379, 380, 381, 382, 383, 1101, 390, 391,
	384, 386, 387, 388, 385, 389, 392, 393, 1102, 394,
	374, 375, 395, 927, 396, 478, 397, 398, 1103, 408,
	399, 400, 401, 376, 402, 406, 407, 403, 404, 405,
	479, 1104, 410, 411, 409, 1105, 412, 413, 414, 415,
	416, 262, 417, 263, 418, 1106, 480, 481, 482, 419,
	1107, 1108, 420, 421, 483, 422, 484, 1109, 423, 424,
	425, 0, 426, 427, 1110, 1111, 428, 429, 430, 431,
	433, 1112, 434, 1113, 432, 435, 436, 437, 485, 486,
	487, 1114, 439, 438, 488, 1115, 1116, 1117, 1118, 440,
	441, 489, 442, 443, 444, 1033, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3048, 0, 207, 208, 209, 210, 211, 1039, 212, 1040,
	1041, 1042, 1043, 445, 1044, 1045, 1046, 1047, 213, 214,
	215, 446, 447, 216, 448, 217, 218, 449, 1048, 219,
	220, 221, 222, 223, 224, 1049, 1050, 225, 450, 451,
	452, 1051, 226, 453, 1052, 1038, 1053, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 1054, 236, 0,
	237, 238, 239, 1055, 912, 240, 241, 1056, 1057, 1059,
	1058, 1060, 1061, 1062, 242, 243, 244, 245, 246, 247,
	454, 455, 1063, 248, 1064, 250, 249, 1065, 251, 1066,
	1067, 252, 253, 254, 1068, 255, 1069, 256, 257, 1070,
	456, 258, 259, 261, 264, 260, 265, 266, 267, 457,
	458, 1071, 913, 1072, 0, 0, 0, 0, 268, 269,
	270, 459, 271, 272, 0, 273, 1073, 274, 1074, 1075,
	914, 275, 276, 1076, 277, 460, 1077, 461, 278, 1078,
	279, 280, 281, 282, 283, 284, 285, 462, 463, 464,
	916, 1079, 468, 287, 0, 0, 0, 1080, 286, 288,
	295, 1081, 915, 289, 465, 291, 290, 292, 293, 294,
	466, 1082, 467, 1083, 296, 917, 918, 297, 298, 299,
	919, 300, 301, 0, 0, 302, 303, 304, 305, 1084,
	307, 306, 1085, 308, 469, 920, 309, 310, 921, 1086,
	311, 312, 1087, 1088, 313, 0, 314, 315, 978, 977,
	316, 317, 319, 320, 318, 922, 321, 322, 324, 323,
	1089, 1090, 923, 1091, 470, 471, 325, 326, 1092, 327,
	328, 329, 1093, 1094, 331, 332, 1095, 1096, 333, 472,
	924, 334, 925, 473, 335, 330, 336, 337, 338, 339,
	340, 341, 1097, 342, 474, 343, 475, 344, 1098, 345,
	0, 346, 347, 348, 349, 350, 351, 476, 352, 353,
	1099, 354, 355, 356, 357, 358, 0, 360, 361, 362,
	359, 363, 364, 365, 366, 1100, 367, 926, 368, 369,
	370, 371, 477, 372, 0, 373, 377, 378, 379, 380,
	381, 382, 383, 1101, 390, 391, 384, 386, 387, 388,
	385, 389, 392, 393, 1102, 394, 374, 375, 395, 927,
	396, 478, 397, 398, 1103, 408, 399, 400, 401, 376,
	402, 406, 407, 403, 404, 405, 479, 1104, 410, 411,
	409, 1105, 412, 413, 414, 415, 416, 262, 417, 263,
	418, 1106, 480, 481, 482, 419, 1107, 1108, 420, 421,
	483, 422, 484, 1109, 423, 424, 425, 0, 426, 427,
	1110, 1111, 428, 429, 430, 431, 433, 1112, 434, 1113,
	432, 435, 436, 437, 485, 486, 487, 1114, 439, 438,
	488, 1115, 1116, 1117, 1118, 440, 441, 489, 442, 443,
	444, 1033, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2697, 0, 207, 208,
	209, 210, 211, 1039, 212, 1040, 1041, 1042, 1043, 445,
	1044, 1045, 1046, 1047, 213, 214, 215, 446, 447, 216,
	448, 217, 218, 449, 1048, 219, 220, 221, 222, 223,
	224, 1049, 1050, 225, 450, 451, 452, 1051, 226, 453,
	1052, 1038, 1053, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 1054, 236, 0, 237, 238, 239, 1055,
	912, 240, 241, 1056, 1057, 1059, 1058, 1060, 1061, 1062,
	242, 243, 244, 245, 246, 247, 454, 455, 1063, 248,
	1064, 250, 249, 1065, 251, 1066, 1067, 252, 253, 254,
	1068, 255, 1069, 256, 257, 1070, 456, 258, 259, 261,
	264, 260, 265, 266, 267, 457, 458, 1071, 913, 1072,
	0, 0, 0, 0, 268, 269, 270, 459, 271, 272,
	0, 273, 1073, 274, 1074, 1075, 914, 275, 276, 1076,
	277, 460, 1077, 461, 278, 1078, 279, 280, 281, 282,
	283, 284, 285, 462, 463, 464, 916, 1079, 468, 287,
	0, 0, 0, 1080, 286, 288, 295, 1081, 915, 289,
	465, 291, 290, 292, 293, 294, 466, 1082, 467, 1083,
	296, 917, 918, 297, 298, 299, 919, 300, 301, 0,
	0, 302, 303, 304, 305, 1084, 307, 306, 1085, 308,
	469, 920, 309, 310, 921, 1086, 311, 312, 1087, 1088,
	313, 0, 314, 315, 978, 977, 316, 317, 319, 320,
	318, 922, 321, 322, 324, 323, 1089, 1090, 923, 1091,
	470, 471, 325, 326, 1092, 327, 328, 329, 1093, 1094,
	331, 332, 1095, 1096, 333, 472, 924, 334, 925, 473,
	335, 330, 336, 337, 338, 339, 340, 341, 1097, 342,
	474, 343, 475, 344, 1098, 345, 0, 346, 347, 348,
	349, 350, 351, 476, 352, 353, 1099, 354, 355, 356,
	357, 358, 0, 360, 361, 362, 359, 363, 364, 365,
	366, 1100, 367, 926, 368, 369, 370, 371, 477, 372,
	0, 373, 377, 378, 379, 380, 381, 382, 383, 1101,
	390, 391, 384, 386, 387, 388, 385, 389, 392, 393,
	1102, 394, 374, 375, 395, 927, 396, 478, 397, 398,
	1103, 408, 399, 400, 401, 376, 402, 406, 407, 403,
	404, 405, 479, 1104, 410, 411, 409, 1105, 412, 413,
	414, 415, 416, 262, 417, 263, 418, 1106, 480, 481,
	482, 419, 1107, 1108, 420, 421, 483, 422, 484, 1109,
	423, 424, 425, 0, 426, 427, 1110, 1111, 428, 429,
	430, 431, 433, 1112, 434, 1113, 432, 435, 436, 437,
	485, 486, 487, 1114, 439, 438, 488, 1115, 1116, 1117,
	1118, 440, 441, 489, 442, 443, 444, 1033, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2689, 0, 207, 208, 209, 210, 211, 1039,
	212, 1040, 1041, 1042, 1043, 445, 1044, 1045, 1046, 1047,
	213, 214, 215, 446, 447, 216, 448, 217, 218, 449,
	1048, 219, 220, 221, 222, 223, 224, 1049, 1050, 225,
	450, 451, 452, 1051, 226, 453, 1052, 1038, 1053, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 1054,
	236, 0, 237, 238, 239, 1055, 912, 240, 241, 1056,
	1057, 1059, 1058, 1060, 1061, 1062, 242, 243, 244, 245,
	246, 247, 454, 455, 1063, 248, 1064, 250, 249, 1065,
	251, 1066, 1067, 252, 253, 254, 1068, 255, 1069, 256,
	257, 1070, 456, 258, 259, 261, 264, 260, 265, 266,
	267, 457, 458, 1071, 913, 1072, 0, 0, 0, 0,
	268, 269, 270, 459, 271, 272, 0, 273, 1073, 274,
	1074, 1075, 914, 275, 276, 1076, 277, 460, 1077, 461,
	278, 1078, 279, 280, 281, 282, 283, 284, 285, 462,
	463, 464, 916, 1079, 468, 287, 0, 0, 0, 1080,
	286, 288, 295, 1081, 915, 289, 465, 291, 290, 292,
	293, 294, 466, 1082, 467, 1083, 296, 917, 918, 297,
	298, 299, 919, 300, 301, 0, 0, 302, 303, 304,
	305, 1084, 307, 306, 1085, 308, 469, 920, 309, 310,
	921, 1086, 311, 312, 1087, 1088, 313, 0, 314, 315,
	978, 977, 316, 317, 319, 320, 318, 922, 321, 322,
	324, 323, 1089, 1090, 923, 1091, 470, 471, 325, 326,
	1092, 327, 328, 329, 1093, 1094, 331, 332, 1095, 1096,
	333, 472, 924, 334, 925, 473, 335, 330, 336, 337,
	338, 339, 340, 341, 1097, 342, 474, 343, 475, 344,
	1098, 345, 0, 346, 347, 348, 349, 350, 351, 476,
	352, 353, 1099, 354, 355, 356, 357, 358, 0, 360,
	361, 362, 359, 363, 364, 365, 366, 1100, 367, 926,
	368, 369, 370, 371, 477, 372, 0, 373, 377, 378,
	379, 380, 381, 382, 383, 1101, 390, 391, 384, 386,
	387, 388, 385, 389, 392, 393, 1102, 394, 374, 375,
	395, 927, 396, 478, 397, 398, 1103, 408, 399, 400,
	401, 376, 402, 406, 407, 403, 404, 405, 479, 1104,
	410, 411, 409, 1105, 412, 413, 414, 415, 416, 262,
	417, 263, 418, 1106, 480, 481, 482, 419, 1107, 1108,
	420, 421, 483, 422, 484, 1109, 423, 424, 425, 0,
	426, 427, 1110, 1111, 428, 429, 430, 431, 433, 1112,
	434, 1113, 432, 435, 436, 437, 485, 486, 487, 1114,
	439, 438, 488, 1115, 1116, 1117, 1118, 440, 441, 489,
	442, 443, 444, 1033, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2565, 0,
	207, 208, 209, 210, 211, 1039, 212, 1040, 1041, 1042,
	1043, 445, 1044, 1045, 1046, 1047, 213, 214, 215, 446,
	447, 216, 448, 217, 218, 449, 1048, 219, 220, 221,
	222, 223, 224, 1049, 1050, 225, 450, 451, 452, 1051,
	226, 453, 1052, 1038, 1053, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 1054, 236, 0, 237, 238,
	239, 1055, 912, 240, 241, 1056, 1057, 1059, 1058, 1060,
	1061, 1062, 242, 243, 244, 245, 246, 247, 454, 455,
	1063, 248, 1064, 250, 249, 1065, 251, 1066, 1067, 252,
	253, 254, 1068, 255, 1069, 256, 257, 1070, 456, 258,
	259, 261, 264, 260, 265, 266, 267, 457, 458, 1071,
	913, 1072, 0, 0, 0, 0, 268, 269, 270, 459,
	271, 272, 0, 273, 1073, 274, 1074, 1075, 914, 275,
	276, 1076, 277, 460, 1077, 461, 278, 1078, 279, 280,
	281, 282, 283, 284, 285, 462, 463, 464, 916, 1079,
	468, 287, 0, 0, 0, 1080, 286, 288, 295, 1081,
	915, 289, 465, 291, 290, 292, 293, 294, 466, 1082,
	467, 1083, 296, 917, 918, 297, 298, 299, 919, 300,
	301, 0, 0, 302, 303, 304, 305, 1084, 307, 306,
	1085, 308, 469, 920, 309, 310, 921, 1086, 311, 312,
	1087, 1088, 313, 0, 314, 315, 978, 977, 316, 317,
	319, 320, 318, 922, 321, 322, 324, 323, 1089, 1090,
	923, 1091, 470, 471, 325, 326, 1092, 327, 328, 329,
	1093, 1094, 331, 332, 1095, 1096, 333, 472, 924, 334,
	925, 473, 335, 330, 336, 337, 338, 339, 340, 341,
	1097, 342, 474, 343, 475, 344, 1098, 345, 0, 346,
	347, 348, 349, 350, 351, 476, 352, 353, 1099, 354,
	355, 356, 357, 358, 0, 360, 361, 362, 359, 363,
	364, 365, 366, 1100, 367, 926, 368, 369, 370, 371,
	477, 372, 0, 373, 377, 378, 379, 380, 381, 382,
	383, 1101, 390, 391, 384, 386, 387, 388, 385, 389,
	392, 393, 1102, 394, 374, 375, 395, 927, 396, 478,
	397, 398, 1103, 408, 399, 400, 401, 376, 402, 406,
	407, 403, 404, 405, 479, 1104, 410, 411, 409, 1105,
	412, 413, 414, 415, 416, 262, 417, 263, 418, 1106,
	480, 481, 482, 419, 1107, 1108, 420, 421, 483, 422,
	484, 1109, 423, 424, 425, 0, 426, 427, 1110, 1111,
	428, 429, 430, 431, 433, 1112, 434, 1113, 432, 435,
	436, 437, 485, 486, 487, 1114, 439, 438, 488, 1115,
	1116, 1117, 1118, 440, 441, 489, 442, 443, 444, 1033,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1979, 0, 207, 208, 209, 210,
	211, 1039, 212, 1040, 1041, 1042, 1043, 445, 1044, 1045,
	1046, 1047, 213, 214, 215, 446, 447, 216, 448, 217,
	218, 449, 1048, 219, 220, 221, 222, 223, 224, 1049,
	1050, 225, 450, 451, 452, 1051, 226, 453, 1052, 1038,
	1053, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 1054, 236, 0, 237, 238, 239, 1055, 912, 240,
	241, 1056, 1057, 1059, 1058, 1060, 1061, 1062, 242, 243,
	244, 245, 246, 247, 454, 455, 1063, 248, 1064, 250,
	249, 1065, 251, 1066, 1067, 252, 253, 254, 1068, 255,
	1069, 256, 257, 1070, 456, 258, 259, 261, 264, 260,
	265, 266, 267, 457, 458, 1071, 913, 1072, 0, 0,
	0, 0, 268, 269, 270, 459, 271, 272, 0, 273,
	1073, 274, 1074, 1075, 914, 275, 276, 1076, 277, 460,
	1077, 461, 278, 1078, 279, 280, 281, 282, 283, 284,
	285, 462, 463, 464, 916, 1079, 468, 287, 0, 0,
	0, 1080, 286, 288, 295, 1081, 915, 289, 465, 291,
	290, 292, 293, 294, 466, 1082, 467, 1083, 296, 917,
	918, 297, 298, 299, 919, 300, 301, 0, 0, 302,
	303, 304, 305, 1084, 307, 306, 1085, 308, 469, 920,
	309, 310, 921, 1086, 311, 312, 1087, 1088, 313, 0,
	314, 315, 978, 977, 316, 317, 319, 320, 318, 922,
	321, 322, 324, 323, 1089, 1090, 923, 1091, 470, 471,
	325, 326, 1092, 327, 328, 329, 1093, 1094, 331, 332,
	1095, 1096, 333, 472, 924, 334, 925, 473, 335, 330,
	336, 337, 338, 339, 340, 341, 1097, 342, 474, 343,
	475, 344, 1098, 345, 0, 346, 347, 348, 349, 350,
	351, 476, 352, 353, 1099, 354, 355, 356, 357, 358,
	0, 360, 361, 362, 359, 363, 364, 365, 366, 1100,
	367, 926, 368, 369, 370, 371, 477, 372, 0, 373,
	377, 378, 379, 380, 381, 382, 383, 1101, 390, 391,
	384, 386, 387, 388, 385, 389, 392, 393, 1102, 394,
	374, 375, 395, 927, 396, 478, 397, 398, 1103, 408,
	399, 400, 401, 376, 402, 406, 407, 403, 404, 405,
	479, 1104, 410, 411, 409, 1105, 412, 413, 414, 415,
	416, 262, 417, 263, 418, 1106, 480, 481, 482, 419,
	1107, 1108, 420, 421, 483, 422, 484, 1109, 423, 424,
	425, 0, 426, 427, 1110, 1111, 428, 429, 430, 431,
	433, 1112, 434, 1113, 432, 435, 436, 437, 485, 486,
	487, 1114, 439, 438, 488, 1115, 1116, 1117, 1118, 440,
	441, 489, 442, 443, 444, 1141, 0, 1033, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1722, 0, 0, 0, 207, 208, 209, 210, 211, 1039,
	212, 1040, 1041, 1042, 1043, 445, 1044, 1045, 1046, 1047,
	213, 214, 215, 446, 447, 216, 448, 217, 218, 449,
	1048, 219, 220, 221, 222, 223, 224, 1049, 1050, 225,
	450, 451, 452, 1051, 226, 453, 1052, 1038, 1053, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 1054,
	236, 0, 237, 238, 239, 1055, 912, 240, 241, 1056,
	1057, 1059, 1058, 1060, 1061, 1062, 242, 243, 244, 245,
	246, 247, 454, 455, 1063, 248, 1064, 250, 249, 1065,
	251, 1066, 1067, 252, 253, 254, 1068, 255, 1069, 256,
	257, 1070, 456, 258, 259, 261, 264, 260, 265, 266,
	267, 457, 458, 1071, 913, 1072, 0, 0, 0, 0,
	268, 269, 270, 459, 271, 272, 0, 273, 1073, 274,
	1074, 1075, 914, 275, 276, 1076, 277, 460, 1077, 461,
	278, 1078, 279, 280, 281, 282, 283, 284, 285, 462,
	463, 464, 916, 1079, 468, 287, 0, 0, 0, 1080,
	286, 288, 295, 1081, 915, 289, 465, 291, 290, 292,
	293, 294, 466, 1082, 467, 1083, 296, 917, 918, 297,
	298, 299, 919, 300, 301, 0, 0, 302, 303, 304,
	305, 1084, 307, 306, 1085, 308, 469, 920, 309, 310,
	921, 1086, 311, 312, 1087, 1088, 313, 0, 314, 315,
	978, 977, 316, 317, 319, 320, 318, 922, 321, 322,
	324, 323, 1089, 1090, 923, 1091, 470, 471, 325, 326,
	1092, 327, 328, 329, 1093, 1094, 331, 332, 1095, 1096,
	333, 472, 924, 334, 925, 473, 335, 330, 336, 337,
	338, 339, 340, 341, 1097, 342, 474, 343, 475, 344,
	1098, 345, 0, 346, 347, 348, 349, 350, 351, 476,
	352, 353, 1099, 354, 355, 356, 357, 358, 0, 360,
	361, 362, 359, 363, 364, 365, 366, 1100, 367, 926,
	368, 369, 370, 371, 477, 372, 0, 373, 377, 378,
	379, 380, 381, 382, 383, 1101, 390, 391, 384, 386,
	387, 388, 385, 389, 392, 393, 1102, 394, 374, 375,
	395, 927, 396, 478, 397, 398, 1103, 408, 399, 400,
	401, 376, 402, 406, 407, 403, 404, 405, 479, 1104,
	410, 411, 409, 1105, 412, 413, 414, 415, 416, 262,
	417, 263, 418, 1106, 480, 481, 482, 419, 1107, 1108,
	420, 421, 483, 422, 484, 1109, 423, 424, 425, 0,
	426, 427, 1110, 1111, 428, 429, 430, 431, 433, 1112,
	434, 1113, 432, 435, 436, 437, 485, 486, 487, 1114,
	439, 438, 488, 1115, 1116, 1117, 1118, 440, 441, 489,
	442, 443, 444, 1030, 0, 1033, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 209, 210, 211, 1039, 212, 1040,
	1041, 1042, 1043, 445, 1044, 1045, 1046, 1047, 213, 214,
	215, 446, 447, 216, 448, 217, 218, 449, 1048, 219,
	220, 221, 222, 223, 224, 1049, 1050, 225, 450, 451,
	452, 1051, 226, 453, 1052, 1038, 1053, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 1054, 236, 0,
	237, 238, 239, 1055, 912, 240, 241, 1056, 1057, 1059,
	1058, 1060, 1061, 1062, 242, 243, 244, 245, 246, 247,
	454, 455, 1063, 248, 1064, 250, 249, 1065, 251, 1066,
	1067, 252, 253, 254, 1068, 255, 1069, 256, 257, 1070,
	456, 258, 259, 261, 264, 260, 265, 266, 267, 457,
	458, 1071, 913, 1072, 0, 0, 0, 0, 268, 269,
	270, 459, 271, 272, 0, 273, 1073, 274, 1074, 1075,
	914, 275, 276, 1076, 277, 460, 1077, 461, 278, 1078,
	279, 280, 281, 282, 283, 284, 285, 462, 463, 464,
	916, 1079, 468, 287, 0, 0, 0, 1080, 286, 288,
	295, 1081, 915, 289, 465, 291, 290, 292, 293, 294,
	466, 1082, 467, 1083, 296, 917, 918, 297, 298, 299,
	919, 300, 301, 0, 0, 302, 303, 304, 305, 1084,
	307, 306, 1085, 308, 469, 920, 309, 310, 921, 1086,
	311, 312, 1087, 1088, 313, 0, 314, 315, 978, 977,
	316, 317, 319, 320, 318, 922, 321, 322, 324, 323,
	1089, 1090, 923, 1091, 470, 471, 325, 326, 1092, 327,
	328, 329, 1093, 1094, 331, 332, 1095, 1096, 333, 472,
	924, 334, 925, 473, 335, 330, 336, 337, 338, 339,
	340, 341, 1097, 342, 474, 343, 475, 344, 1098, 345,
	0, 346, 347, 348, 349, 350, 351, 476, 352, 353,
	1099, 354, 355, 356, 357, 358, 0, 360, 361, 362,
	359, 363, 364, 365, 366, 1100, 367, 926, 368, 369,
	370, 371, 477, 372, 0, 373, 377, 378, 379, 380,
	381, 382, 383, 1101, 390, 391, 384, 386, 387, 388,
	385, 389, 392, 393, 1102, 394, 374, 375, 395, 927,
	396, 478, 397, 398, 1103, 408, 399, 400, 401, 376,
	402, 406, 407, 403, 404, 405, 479, 1104, 410, 411,
	409, 1105, 412, 413, 414, 415, 416, 262, 417, 263,
	418, 1106, 480, 481, 482, 419, 1107, 1108, 420, 421,
	483, 422, 484, 1109, 423, 424, 425, 0, 426, 427,
	1110, 1111, 428, 429, 430, 431, 433, 1112, 434, 1113,
	432, 435, 436, 437, 485, 486, 487, 1114, 439, 438,
	488, 1115, 1116, 1117, 1118, 440, 441, 489, 442, 443,
	444, 1033, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 208,
	209, 210, 211, 1039, 212, 1040, 1041, 1042, 1043, 445,
	1044, 1045, 1046, 1047, 213, 214, 215, 446, 447, 216,
	448, 217, 218, 449, 1048, 219, 220, 221, 222, 223,
	224, 1049, 1050, 225, 450, 451, 452, 1051, 226, 453,
	1052, 1038, 1053, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 1054, 236, 0, 237, 238, 239, 1055,
	912, 240, 241, 1056, 1057, 1059, 1058, 1060, 1061, 1062,
	242, 243, 244, 245, 246, 247, 454, 455, 1063, 248,
	1064, 250, 249, 1065, 251, 1066, 1067, 252, 253, 254,
	1068, 255, 1069, 256, 257, 1070, 456, 258, 259, 261,
	264, 260, 265, 266, 267, 457, 458, 1071, 913, 1072,
	0, 0, 0, 0, 268, 269, 270, 459, 271, 272,
	0, 273, 1073, 274, 1074, 1075, 914, 275, 276, 1076,
	277, 460, 1077, 461, 278, 1078, 279, 280, 281, 282,
	283, 284, 285, 462, 463, 464, 916, 1079, 468, 287,
	0, 0, 0, 1080, 286, 288, 295, 1081, 915, 289,
	465, 291, 290, 292, 293, 294, 466, 1082, 467, 1083,
	296, 917, 918, 297, 298, 299, 919, 300, 301, 0,
	0, 302, 303, 304, 305, 1084, 307, 306, 1085, 308,
	469, 920, 309, 310, 921, 1086, 311, 312, 1087, 1088,
	313, 0, 314, 315, 978, 977, 316, 317, 319, 320,
	318, 922, 321, 322, 324, 323, 1089, 1090, 923, 1091,
	470, 471, 325, 326, 1092, 327, 328, 329, 1093, 1094,
	331, 332, 1095, 1096, 333, 472, 924, 334, 925, 473,
	335, 330, 336, 337, 338, 339, 340, 341, 1097, 342,
	474, 343, 475, 344, 1098, 345, 0, 346, 347, 348,
	349, 350, 351, 476, 352, 353, 1099, 354, 355, 356,
	357, 358, 0, 360, 361, 362, 359, 363, 364, 365,
	366, 1100, 367, 926, 368, 369, 370, 371, 477, 372,
	0, 373, 377, 378, 379, 380, 381, 382, 383, 1101,
	390, 391, 384, 386, 387, 388, 385, 389, 392, 393,
	1102, 394, 374, 375, 395, 927, 396, 478, 397, 398,
	1103, 408, 399, 400, 401, 376, 402, 406, 407, 403,
	404, 405, 479, 1104, 410, 411, 409, 1105, 412, 413,
	414, 415, 416, 262, 417, 263, 418, 1106, 480, 481,
	482, 419, 1107, 1108, 420, 421, 483, 422, 484, 1109,
	423, 424, 425, 0, 426, 427, 1110, 1111, 428, 429,
	430, 431, 433, 1112, 434, 1113, 432, 435, 436, 437,
	485, 486, 487, 1114, 439, 438, 488, 1115, 1116, 1117,
	1118, 440, 441, 489, 442, 443, 444, 1955, 0, 856,
	813, 814, 815, 811, 812, 825, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 1952, 212, 0, 0, 0, 0, 903, 830, 0,
	0, 0, 213, 214, 215, 446, 871, 850, 882, 840,
	881, 880, 0, 219, 842, 841, 222, 223, 224, 832,
	902, 225, 930, 931, 452, 0, 226, 909, 0, 892,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 912, 240,
	241, 895, 893, 894, 899, 897, 896, 898, 242, 243,
	244, 245, 885, 247, 878, 877, 802, 248, 0, 250,
	249, 0, 251, 1953, 0, 252, 876, 254, 0, 255,
	0, 256, 257, 0, 808, 258, 259, 261, 264, 260,
	265, 266, 267, 932, 933, 821, 913, 0, 0, 0,
	0, 0, 268, 269, 270, 875, 873, 874, 0, 273,
	0, 274, 0, 0, 914, 275, 276, 0, 277, 934,
	0, 831, 278, 0, 279, 280, 281, 282, 283, 284,
	285, 904, 905, 908, 916, 0, 906, 852, 0, 0,
	0, 0, 286, 288, 295, 0, 915, 289, 864, 855,
	866, 868, 869, 870, 865, 0, 857, 0, 296, 917,
	918, 297, 298, 299, 919, 890, 891, 0, 0, 302,
	303, 304, 305, 0, 307, 306, 0, 308, 935, 920,
	309, 310, 921, 0, 311, 312, 0, 0, 313, 0,
	314, 315, 804, 803, 316, 317, 319, 844, 318, 922,
	321, 322, 324, 323, 799, 0, 923, 822, 907, 879,
	325, 326, 0, 853, 328, 854, 0, 0, 331, 332,
	0, 0, 333, 472, 924, 334, 925, 936, 335, 330,
	336, 337, 338, 339, 340, 341, 0, 342, 937, 343,
	475, 344, 0, 345, 0, 346, 347, 348, 349, 350,
	351, 872, 352, 353, 0, 354, 355, 356, 357, 358,
	0, 360, 361, 362, 359, 363, 364, 365, 366, 0,
	367, 926, 368, 369, 370, 371, 809, 372, 0, 373,
	377, 378, 379, 380, 381, 382, 383, 0, 390, 391,
	845, 846, 848, 849, 385, 389, 392, 393, 900, 394,
	374, 375, 395, 927, 396, 867, 847, 398, 0, 408,
	399, 400, 401, 376, 402, 406, 911, 403, 404, 405,
	938, 0, 410, 411, 409, 0, 412, 413, 414, 415,
	416, 262, 417, 263, 843, 0, 886, 887, 888, 889,
	0, 0, 420, 421, 939, 422, 940, 820, 423, 424,
	425, 0, 426, 427, 0, 805, 428, 429, 430, 431,
	433, 901, 434, 0, 851, 435, 436, 437, 485, 883,
	929, 1951, 439, 438, 488, 0, 0, 0, 0, 440,
	441, 489, 442, 443, 444, 800, 0, 0, 0, 0,
	0, 0, 0, 798, 0, 0, 0, 0, 796, 797,
	1954, 0, 0, 0, 0, 0, 0, 826, 1950, 0,
	0, 0, 789, 824, 856, 813, 814, 815, 811, 812,
	825, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 903, 830, 0, 0, 0, 213, 214, 215,
	446, 871, 850, 882, 840, 881, 880, 0, 219, 842,
	841, 222, 223, 224, 832, 902, 225, 930, 931, 452,
	0, 226, 909, 0, 892, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 912, 240, 241, 895, 893, 894, 899,
	897, 896, 898, 242, 243, 244, 245, 885, 247, 878,
	877, 802, 248, 0, 250, 249, 0, 251, 0, 0,
	252, 876, 254, 0, 255, 0, 256, 257, 0, 808,
	258, 259, 261, 264, 260, 265, 266, 267, 932, 933,
	821, 913, 0, 0, 0, 0, 0, 268, 269, 270,
	875, 873, 874, 0, 273, 0, 274, 0, 0, 914,
	275, 276, 0, 277, 934, 0, 831, 278, 0, 279,
	280, 281, 282, 283, 284, 285, 904, 905, 908, 916,
	0, 906, 852, 0, 0, 0, 0, 286, 288, 295,
	0, 915, 289, 864, 855, 866, 868, 869, 870, 865,
	0, 857, 0, 296, 917, 918, 297, 298, 299, 919,
	890, 891, 0, 0, 302, 303, 304, 305, 0, 307,
	306, 0, 308, 935, 920, 309, 310, 921, 0, 311,
	312, 0, 0, 313, 0, 314, 315, 804, 803, 316,
	317, 319, 844, 318, 922, 321, 322, 324, 323, 799,
	0, 923, 822, 907, 879, 325, 326, 0, 853, 328,
	854, 0, 0, 331, 332, 0, 0, 333, 472, 924,
	334, 925, 936, 335, 330, 336, 337, 338, 339, 340,
	341, 0, 342, 937, 343, 475, 344, 0, 345, 0,
	346, 347, 348, 349, 350, 351, 872, 352, 353, 0,
	354, 355, 356, 357, 358, 0, 360, 361, 362, 359,
	363, 364, 365, 366, 0, 367, 926, 368, 369, 370,
	371, 809, 372, 0, 373, 377, 378, 379, 380, 381,
	382, 383, 176, 390, 391, 845, 846, 848, 849, 385,
	389, 392, 393, 900, 394, 374, 375, 395, 927, 396,
	867, 847, 398, 0, 408, 399, 400, 401, 376, 402,
	406, 911, 403, 404, 405, 938, 0, 410, 411, 409,
	178, 412, 413, 414, 415, 416, 262, 417, 263, 843,
	0, 886, 887, 888, 889, 0, 0, 420, 421, 939,
	422, 940, 820, 423, 424, 425, 0, 426, 427, 0,
	805, 428, 429, 430, 431, 433, 901, 434, 0, 851,
	435, 436, 437, 1278, 883, 929, 0, 439, 438, 488,
	0, 0, 0, 170, 440, 441, 489, 442, 443, 444,
	800, 171, 0, 0, 0, 0, 0, 0, 798, 0,
	0, 0, 0, 796, 797, 856, 813, 814, 815, 811,
	812, 825, 1465, 1463, 0, 0, 0, 0, 824, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 903, 830, 0, 0, 0, 213, 214,
	215, 446, 871, 850, 882, 840, 881, 880, 0, 219,
	842, 841, 222, 223, 224, 832, 902, 225, 930, 931,
	452, 0, 226, 909, 0, 892, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 912, 240, 241, 895, 893, 894,
	899, 897, 896, 898, 242, 243, 244, 245, 885, 247,
	878, 877, 802, 248, 0, 250, 249, 0, 251, 0,
	0, 252, 876, 254, 0, 255, 0, 256, 257, 0,
	808, 258, 259, 261, 264, 260, 265, 266, 267, 932,
	933, 821, 913, 0, 0, 0, 0, 0, 268, 269,
	270, 875, 873, 874, 0, 273, 0, 274, 0, 0,
	914, 275, 276, 0, 277, 934, 0, 831, 278, 0,
	279, 280, 281, 282, 283, 284, 285, 904, 905, 908,
	916, 0, 906, 852, 0, 0, 0, 0, 286, 288,
	295, 0, 915, 289, 864, 855, 866, 868, 869, 870,
	865, 0, 857, 0, 296, 917, 918, 297, 298, 299,
	919, 890, 891, 0, 0, 302, 303, 304, 305, 0,
	307, 306, 0, 308, 935, 920, 309, 310, 921, 0,
	311, 312, 0, 0, 313, 0, 314, 315, 804, 803,
	316, 317, 319, 844, 318, 922, 321, 322, 324, 323,
	799, 0, 923, 822, 907, 879, 325, 326, 0, 853,
	328, 854, 0, 0, 331, 332, 0, 0, 333, 472,
	924, 334, 925, 936, 335, 330, 336, 337, 338, 339,
	340, 341, 0, 342, 937, 343, 475, 344, 0, 345,
	0, 346, 347, 348, 349, 350, 351, 872, 352, 353,
	0, 354, 355, 356, 357, 358, 0, 360, 361, 362,
	359, 363, 364, 365, 366, 0, 367, 926, 368, 369,
	370, 371, 809, 372, 0, 373, 377, 378, 379, 380,
	381, 382, 383, 176, 390, 391, 845, 846, 848, 849,
	385, 389, 392, 393, 900, 394, 374, 375, 395, 927,
	396, 867, 847, 398, 0, 408, 399, 400, 401, 376,
	402, 406, 911, 403, 404, 405, 938, 0, 410, 411,
	409, 178, 412, 413, 414, 415, 416, 262, 417, 263,
	843, 0, 886, 887, 888, 889, 0, 0, 420, 421,
	939, 422, 940, 820, 423, 424, 425, 0, 426, 427,
	0, 805, 428, 429, 430, 431, 433, 901, 434, 0,
	851, 435, 436, 437, 1278, 883, 929, 0, 439, 438,
	488, 0, 0, 0, 170, 440, 441, 489, 442, 443,
	444, 800, 171, 0, 0, 0, 0, 0, 0, 798,
	0, 0, 0, 0, 796, 797, 856, 813, 814, 815,
	811, 812, 825, 1465, 2338, 0, 0, 0, 0, 824,
	0, 0, 0, 207, 208, 209, 210, 211, 0, 212,
	0, 0, 0, 0, 903, 830, 0, 0, 0, 213,
	214, 215, 446, 871, 850, 882, 840, 881, 880, 0,
	219, 842, 841, 222, 223, 224, 832, 902, 225, 930,
	931, 452, 0, 226, 909, 0, 892, 0, 227, 228,
	229, 230, 231, 0, 233, 234, 235, 232, 0, 236,
	0, 237, 238, 239, 0, 912, 240, 241, 895, 893,
	894, 899, 897, 896, 898, 242, 243, 244, 245, 885,
	247, 878, 877, 802, 248, 0, 250, 249, 0, 251,
	0, 0, 252, 876, 254, 0, 255, 0, 256, 257,
	0, 808, 258, 259, 261, 264, 260, 265, 266, 267,
	932, 933, 821, 913, 0, 0, 0, 0, 0, 268,
	269, 270, 875, 873, 874, 0, 273, 0, 274, 0,
	0, 914, 275, 276, 0, 277, 934, 0, 831, 278,
	0, 279, 280, 281, 282, 283, 284, 285, 904, 905,
	908, 916, 0, 906, 852, 0, 0, 0, 0, 286,
	288, 295, 0, 915, 289, 864, 855, 866, 868, 869,
	870, 865, 0, 857, 0, 296, 917, 918, 297, 298,
	299, 919, 890, 891, 0, 0, 302, 303, 304, 305,
	0, 307, 306, 0, 308, 935, 920, 309, 310, 921,
	0, 311, 312, 0, 0, 313, 0, 314, 315, 804,
	803, 316, 317, 319, 844, 318, 922, 321, 322, 324,
	323, 799, 0, 923, 822, 907, 879, 325, 326, 0,
	853, 328, 854, 0, 0, 331, 332, 0, 0, 333,
	472, 924, 334, 925, 936, 335, 330, 336, 337, 338,
	339, 340, 341, 0, 342, 937, 343, 475, 344, 0,
	345, 0, 346, 347, 348, 349, 350, 351, 872, 352,
	353, 0, 354, 355, 356, 357, 358, 0, 360, 361,
	362, 359, 363, 364, 365, 366, 0, 367, 926, 368,
	369, 370, 371, 809, 372, 0, 373, 377, 378, 379,
	380, 381, 382, 383, 176, 390, 391, 845, 846, 848,
	849, 385, 389, 392, 393, 900, 394, 374, 375, 395,
	927, 396, 867, 847, 398, 0, 408, 399, 400, 401,
	376, 402, 406, 911, 403, 404, 405, 938, 0, 410,
	411, 409, 178, 412, 413, 414, 415, 416, 262, 417,
	263, 843, 0, 886, 887, 888, 889, 0, 0, 420,
	421, 939, 422, 940, 820, 423, 424, 425, 0, 426,
	427, 0, 805, 428, 429, 430, 431, 433, 901, 434,
	0, 851, 435, 436, 437, 1278, 883, 929, 0, 439,
	438, 488, 0, 0, 0, 170, 440, 441, 489, 442,
	443, 444, 800, 171, 0, 0, 0, 0, 0, 0,
	798, 0, 0, 0, 0, 796, 797, 856, 813, 814,
	815, 811, 812, 825, 1465, 1463, 0, 0, 0, 0,
	824, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 903, 830, 0, 0, 0,
	213, 214, 215, 446, 871, 850, 882, 840, 881, 880,
	2041, 219, 842, 841, 222, 223, 224, 832, 902, 225,
	930, 931, 452, 0, 226, 909, 0, 892, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 912, 240, 241, 895,
	893, 894, 899, 897, 896, 898, 242, 243, 244, 245,
	885, 247, 878, 877, 802, 248, 0, 250, 249, 0,
	251, 0, 0, 252, 876, 254, 0, 255, 0, 256,
	257, 0, 808, 258, 259, 261, 264, 260, 265, 266,
	267, 932, 933, 821, 913, 0, 0, 0, 0, 0,
	268, 269, 270, 875, 873, 874, 0, 273, 0, 274,
	0, 2046, 914, 275, 276, 0, 277, 934, 0, 831,
	278, 0, 279, 280, 281, 282, 283, 284, 285, 904,
	905, 908, 916, 0, 906, 852, 0, 0, 0, 0,
	286, 288, 295, 0, 915, 289, 864, 855, 866, 868,
	869, 870, 865, 0, 857, 0, 296, 917, 918, 297,
	298, 299, 919, 890, 891, 0, 0, 302, 303, 304,
	305, 0, 307, 306, 2042, 308, 935, 920, 309, 310,
	921, 0, 311, 312, 0, 0, 313, 0, 314, 315,
	804, 803, 316, 317, 319, 844, 318, 922, 321, 322,
	324, 323, 799, 0, 923, 822, 907, 879, 325, 326,
	0, 853, 328, 854, 0, 0, 331, 332, 0, 0,
	333, 472, 924, 334, 925, 936, 335, 330, 336, 337,
	338, 339, 340, 341, 0, 342, 937, 343, 475, 344,
	0, 345, 0, 346, 347, 348, 349, 350, 351, 872,
	352, 353, 0, 354, 355, 356, 357, 358, 0, 360,
	361, 362, 359, 363, 364, 365, 366, 0, 367, 926,
	368, 369, 370, 371, 809, 372, 0, 373, 377, 378,
	379, 380, 381, 382, 383, 0, 390, 391, 845, 846,
	848, 849, 385, 389, 392, 393, 900, 394, 374, 375,
	395, 927, 396, 867, 847, 398, 0, 408, 399, 400,
	401, 376, 402, 406, 911, 403, 404, 405, 938, 0,
	410, 411, 409, 0, 412, 413, 414, 415, 416, 262,
	417, 263, 843, 0, 886, 887, 888, 889, 0, 2043,
	420, 421, 939, 422, 940, 820, 423, 424, 425, 0,
	426, 427, 0, 805, 428, 429, 430, 431, 433, 901,
	434, 0, 851, 435, 436, 437, 485, 883, 929, 0,
	439, 438, 488, 0, 0, 0, 0, 440, 441, 489,
	442, 443, 444, 800, 0, 0, 0, 0, 0, 0,
	0, 798, 0, 0, 0, 0, 796, 797, 856, 813,
	814, 815, 811, 812, 825, 826, 0, 0, 0, 0,
	0, 824, 0, 0, 0, 207, 208, 209, 210, 211,
	0, 212, 0, 0, 0, 0, 903, 830, 0, 0,
	0, 213, 214, 215, 446, 871, 850, 882, 840, 881,
	880, 0, 219, 842, 841, 222, 223, 224, 832, 902,
	225, 930, 931, 452, 0, 226, 909, 0, 892, 0,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	0, 236, 0, 237, 238, 239, 0, 912, 240, 241,
	895, 893, 894, 899, 897, 896, 898, 242, 243, 244,
	245, 885, 247, 878, 877, 802, 248, 0, 250, 249,
	0, 251, 0, 0, 252, 876, 254, 0, 255, 0,
	256, 257, 0, 808, 258, 259, 261, 264, 260, 265,
	266, 267, 932, 933, 821, 913, 0, 0, 0, 0,
	0, 268, 269, 270, 875, 873, 874, 0, 273, 0,
	274, 0, 0, 914, 275, 276, 0, 277, 934, 0,
	831, 278, 0, 279, 280, 281, 282, 283, 284, 285,
	904, 905, 908, 916, 0, 906, 852, 0, 0, 0,
	0, 286, 288, 295, 0, 915, 289, 864, 855, 866,
	868, 869, 870, 865, 0, 857, 0, 296, 917, 918,
	297, 298, 299, 919, 890, 891, 0, 0, 302, 303,
	304, 305, 0, 307, 306, 0, 308, 935, 920, 309,
	310, 921, 0, 311, 312, 0, 0, 313, 0, 314,
	315, 804, 803, 316, 317, 319, 844, 318, 922, 321,
	322, 324, 323, 799, 2857, 923, 822, 907, 879, 325,
	326, 0, 853, 328, 854, 0, 0, 331, 332, 0,
	0, 333, 472, 924, 334, 925, 936, 335, 330, 336,
	337, 338, 339, 340, 341, 0, 342, 937, 343, 475,
	344, 0, 345, 0, 346, 347, 348, 349, 350, 351,
	872, 352, 353, 0, 354, 355, 356, 357, 358, 0,
	360, 361, 362, 359, 363, 364, 365, 366, 0, 367,
	926, 368, 369, 370, 371, 809, 372, 0, 373, 377,
	378, 379, 380, 381, 382, 383, 0, 390, 391, 845,
	846, 848, 849, 385, 389, 392, 393, 900, 394, 374,
	375, 395, 927, 396, 867, 847, 398, 0, 408, 399,
	400, 401, 376, 402, 406, 911, 403, 404, 405, 938,
	0, 410, 411, 409, 0, 412, 413, 414, 415, 416,
	262, 417, 263, 843, 0, 886, 887, 888, 889, 0,
	0, 420, 421, 939, 422, 940, 820, 423, 424, 425,
	0, 426, 427, 0, 805, 428, 429, 430, 431, 433,
	901, 434, 0, 851, 435, 436, 437, 485, 883, 929,
	0, 439, 438, 488, 0, 0, 0, 0, 440, 441,
	489, 442, 443, 444, 800, 0, 0, 0, 0, 0,
	0, 0, 798, 0, 0, 0, 0, 796, 797, 1521,
	0, 0, 0, 0, 0, 0, 826, 0, 0, 0,
	0, 0, 824, 856, 813, 814, 815, 811, 812, 825,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 903, 830, 0, 0, 0, 213, 214, 215, 446,
	871, 850, 882, 840, 881, 880, 0, 219, 842, 841,
	222, 223, 224, 832, 902, 225, 930, 931, 452, 0,
	226, 909, 0, 892, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 912, 240, 241, 895, 893, 894, 899, 897,
	896, 898, 242, 243, 244, 245, 885, 247, 878, 877,
	802, 248, 0, 250, 249, 0, 251, 0, 0, 252,
	876, 254, 0, 255, 0, 256, 257, 0, 808, 258,
	259, 261, 264, 260, 265, 266, 267, 932, 933, 821,
	913, 0, 0, 0, 0, 0, 268, 269, 270, 875,
	873, 874, 0, 273, 0, 274, 0, 0, 914, 275,
	276, 0, 277, 934, 0, 831, 278, 0, 279, 280,
	281, 282, 283, 284, 285, 904, 905, 908, 916, 0,
	906, 852, 0, 0, 0, 1869, 286, 288, 295, 0,
	915, 289, 864, 855, 866, 868, 869, 870, 865, 0,
	857, 0, 296, 917, 918, 297, 298, 299, 919, 890,
	891, 0, 0, 302, 303, 304, 305, 0, 307, 306,
	0, 308, 935, 920, 309, 310, 921, 0, 311, 312,
	0, 0, 313, 0, 314, 315, 804, 803, 316, 317,
	319, 844, 318, 922, 321, 322, 324, 323, 799, 0,
	923, 822, 907, 879, 325, 326, 0, 853, 328, 854,
	0, 0, 331, 332, 0, 0, 333, 472, 924, 334,
	925, 936, 335, 330, 336, 337, 338, 339, 340, 341,
	0, 342, 937, 343, 475, 344, 1868, 345, 0, 346,
	347, 348, 349, 350, 351, 872, 352, 353, 0, 354,
	355, 356, 357, 358, 0, 360, 361, 362, 359, 363,
	364, 365, 366, 0, 367, 926, 368, 369, 370, 371,
	809, 372, 0, 373, 377, 378, 379, 380, 381, 382,
	383, 0, 390, 391, 845, 846, 848, 849, 385, 389,
	392, 393, 900, 394, 374, 375, 395, 927, 396, 867,
	847, 398, 0, 408, 399, 400, 401, 376, 402, 406,
	911, 403, 404, 405, 938, 0, 410, 411, 409, 0,
	412, 413, 414, 415, 416, 262, 417, 263, 843, 0,
	886, 887, 888, 889, 0, 0, 420, 421, 939, 422,
	940, 820, 423, 424, 425, 0, 426, 427, 0, 805,
	428, 429, 430, 431, 433, 901, 434, 0, 851, 435,
	436, 437, 485, 883, 929, 0, 439, 438, 488, 0,
	0, 0, 0, 440, 441, 489, 442, 443, 444, 800,
	0, 0, 0, 0, 0, 0, 0, 798, 0, 0,
	0, 0, 796, 797, 0, 0, 0, 0, 0, 0,
	0, 826, 0, 0, 0, 0, 792, 824, 856, 813,
	814, 815, 811, 812, 825, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 208, 209, 210, 211,
	0, 212, 0, 0, 0, 0, 903, 830, 0, 0,
	0, 213, 214, 215, 446, 871, 850, 882, 840, 881,
	880, 0, 219, 842, 841, 222, 223, 224, 832, 902,
	225, 930, 931, 452, 0, 226, 909, 0, 892, 0,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	0, 236, 0, 237, 238, 239, 0, 912, 240, 241,
	895, 893, 894, 899, 897, 896, 898, 242, 243, 244,
	245, 885, 247, 878, 877, 802, 248, 0, 250, 249,
	0, 251, 0, 0, 252, 876, 254, 0, 255, 0,
	256, 257, 0, 808, 258, 259, 261, 264, 260, 265,
	266, 267, 932, 933, 821, 913, 0, 0, 0, 0,
	0, 268, 269, 270, 875, 873, 874, 0, 273, 0,
	274, 0, 0, 914, 275, 276, 0, 277, 934, 0,
	831, 278, 0, 279, 280, 281, 282, 283, 284, 285,
	904, 905, 908, 916, 0, 906, 852, 0, 0, 0,
	0, 286, 288, 295, 0, 915, 289, 864, 855, 866,
	868, 869, 870, 865, 0, 857, 0, 296, 917, 918,
	297, 298, 299, 919, 890, 891, 0, 0, 302, 303,
	304, 305, 0, 307, 306, 0, 308, 935, 920, 309,
	310, 921, 0, 311, 312, 0, 0, 313, 0, 314,
	315, 804, 803, 316, 317, 319, 844, 318, 922, 321,
	322, 324, 323, 799, 0, 923, 822, 907, 879, 325,
	326, 0, 853, 328, 854, 794, 0, 331, 332, 0,
	0, 333, 472, 924, 334, 925, 936, 335, 330, 336,
	337, 338, 339, 340, 341, 0, 342, 937, 343, 475,
	344, 0, 345, 0, 346, 347, 348, 349, 350, 351,
	872, 352, 353, 0, 354, 355, 356, 357, 358, 0,
	360, 361, 362, 359, 363, 364, 365, 366, 0, 367,
	926, 368, 369, 370, 371, 809, 372, 0, 373, 377,
	378, 379, 380, 381, 382, 383, 0, 390, 391, 845,
	846, 848, 849, 385, 389, 392, 393, 900, 394, 374,
	375, 395, 927, 396, 867, 847, 398, 0, 408, 399,
	400, 401, 376, 402, 406, 911, 403, 404, 405, 938,
	0, 410, 411, 409, 0, 412, 413, 414, 415, 416,
	262, 417, 263, 843, 0, 886, 887, 888, 889, 0,
	0, 420, 421, 939, 422, 940, 820, 423, 424, 425,
	0, 426, 427, 0, 805, 428, 429, 430, 431, 433,
	901, 434, 0, 851, 435, 436, 437, 485, 883, 929,
	0, 439, 438, 488, 0, 0, 0, 0, 440, 441,
	489, 442, 443, 444, 800, 0, 0, 0, 0, 0,
	0, 0, 798, 0, 0, 0, 0, 796, 797, 856,
	813, 814, 815, 811, 812, 825, 826, 0, 0, 0,
	0, 0, 824, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 903, 830, 0,
	0, 0, 213, 214, 215, 446, 871, 850, 882, 840,
	881, 880, 0, 219, 842, 841, 222, 223, 224, 832,
	902, 225, 930, 931, 452, 0, 226, 909, 0, 892,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 912, 240,
	241, 895, 893, 894, 899, 897, 896, 898, 242, 243,
	244, 245, 885, 247, 878, 877, 802, 248, 0, 250,
	249, 0, 251, 0, 0, 252, 876, 254, 0, 255,
	0, 256, 257, 0, 808, 258, 259, 261, 264, 260,
	265, 266, 267, 932, 933, 821, 913, 0, 0, 0,
	0, 0, 268, 269, 270, 875, 873, 874, 0, 273,
	0, 274, 0, 0, 914, 275, 276, 0, 277, 934,
	0, 831, 278, 0, 279, 280, 281, 282, 283, 284,
	285, 904, 905, 908, 916, 0, 906, 852, 0, 0,
	0, 0, 286, 288, 295, 0, 915, 289, 864, 855,
	866, 868, 869, 870, 865, 0, 857, 0, 296, 917,
	918, 297, 298, 299, 919, 890, 891, 0, 0, 302,
	303, 304, 305, 0, 307, 306, 0, 308, 935, 920,
	309, 310, 921, 0, 311, 312, 0, 0, 313, 0,
	314, 315, 804, 803, 316, 317, 319, 844, 318, 922,
	321, 322, 324, 323, 799, 0, 923, 822, 907, 879,
	325, 326, 0, 853, 328, 854, 794, 0, 331, 332,
	0, 0, 333, 472, 924, 334, 925, 936, 335, 330,
	336, 337, 338, 339, 340, 341, 0, 342, 937, 343,
	475, 344, 0, 345, 0, 346, 347, 348, 349, 350,
	351, 872, 352, 353, 0, 354, 355, 356, 357, 358,
	0, 360, 361, 362, 359, 363, 364, 365, 366, 0,
	367, 926, 368, 369, 370, 371, 809, 372, 0, 373,
	377, 378, 379, 380, 381, 382, 383, 0, 390, 391,
	845, 846, 848, 849, 385, 389, 392, 393, 900, 394,
	374, 375, 395, 927, 396, 867, 847, 398, 0, 408,
	399, 400, 401, 376, 402, 406, 911, 403, 404, 405,
	938, 0, 410, 411, 409, 0, 412, 413, 414, 415,
	416, 262, 417, 263, 843, 0, 886, 887, 888, 889,
	0, 0, 420, 421, 939, 422, 940, 820, 423, 424,
	425, 0, 426, 427, 0, 805, 428, 429, 430, 431,
	433, 901, 434, 0, 851, 435, 436, 437, 485, 883,
	929, 0, 439, 438, 488, 0, 0, 0, 0, 440,
	441, 489, 442, 443, 444, 800, 0, 0, 0, 0,
	0, 0, 0, 798, 0, 0, 0, 0, 796, 797,
	856, 813, 814, 815, 811, 812, 825, 826, 0, 0,
	0, 0, 0, 824, 0, 0, 0, 207, 208, 209,
	210, 211, 0, 212, 0, 0, 0, 0, 903, 830,
	0, 0, 0, 213, 214, 215, 446, 871, 850, 882,
	840, 881, 880, 0, 219, 842, 841, 222, 223, 224,
	832, 902, 225, 930, 931, 452, 0, 226, 909, 0,
	892, 0, 227, 228, 229, 230, 231, 0, 233, 234,
	235, 232, 0, 236, 0, 237, 238, 239, 0, 912,
	240, 241, 895, 893, 894, 899, 897, 896, 898, 242,
	243, 244, 245, 885, 247, 878, 877, 802, 248, 0,
	250, 249, 0, 251, 0, 0, 252, 876, 254, 0,
	255, 0, 256, 257, 0, 808, 258, 259, 261, 264,
	260, 265, 266, 267, 932, 933, 821, 913, 0, 0,
	0, 0, 0, 268, 269, 270, 875, 873, 874, 0,
	273, 0, 274, 0, 0, 914, 275, 276, 0, 277,
	934, 0, 831, 278, 0, 279, 280, 281, 282, 283,
	284, 285, 904, 905, 908, 916, 0, 906, 852, 0,
	0, 0, 0, 286, 288, 295, 0, 915, 289, 864,
	855, 866, 868, 869, 870, 865, 0, 857, 0, 296,
	917, 918, 297, 298, 299, 919, 890, 891, 0, 0,
	302, 303, 304, 305, 0, 307, 306, 0, 308, 935,
	920, 309, 310, 921, 0, 311, 312, 0, 0, 313,
	0, 314, 315, 804, 803, 316, 317, 319, 844, 318,
	922, 321, 322, 324, 323, 799, 0, 923, 822, 907,
	879, 325, 326, 0, 853, 328, 854, 0, 0, 331,
	332, 0, 0, 333, 472, 924, 334, 925, 936, 335,
	330, 336, 337, 338, 339, 340, 341, 0, 342, 937,
	343, 475, 344, 0, 345, 0, 346, 347, 348, 349,
	350, 351, 872, 352, 353, 0, 354, 355, 356, 357,
	358, 0, 360, 361, 362, 359, 363, 364, 365, 366,
	0, 367, 926, 368, 369, 370, 371, 809, 372, 0,
	373, 377, 378, 379, 380, 381, 382, 383, 0, 390,
	391, 845, 846, 848, 849, 385, 389, 392, 393, 900,
	394, 374, 375, 395, 927, 396, 867, 847, 398, 0,
	408, 399, 400, 401, 376, 402, 406, 911, 403, 404,
	405, 938, 0, 410, 411, 409, 0, 412, 413, 414,
	415, 416, 262, 417, 263, 843, 0, 886, 887, 888,
	889, 0, 0, 420, 421, 939, 422, 940, 820, 423,
	424, 425, 0, 426, 427, 0, 805, 428, 429, 430,
	431, 433, 901, 434, 0, 851, 435, 436, 437, 485,
	883, 929, 2676, 439, 438, 488, 0, 0, 0, 0,
	440, 441, 489, 442, 443, 444, 800, 0, 0, 0,
	0, 0, 0, 0, 798, 0, 0, 0, 0, 796,
	797, 856, 813, 814, 815, 811, 812, 825, 826, 0,
	0, 0, 0, 0, 824, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 903,
	830, 0, 0, 0, 213, 214, 215, 446, 871, 850,
	882, 840, 881, 880, 0, 219, 842, 841, 222, 223,
	224, 832, 902, 225, 930, 931, 452, 0, 226, 909,
	0, 892, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	912, 240, 241, 895, 893, 894, 899, 897, 896, 898,
	242, 243, 244, 245, 885, 247, 878, 877, 802, 248,
	0, 250, 249, 0, 251, 0, 0, 252, 876, 254,
	0, 255, 0, 256, 257, 0, 808, 258, 259, 261,
	264, 260, 265, 266, 267, 932, 933, 821, 913, 0,
	0, 0, 0, 0, 268, 269, 270, 875, 873, 874,
	0, 273, 0, 274, 0, 0, 914, 275, 276, 0,
	277, 934, 0, 831, 278, 0, 279, 280, 281, 282,
	283, 284, 285, 904, 905, 908, 916, 0, 906, 852,
	0, 0, 0, 0, 286, 288, 295, 0, 915, 289,
	864, 855, 866, 868, 869, 870, 865, 0, 857, 0,
	296, 917, 918, 297, 298, 299, 919, 890, 891, 0,
	0, 302, 303, 304, 305, 0, 307, 306, 0, 308,
	935, 920, 309, 310, 921, 0, 311, 312, 0, 0,
	313, 0, 314, 315, 804, 803, 316, 317, 319, 844,
	318, 922, 321, 322, 324, 323, 799, 0, 923, 822,
	907, 879, 325, 326, 0, 853, 328, 854, 0, 0,
	331, 332, 0, 0, 333, 472, 924, 334, 925, 936,
	335, 330, 336, 337, 338, 339, 340, 341, 0, 342,
	937, 343, 475, 344, 0, 345, 0, 346, 347, 348,
	349, 350, 351, 872, 352, 353, 0, 354, 355, 356,
	357, 358, 0, 360, 361, 362, 359, 363, 364, 365,
	366, 0, 367, 926, 368, 369, 370, 371, 809, 372,
	0, 373, 377, 378, 379, 380, 381, 382, 383, 0,
	390, 391, 845, 846, 848, 849, 385, 389, 392, 393,
	900, 394, 374, 375, 395, 927, 396, 867, 847, 398,
	0, 408, 399, 400, 401, 376, 402, 406, 911, 403,
	404, 405, 938, 0, 410, 411, 409, 0, 412, 413,
	414, 415, 416, 262, 417, 263, 843, 0, 886, 887,
	888, 889, 0, 0, 420, 421, 939, 422, 940, 820,
	423, 424, 425, 0, 426, 427, 0, 805, 428, 429,
	430, 431, 433, 901, 434, 0, 851, 435, 436, 437,
	485, 883, 929, 0, 439, 438, 488, 0, 0, 0,
	0, 440, 441, 489, 442, 443, 444, 800, 0, 0,
	0, 0, 0, 0, 0, 798, 0, 0, 0, 0,
	796, 797, 1521, 0, 0, 0, 0, 0, 0, 826,
	0, 0, 0, 0, 0, 824, 856, 813, 814, 815,
	811, 812, 825, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 208, 209, 210, 211, 0, 212,
	0, 0, 0, 0, 903, 830, 0, 0, 0, 213,
	214, 215, 446, 871, 850, 882, 840, 881, 880, 0,
	219, 842, 841, 222, 223, 224, 832, 902, 225, 930,
	931, 452, 0, 226, 909, 0, 892, 0, 227, 228,
	229, 230, 231, 0, 233, 234, 235, 232, 0, 236,
	0, 237, 238, 239, 0, 912, 240, 241, 895, 893,
	894, 899, 897, 896, 898, 242, 243, 244, 245, 885,
	247, 878, 877, 802, 248, 0, 250, 249, 0, 251,
	0, 0, 252, 876, 254, 0, 255, 0, 256, 257,
	0, 808, 258, 259, 261, 264, 260, 265, 266, 267,
	932, 933, 821, 913, 0, 0, 0, 0, 0, 268,
	269, 270, 875, 873, 874, 0, 273, 0, 274, 0,
	2046, 914, 275, 276, 0, 277, 934, 0, 831, 278,
	0, 279, 280, 281, 282, 283, 284, 285, 904, 905,
	908, 916, 0, 906, 852, 0, 0, 0, 0, 286,
	288, 295, 0, 915, 289, 864, 855, 866, 868, 869,
	870, 865, 0, 857, 0, 296, 917, 918, 297, 298,
	299, 919, 890, 891, 0, 0, 302, 303, 304, 305,
	0, 307, 306, 0, 308, 935, 920, 309, 310, 921,
	0, 311, 312, 0, 0, 313, 0, 314, 315, 804,
	803, 316, 317, 319, 844, 318, 922, 321, 322, 324,
	323, 799, 0, 923, 822, 907, 879, 325, 326, 0,
	853, 328, 854, 0, 0, 331, 332, 0, 0, 333,
	472, 924, 334, 925, 936, 335, 330, 336, 337, 338,
	339, 340, 341, 0, 342, 937, 343, 475, 344, 0,
	345, 0, 346, 347, 348, 349, 350, 351, 872, 352,
	353, 0, 354, 355, 356, 357, 358, 0, 360, 361,
	362, 359, 363, 364, 365, 366, 0, 367, 926, 368,
	369, 370, 371, 809, 372, 0, 373, 377, 378, 379,
	380, 381, 382, 383, 0, 390, 391, 845, 846, 848,
	849, 385, 389, 392, 393, 900, 394, 374, 375, 395,
	927, 396, 867, 847, 398, 0, 408, 399, 400, 401,
	376, 402, 406, 911, 403, 404, 405, 938, 0, 410,
	411, 409, 0, 412, 413, 414, 415, 416, 262, 417,
	263, 843, 0, 886, 887, 888, 889, 0, 0, 420,
	421, 939, 422, 940, 820, 423, 424, 425, 0, 426,
	427, 0, 805, 428, 429, 430, 431, 433, 901, 434,
	0, 851, 435, 436, 437, 485, 883, 929, 0, 439,
	438, 488, 0, 0, 0, 0, 440, 441, 489, 442,
	443, 444, 800, 0, 0, 0, 0, 0, 0, 0,
	798, 0, 0, 0, 0, 796, 797, 856, 813, 814,
	815, 811, 812, 825, 826, 0, 0, 0, 0, 0,
	824, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 903, 830, 0, 0, 0,
	213, 214, 215, 446, 871, 850, 882, 840, 881, 880,
	0, 219, 842, 841, 222, 223, 224, 832, 902, 225,
	930, 931, 452, 0, 226, 909, 0, 892, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 912, 240, 241, 895,
	893, 894, 899, 897, 896, 898, 242, 243, 244, 245,
	885, 247, 878, 877, 802, 248, 0, 250, 249, 0,
	251, 0, 0, 252, 876, 254, 0, 255, 0, 256,
	257, 0, 808, 258, 259, 261, 264, 260, 265, 266,
	267, 932, 933, 821, 913, 0, 0, 0, 0, 0,
	268, 269, 270, 875, 873, 874, 0, 273, 0, 274,
	0, 0, 914, 275, 276, 0, 277, 934, 0, 831,
	278, 0, 279, 280, 281, 282, 283, 284, 285, 904,
	905, 908, 916, 0, 906, 852, 0, 0, 0, 0,
	286, 288, 295, 0, 915, 289, 864, 855, 866, 868,
	869, 870, 865, 0, 857, 0, 296, 917, 918, 297,
	298, 299, 919, 890, 891, 0, 0, 302, 303, 304,
	305, 0, 307, 306, 0, 308, 935, 920, 309, 310,
	921, 0, 311, 312, 0, 0, 313, 0, 314, 315,
	804, 803, 316, 317, 319, 844, 318, 922, 321, 322,
	324, 323, 799, 0, 923, 822, 907, 879, 325, 326,
	0, 853, 328, 854, 0, 0, 331, 332, 0, 0,
	333, 472, 924, 334, 925, 936, 335, 330, 336, 337,
	338, 339, 340, 341, 0, 342, 937, 343, 475, 344,
	0, 345, 0, 346, 347, 348, 349, 350, 351, 872,
	352, 353, 0, 354, 355, 356, 357, 358, 0, 360,
	361, 362, 359, 363, 364, 365, 366, 0, 367, 926,
	368, 369, 370, 371, 809, 372, 0, 373, 377, 378,
	379, 380, 381, 382, 383, 0, 390, 391, 845, 846,
	848, 849, 385, 389, 392, 393, 900, 394, 374, 375,
	395, 927, 396, 867, 847, 398, 0, 408, 399, 400,
	401, 376, 402, 406, 911, 403, 404, 405, 938, 0,
	410, 411, 409, 0, 412, 413, 414, 415, 416, 262,
	417, 263, 843, 0, 886, 887, 888, 889, 0, 0,
	420, 421, 939, 422, 940, 820, 423, 424, 425, 0,
	426, 427, 0, 805, 428, 429, 430, 431, 433, 901,
	434, 0, 851, 435, 436, 437, 485, 883, 929, 0,
	439, 438, 488, 0, 0, 0, 0, 440, 441, 489,
	442, 443, 444, 800, 0, 0, 0, 0, 0, 0,
	0, 798, 0, 0, 0, 0, 796, 797, 0, 0,
	0, 0, 0, 0, 0, 826, 1463, 0, 0, 0,
	2037, 824, 856, 813, 814, 815, 811, 812, 825, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	208, 209, 210, 211, 0, 212, 0, 0, 0, 0,
	903, 830, 0, 0, 0, 213, 214, 215, 446, 871,
	850, 882, 840, 881, 880, 0, 219, 842, 841, 222,
	223, 224, 832, 902, 225, 930, 931, 452, 0, 226,
	909, 0, 892, 0, 227, 228, 229, 230, 231, 0,
	233, 234, 235, 232, 0, 236, 0, 237, 238, 239,
	0, 912, 240, 241, 895, 893, 894, 899, 897, 896,
	898, 242, 243, 244, 245, 885, 247, 878, 877, 802,
	248, 0, 250, 249, 0, 251, 0, 0, 252, 876,
	254, 0, 255, 0, 256, 257, 0, 808, 258, 259,
	261, 264, 260, 265, 266, 267, 932, 933, 821, 913,
	0, 0, 0, 0, 0, 268, 269, 270, 875, 873,
	874, 0, 273, 0, 274, 0, 0, 914, 275, 276,
	0, 277, 934, 0, 831, 278, 0, 279, 280, 281,
	282, 283, 284, 285, 904, 905, 908, 916, 0, 906,
	852, 0, 0, 0, 0, 286, 288, 295, 0, 915,
	289, 864, 855, 866, 868, 869, 870, 865, 0, 857,
	0, 296, 917, 918, 297, 298, 299, 919, 890, 891,
	0, 0, 302, 303, 304, 305, 0, 307, 306, 0,
	308, 935, 920, 309, 310, 921, 0, 311, 312, 0,
	0, 313, 0, 314, 315, 804, 803, 316, 317, 319,
	844, 318, 922, 321, 322, 324, 323, 799, 0, 923,
	822, 907, 879, 325, 326, 0, 853, 328, 854, 0,
	0, 331, 332, 0, 0, 333, 472, 924, 334, 925,
	936, 335, 330, 336, 337, 338, 339, 340, 341, 0,
	342, 937, 343, 475, 344, 0, 345, 0, 346, 347,
	348, 349, 350, 351, 872, 352, 353, 0, 354, 355,
	356, 357, 358, 0, 360, 361, 362, 359, 363, 364,
	365, 366, 0, 367, 926, 368, 369, 370, 371, 809,
	372, 0, 373, 377, 378, 379, 380, 381, 382, 383,
	0, 390, 391, 845, 846, 848, 849, 385, 389, 392,
	393, 900, 394, 374, 375, 395, 927, 396, 867, 847,
	398, 0, 408, 399, 400, 401, 376, 402, 406, 911,
	403, 404, 405, 938, 0, 410, 411, 409, 0, 412,
	413, 414, 415, 416, 262, 417, 263, 843, 0, 886,
	887, 888, 889, 0, 0, 420, 421, 939, 422, 940,
	820, 423, 424, 425, 0, 426, 427, 0, 805, 428,
	429, 430, 431, 433, 901, 434, 0, 851, 435, 436,
	437, 485, 883, 929, 0, 439, 438, 488, 0, 0,
	0, 0, 440, 441, 489, 442, 443, 444, 800, 0,
	0, 0, 0, 0, 0, 0, 798, 0, 0, 0,
	0, 796, 797, 0, 0, 0, 0, 0, 0, 0,
	826, 0, 0, 0, 0, 2026, 824, 856, 813, 814,
	815, 811, 812, 825, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 903, 830, 0, 0, 0,
	213, 214, 215, 446, 871, 850, 882, 840, 881, 880,
	0, 219, 842, 841, 222, 223, 224, 832, 902, 225,
	930, 931, 452, 0, 226, 909, 0, 892, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 912, 240, 241, 895,
	893, 894, 899, 897, 896, 898, 242, 243, 244, 245,
	885, 247, 878, 877, 802, 248, 0, 250, 249, 0,
	251, 0, 0, 252, 876, 254, 0, 255, 0, 256,
	257, 0, 808, 258, 259, 261, 264, 260, 265, 266,
	267, 932, 933, 821, 913, 0, 0, 0, 0, 0,
	268, 269, 270, 875, 873, 874, 0, 273, 0, 274,
	0, 0, 914, 275, 276, 0, 277, 934, 0, 831,
	278, 0, 279, 280, 281, 282, 283, 284, 285, 904,
	905, 908, 916, 0, 906, 852, 0, 0, 0, 0,
	286, 288, 295, 0, 915, 289, 864, 855, 866, 868,
	869, 870, 865, 0, 857, 0, 296, 917, 918, 297,
	298, 299, 919, 890, 891, 0, 0, 302, 303, 304,
	305, 0, 307, 306, 0, 308, 935, 920, 309, 310,
	921, 0, 311, 312, 0, 0, 313, 0, 314, 315,
	804, 803, 316, 317, 319, 844, 318, 922, 321, 322,
	324, 323, 799, 0, 923, 822, 907, 879, 325, 326,
	0, 853, 328, 854, 0, 0, 331, 332, 0, 0,
	333, 472, 924, 334, 925, 936, 335, 330, 336, 337,
	338, 339, 340, 341, 0, 342, 937, 343, 475, 344,
	0, 345, 0, 346, 347, 348, 349, 350, 351, 872,
	352, 353, 0, 354, 355, 356, 357, 358, 0, 360,
	361, 362, 359, 363, 364, 365, 366, 0, 367, 926,
	368, 369, 370, 371, 809, 372, 0, 373, 377, 378,
	379, 380, 381, 382, 383, 0, 390, 391, 845, 846,
	848, 849, 385, 389, 392, 393, 900, 394, 374, 375,
	395, 927, 396, 867, 847, 398, 0, 408, 399, 400,
	401, 376, 402, 406, 911, 403, 404, 405, 938, 0,
	410, 411, 409, 0, 412, 413, 414, 415, 416, 262,
	417, 263, 843, 0, 886, 887, 888, 889, 0, 0,
	420, 421, 939, 422, 940, 820, 423, 424, 425, 0,
	426, 427, 0, 805, 428, 429, 430, 431, 433, 901,
	434, 0, 851, 435, 436, 437, 485, 883, 929, 0,
	439, 438, 488, 0, 0, 0, 0, 440, 441, 489,
	442, 443, 444, 800, 0, 0, 0, 0, 0, 0,
	0, 798, 0, 0, 0, 0, 796, 797, 0, 0,
	0, 0, 0, 0, 0, 826, 0, 0, 0, 0,
	2024, 824, 856, 813, 814, 815, 811, 812, 825, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	208, 209, 210, 211, 0, 212, 0, 0, 0, 0,
	903, 830, 0, 0, 0, 213, 214, 215, 446, 871,
	850, 882, 840, 881, 880, 0, 219, 842, 841, 222,
	223, 224, 832, 902, 225, 930, 931, 452, 0, 226,
	909, 0, 892, 0, 227, 228, 229, 230, 231, 0,
	233, 234, 235, 232, 0, 236, 0, 237, 238, 239,
	0, 912, 240, 241, 895, 893, 894, 899, 897, 896,
	898, 242, 243, 244, 245, 885, 247, 878, 877, 802,
	248, 0, 250, 249, 0, 251, 0, 0, 252, 876,
	254, 0, 255, 0, 256, 257, 0, 808, 258, 259,
	261, 264, 260, 265, 266, 267, 932, 933, 821, 913,
	0, 0, 0, 0, 0, 268, 269, 270, 875, 873,
	874, 0, 273, 0, 274, 0, 0, 914, 275, 276,
	0, 277, 934, 0, 831, 278, 0, 279, 280, 281,
	282, 283, 284, 285, 904, 905, 908, 916, 0, 906,
	852, 0, 0, 0, 0, 286, 288, 295, 0, 915,
	289, 864, 855, 866, 868, 869, 870, 865, 0, 857,
	0, 296, 917, 918, 297, 298, 299, 919, 890, 891,
	0, 0, 302, 303, 304, 305, 0, 307, 306, 0,
	308, 935, 920, 309, 310, 921, 0, 311, 312, 0,
	0, 313, 0, 314, 315, 804, 803, 316, 317, 319,
	844, 318, 922, 321, 322, 324, 323, 799, 0, 923,
	822, 907, 879, 325, 326, 0, 853, 328, 854, 0,
	0, 331, 332, 0, 0, 333, 472, 924, 334, 925,
	936, 335, 330, 336, 337, 338, 339, 340, 341, 0,
	342, 937, 343, 475, 344, 0, 345, 0, 346, 347,
	348, 349, 350, 351, 872, 352, 353, 0, 354, 355,
	356, 357, 358, 0, 360, 361, 362, 359, 363, 364,
	365, 366, 0, 367, 926, 368, 369, 370, 371, 809,
	372, 0, 373, 377, 378, 379, 380, 381, 382, 383,
	0, 390, 391, 845, 846, 848, 849, 385, 389, 392,
	393, 900, 394, 374, 375, 395, 927, 396, 867, 847,
	398, 0, 408, 399, 400, 401, 376, 402, 406, 911,
	403, 404, 405, 938, 0, 410, 411, 409, 0, 412,
	413, 414, 415, 416, 262, 417, 263, 843, 0, 886,
	887, 888, 889, 0, 0, 420, 421, 939, 422, 940,
	820, 423, 424, 425, 0, 426, 427, 0, 805, 428,
	429, 430, 431, 433, 901, 434, 0, 851, 435, 436,
	437, 485, 883, 929, 0, 439, 438, 488, 0, 0,
	0, 0, 440, 441, 489, 442, 443, 444, 800, 0,
	0, 0, 0, 0, 0, 0, 798, 0, 0, 0,
	0, 796, 797, 0, 0, 0, 0, 0, 0, 0,
	826, 0, 0, 0, 0, 2022, 824, 856, 813, 814,
	815, 811, 812, 825, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 903, 830, 0, 0, 0,
	213, 214, 215, 446, 871, 850, 882, 840, 881, 880,
	0, 219, 842, 841, 222, 223, 224, 832, 902, 225,
	930, 931, 452, 0, 226, 909, 0, 892, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 912, 240, 241, 895,
	893, 894, 899, 897, 896, 898, 242, 243, 244, 245,
	885, 247, 878, 877, 802, 248, 0, 250, 249, 0,
	251, 0, 0, 252, 876, 254, 0, 255, 0, 256,
	257, 0, 808, 258, 259, 261, 264, 260, 265, 266,
	267, 932, 933, 821, 913, 0, 0, 0, 0, 0,
	268, 269, 270, 875, 873, 874, 0, 273, 0, 274,
	0, 0, 914, 275, 276, 0, 277, 934, 0, 831,
	278, 0, 279, 280, 281, 282, 283, 284, 285, 904,
	905, 908, 916, 0, 906, 852, 0, 0, 0, 0,
	286, 288, 295, 0, 915, 289, 864, 855, 866, 868,
	869, 870, 865, 0, 857, 0, 296, 917, 918, 297,
	298, 299, 919, 890, 891, 0, 0, 302, 303, 304,
	305, 0, 307, 306, 0, 308, 935, 920, 309, 310,
	921, 0, 311, 312, 0, 0, 313, 0, 314, 315,
	804, 803, 316, 317, 319, 844, 318, 922, 321, 322,
	324, 323, 799, 0, 923, 822, 907, 879, 325, 326,
	0, 853, 328, 854, 0, 0, 331, 332, 0, 0,
	333, 472, 924, 334, 925, 936, 335, 330, 336, 337,
	338, 339, 340, 341, 0, 342, 937, 343, 475, 344,
	0, 345, 0, 346, 347, 348, 349, 350, 351, 872,
	352, 353, 0, 354, 355, 356, 357, 358, 0, 360,
	361, 362, 359, 363, 364, 365, 366, 0, 367, 926,
	368, 369, 370, 371, 809, 372, 0, 373, 377, 378,
	379, 380, 381, 382, 383, 0, 390, 391, 845, 846,
	848, 849, 385, 389, 392, 393, 900, 394, 374, 375,
	395, 927, 396, 867, 847, 398, 0, 408, 399, 400,
	401, 376, 402, 406, 911, 403, 404, 405, 938, 0,
	410, 411, 409, 0, 412, 413, 414, 415, 416, 262,
	417, 263, 843, 0, 886, 887, 888, 889, 0, 0,
	420, 421, 939, 422, 940, 820, 423, 424, 425, 0,
	426, 427, 0, 805, 428, 429, 430, 431, 433, 901,
	434, 0, 851, 435, 436, 437, 485, 883, 929, 0,
	439, 438, 488, 0, 0, 0, 0, 440, 441, 489,
	442, 443, 444, 800, 0, 0, 0, 0, 0, 0,
	0, 798, 0, 0, 0, 0, 796, 797, 0, 0,
	0, 0, 0, 0, 0, 826, 0, 0, 0, 0,
	2020, 824, 2012, 813, 814, 815, 811, 812, 825, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	208, 209, 210, 211, 0, 212, 0, 0, 0, 0,
	903, 830, 0, 0, 0, 213, 214, 215, 446, 871,
	850, 882, 840, 881, 880, 0, 219, 842, 841, 222,
	223, 224, 832, 902, 225, 930, 931, 452, 0, 226,
	909, 0, 892, 0, 227, 228, 229, 230, 231, 0,
	233, 234, 235, 232, 0, 236, 0, 237, 238, 239,
	0, 912, 240, 241, 895, 893, 894, 899, 897, 896,
	898, 242, 243, 244, 245, 885, 2015, 878, 877, 802,
	248, 0, 250, 249, 0, 251, 0, 0, 252, 876,
	254, 0, 255, 0, 256, 257, 0, 808, 258, 259,
	261, 264, 260, 265, 266, 267, 932, 933, 821, 913,
	0, 0, 0, 0, 0, 268, 269, 270, 875, 873,
	874, 0, 273, 0, 274, 0, 0, 914, 275, 276,
	0, 277, 934, 0, 831, 278, 0, 279, 280, 2016,
	282, 283, 284, 285, 904, 905, 908, 916, 0, 906,
	852, 0, 0, 0, 0, 286, 288, 295, 0, 915,
	289, 864, 855, 866, 868, 869, 870, 865, 0, 857,
	0, 296, 917, 918, 297, 298, 299, 919, 890, 891,
	0, 0, 302, 303, 304, 305, 0, 307, 306, 0,
	308, 935, 920, 309, 310, 921, 0, 311, 312, 0,
	0, 313, 0, 314, 315, 804, 803, 2017, 2014, 319,
	844, 318, 922, 321, 322, 324, 323, 799, 0, 923,
	822, 907, 879, 325, 326, 0, 853, 328, 854, 0,
	0, 331, 332, 0, 0, 333, 472, 924, 334, 925,
	936, 335, 330, 336, 337, 338, 339, 340, 341, 0,
	342, 937, 343, 475, 344, 0, 345, 0, 346, 347,
	348, 349, 350, 351, 872, 352, 353, 0, 354, 355,
	356, 357, 358, 0, 360, 361, 362, 359, 363, 364,
	365, 366, 0, 367, 926, 368, 369, 370, 371, 809,
	372, 0, 373, 377, 378, 379, 380, 381, 382, 2018,
	0, 390, 391, 845, 846, 848, 849, 385, 389, 392,
	393, 900, 394, 374, 375, 395, 927, 396, 867, 847,
	398, 0, 408, 399, 400, 401, 376, 402, 406, 911,
	403, 404, 405, 938, 0, 410, 411, 409, 0, 412,
	413, 414, 415, 416, 262, 417, 263, 843, 0, 886,
	887, 888, 889, 0, 0, 420, 421, 939, 422, 940,
	820, 423, 424, 425, 0, 426, 427, 0, 805, 428,
	429, 430, 431, 433, 901, 434, 0, 851, 435, 436,
	437, 485, 883, 929, 0, 439, 438, 488, 0, 0,
	0, 0, 440, 441, 489, 442, 2013, 444, 800, 0,
	0, 0, 0, 0, 0, 0, 798, 0, 0, 0,
	0, 796, 797, 0, 0, 0, 0, 0, 0, 0,
	826, 0, 0, 0, 0, 2009, 824, 2012, 813, 814,
	815, 811, 812, 825, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 903, 830, 0, 0, 0,
	213, 214, 215, 446, 871, 850, 882, 840, 881, 880,
	0, 219, 842, 841, 222, 223, 224, 832, 902, 225,
	930, 931, 452, 0, 226, 909, 0, 892, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 912, 240, 241, 895,
	893, 894, 899, 897, 896, 898, 242, 243, 244, 245,
	885, 2015, 878, 877, 802, 248, 0, 250, 249, 0,
	251, 0, 0, 252, 876, 254, 0, 255, 0, 256,
	257, 0, 808, 258, 259, 261, 264, 260, 265, 266,
	267, 932, 933, 821, 913, 0, 0, 0, 0, 0,
	268, 269, 270, 875, 873, 874, 0, 273, 0, 274,
	0, 0, 914, 275, 276, 0, 277, 934, 0, 831,
	278, 0, 279, 280, 2016, 282, 283, 284, 285, 904,
	905, 908, 916, 0, 906, 852, 0, 0, 0, 0,
	286, 288, 295, 0, 915, 289, 864, 855, 866, 868,
	869, 870, 865, 0, 857, 0, 296, 917, 918, 297,
	298, 299, 919, 890, 891, 0, 0, 302, 303, 304,
	305, 0, 307, 306, 0, 308, 935, 920, 309, 310,
	921, 0, 311, 312, 0, 0, 313, 0, 314, 315,
	804, 803, 2017, 2014, 319, 844, 318, 922, 321, 322,
	324, 323, 799, 0, 923, 822, 907, 879, 325, 326,
	0, 853, 328, 854, 0, 0, 331, 332, 0, 0,
	333, 472, 924, 334, 925, 936, 335, 330, 336, 337,
	338, 339, 340, 341, 0, 342, 937, 343, 475, 344,
	0, 345, 0, 346, 347, 348, 349, 350, 351, 872,
	352, 353, 0, 354, 355, 356, 357, 358, 0, 360,
	361, 362, 359, 363, 364, 365, 366, 0, 367, 926,
	368, 369, 370, 371, 809, 372, 0, 373, 377, 378,
	379, 380, 381, 382, 2018, 0, 390, 391, 845, 846,
	848, 849, 385, 389, 392, 393, 900, 394, 374, 375,
	395, 927, 396, 867, 847, 398, 0, 408, 399, 400,
	401, 376, 402, 406, 911, 403, 404, 405, 938, 0,
	410, 411, 409, 0, 412, 413, 414, 415, 416, 262,
	417, 263, 843, 0, 886, 887, 888, 889, 0, 0,
	420, 421, 939, 422, 940, 820, 423, 424, 425, 0,
	426, 427, 0, 805, 428, 429, 430, 431, 433, 901,
	434, 0, 851, 435, 436, 437, 485, 883, 929, 0,
	439, 438, 488, 0, 0, 0, 0, 440, 441, 489,
	442, 2013, 444, 800, 0, 0, 0, 0, 0, 0,
	0, 798, 0, 0, 0, 0, 796, 797, 856, 813,
	814, 815, 811, 812, 825, 826, 0, 0, 0, 0,
	0, 824, 0, 0, 0, 207, 208, 209, 210, 211,
	0, 212, 0, 0, 0, 0, 903, 830, 0, 0,
	0, 213, 214, 215, 446, 871, 850, 882, 840, 881,
	880, 0, 219, 842, 841, 222, 223, 224, 832, 902,
	225, 930, 931, 452, 0, 226, 909, 0, 892, 0,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	0, 236, 0, 237, 238, 239, 0, 912, 240, 241,
	895, 893, 894, 899, 897, 896, 898, 242, 243, 244,
	245, 885, 247, 878, 877, 802, 248, 0, 250, 249,
	0, 251, 0, 0, 252, 876, 254, 0, 255, 0,
	256, 257, 0, 808, 258, 259, 261, 264, 260, 265,
	266, 267, 932, 933, 821, 913, 0, 0, 0, 0,
	0, 268, 269, 270, 875, 873, 874, 0, 273, 0,
	274, 0, 0, 914, 275, 276, 0, 277, 934, 0,
	831, 278, 0, 279, 280, 281, 282, 283, 284, 285,
	904, 905, 908, 916, 0, 906, 852, 0, 0, 0,
	0, 286, 288, 295, 0, 915, 289, 864, 855, 866,
	868, 869, 870, 865, 0, 857, 0, 296, 917, 918,
	297, 298, 299, 919, 890, 891, 0, 0, 302, 303,
	304, 305, 0, 307, 306, 0, 308, 935, 920, 309,
	310, 921, 0, 311, 312, 0, 0, 313, 0, 314,
	315, 804, 803, 316, 317, 319, 844, 318, 922, 321,
	322, 324, 323, 799, 0, 923, 822, 907, 879, 325,
	326, 0, 853, 328, 854, 0, 0, 331, 332, 0,
	0, 333, 472, 924, 334, 925, 936, 335, 330, 336,
	337, 338, 339, 340, 341, 0, 342, 937, 343, 475,
	344, 0, 345, 0, 346, 347, 348, 349, 350, 351,
	872, 352, 353, 0, 354, 355, 356, 357, 358, 0,
	360, 361, 362, 359, 363, 364, 365, 366, 0, 367,
	926, 368, 369, 370, 371, 809, 372, 0, 373, 377,
	378, 379, 380, 381, 382, 383, 0, 390, 391, 845,
	846, 848, 849, 385, 389, 392, 393, 900, 394, 374,
	375, 395, 927, 396, 867, 847, 398, 0, 408, 399,
	400, 401, 376, 402, 406, 911, 403, 404, 405, 938,
	0, 410, 411, 409, 0, 412, 413, 414, 415, 416,
	262, 417, 263, 843, 0, 886, 887, 888, 889, 0,
	0, 420, 421, 939, 422, 940, 820, 423, 424, 425,
	0, 426, 427, 0, 805, 428, 429, 430, 431, 433,
	901, 434, 0, 851, 435, 436, 437, 485, 883, 929,
	0, 439, 438, 488, 0, 0, 0, 0, 440, 441,
	489, 442, 443, 444, 800, 0, 0, 0, 0, 0,
	0, 0, 798, 0, 0, 0, 0, 796, 797, 0,
	0, 0, 0, 0, 1471, 0, 826, 0, 0, 0,
	0, 0, 824, 856, 813, 814, 815, 811, 812, 825,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 1856, 212, 0, 0, 0,
	0, 903, 830, 0, 0, 0, 213, 214, 215, 446,
	871, 850, 882, 840, 881, 880, 0, 219, 842, 841,
	222, 223, 224, 832, 902, 225, 930, 931, 452, 0,
	226, 909, 0, 892, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 912, 240, 241, 895, 893, 894, 899, 897,
	896, 898, 242, 243, 244, 245, 885, 247, 878, 877,
	802, 248, 0, 250, 249, 0, 251, 0, 0, 252,
	876, 254, 0, 255, 0, 256, 257, 0, 808, 258,
	259, 261, 264, 260, 265, 266, 267, 932, 933, 821,
	913, 0, 0, 0, 0, 0, 268, 269, 270, 875,
	873, 874, 0, 273, 0, 274, 0, 0, 914, 275,
	276, 0, 277, 934, 0, 831, 278, 0, 279, 280,
	281, 282, 283, 284, 285, 904, 905, 908, 916, 0,
	906, 852, 0, 0, 0, 0, 286, 288, 295, 0,
	915, 289, 864, 855, 866, 868, 869, 870, 865, 0,
	857, 0, 296, 917, 918, 297, 298, 299, 919, 890,
	891, 0, 0, 302, 303, 304, 305, 0, 307, 306,
	0, 308, 935, 920, 309, 310, 921, 0, 311, 312,
	0, 0, 313, 0, 314, 315, 804, 803, 316, 317,
	319, 844, 318, 922, 321, 322, 324, 323, 799, 0,
	923, 822, 907, 879, 325, 326, 0, 853, 328, 854,
	0, 0, 331, 332, 0, 0, 333, 472, 924, 334,
	925, 936, 335, 330, 336, 337, 338, 339, 340, 341,
	0, 342, 937, 343, 475, 344, 0, 345, 0, 346,
	347, 348, 349, 350, 351, 872, 352, 353, 0, 354,
	355, 356, 357, 358, 0, 360, 361, 362, 359, 363,
	364, 365, 366, 0, 367, 926, 368, 369, 370, 371,
	809, 372, 0, 373, 377, 378, 379, 380, 381, 382,
	383, 0, 390, 391, 845, 846, 848, 849, 385, 389,
	392, 393, 900, 394, 374, 375, 395, 927, 396, 867,
	847, 398, 0, 408, 399, 400, 401, 376, 402, 406,
	911, 403, 404, 405, 938, 0, 410, 411, 409, 0,
	412, 413, 414, 415, 416, 262, 417, 263, 843, 0,
	886, 887, 888, 889, 0, 0, 420, 421, 939, 422,
	940, 820, 423, 424, 425, 0, 426, 427, 0, 805,
	428, 429, 430, 431, 433, 901, 434, 0, 851, 435,
	436, 437, 485, 883, 929, 0, 439, 438, 488, 0,
	0, 0, 0, 440, 441, 489, 442, 443, 444, 800,
	0, 0, 0, 0, 0, 0, 0, 798, 0, 0,
	0, 0, 796, 797, 0, 0, 0, 0, 0, 0,
	0, 826, 0, 0, 0, 0, 1168, 824, 856, 813,
	814, 815, 811, 812, 825, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 208, 209, 210, 211,
	0, 212, 0, 0, 0, 0, 903, 830, 0, 0,
	0, 213, 214, 215, 446, 871, 850, 882, 840, 881,
	880, 0, 219, 842, 841, 222, 223, 224, 832, 902,
	225, 930, 931, 452, 0, 226, 909, 0, 892, 0,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	0, 236, 0, 237, 238, 239, 0, 912, 240, 241,
	895, 893, 894, 899, 897, 896, 898, 242, 243, 244,
	245, 885, 247, 878, 877, 802, 248, 0, 250, 249,
	0, 251, 0, 0, 252, 876, 254, 0, 255, 0,
	256, 257, 0, 808, 258, 259, 261, 264, 260, 265,
	266, 267, 932, 933, 821, 913, 0, 0, 0, 0,
	0, 268, 269, 270, 875, 873, 874, 0, 273, 0,
	274, 0, 0, 914, 275, 276, 0, 277, 934, 0,
	831, 278, 0, 279, 280, 281, 282, 283, 284, 285,
	1167, 905, 908, 916, 0, 906, 852, 0, 0, 0,
	0, 286, 288, 295, 0, 915, 289, 864, 855, 866,
	868, 869, 870, 865, 0, 857, 0, 296, 917, 918,
	297, 298, 299, 919, 890, 891, 0, 0, 302, 303,
	304, 305, 0, 307, 306, 0, 308, 935, 920, 309,
	310, 921, 0, 311, 312, 0, 0, 313, 0, 314,
	315, 804, 803, 316, 317, 319, 844, 318, 922, 321,
	322, 324, 323, 799, 0, 923, 822, 907, 879, 325,
	326, 0, 853, 328, 854, 0, 0, 331, 332, 0,
	0, 333, 472, 924, 334, 925, 936, 335, 330, 336,
	337, 338, 339, 340, 341, 0, 342, 937, 343, 475,
	344, 0, 345, 0, 346, 347, 348, 349, 350, 351,
	872, 352, 353, 0, 354, 355, 356, 357, 358, 0,
	360, 361, 362, 359, 363, 364, 365, 366, 0, 367,
	926, 368, 369, 370, 371, 809, 372, 0, 373, 377,
	378, 379, 380, 381, 382, 383, 0, 390, 391, 845,
	846, 848, 849, 385, 389, 392, 393, 900, 394, 374,
	375, 395, 927, 396, 867, 847, 398, 0, 408, 399,
	400, 401, 376, 402, 406, 911, 403, 404, 405, 938,
	0, 410, 411, 409, 0, 412, 413, 414, 415, 416,
	262, 417, 263, 843, 0, 886, 887, 888, 889, 0,
	0, 420, 421, 939, 422, 940, 820, 423, 424, 425,
	0, 426, 427, 0, 805, 428, 429, 430, 431, 433,
	901, 434, 0, 851, 435, 436, 437, 485, 883, 929,
	0, 439, 438, 488, 0, 0, 0, 0, 440, 441,
	489, 442, 443, 444, 800, 0, 0, 0, 0, 0,
	0, 0, 798, 0, 0, 0, 0, 796, 797, 0,
	0, 0, 0, 0, 0, 0, 826, 0, 0, 0,
	0, 1162, 824, 856, 813, 814, 815, 811, 812, 825,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 903, 830, 0, 0, 0, 213, 214, 215, 446,
	871, 850, 882, 840, 881, 880, 0, 219, 842, 841,
	222, 223, 224, 832, 902, 225, 930, 931, 452, 0,
	226, 909, 0, 892, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 912, 240, 241, 895, 893, 894, 899, 897,
	896, 898, 242, 243, 244, 245, 885, 247, 878, 877,
	802, 248, 0, 250, 249, 0, 251, 0, 0, 252,
	876, 254, 0, 255, 0, 256, 257, 0, 808, 258,
	259, 261, 264, 260, 265, 266, 267, 932, 933, 821,
	913, 0, 0, 0, 0, 0, 268, 269, 270, 875,
	873, 874, 0, 273, 0, 274, 0, 0, 914, 275,
	276, 0, 277, 934, 0, 831, 278, 0, 279, 280,
	281, 282, 283, 284, 285, 1161, 905, 908, 916, 0,
	906, 852, 0, 0, 0, 0, 286, 288, 295, 0,
	915, 289, 864, 855, 866, 868, 869, 870, 865, 0,
	857, 0, 296, 917, 918, 297, 298, 299, 919, 890,
	891, 0, 0, 302, 303, 304, 305, 0, 307, 306,
	0, 308, 935, 920, 309, 310, 921, 0, 311, 312,
	0, 0, 313, 0, 314, 315, 804, 803, 316, 317,
	319, 844, 318, 922, 321, 322, 324, 323, 799, 0,
	923, 822, 907, 879, 325, 326, 0, 853, 328, 854,
	0, 0, 331, 332, 0, 0, 333, 472, 924, 334,
	925, 936, 335, 330, 336, 337, 338, 339, 340, 341,
	0, 342, 937, 343, 475, 344, 0, 345, 0, 346,
	347, 348, 349, 350, 351, 872, 352, 353, 0, 354,
	355, 356, 357, 358, 0, 360, 361, 362, 359, 363,
	364, 365, 366, 0, 367, 926, 368, 369, 370, 371,
	809, 372, 0, 373, 377, 378, 379, 380, 381, 382,
	383, 0, 390, 391, 845, 846, 848, 849, 385, 389,
	392, 393, 900, 394, 374, 375, 395, 927, 396, 867,
	847, 398, 0, 408, 399, 400, 401, 376, 402, 406,
	911, 403, 404, 405, 938, 0, 410, 411, 409, 0,
	412, 413, 414, 415, 416, 262, 417, 263, 843, 0,
	886, 887, 888, 889, 0, 0, 420, 421, 939, 422,
	940, 820, 423, 424, 425, 0, 426, 427, 0, 805,
	428, 429, 430, 431, 433, 901, 434, 0, 851, 435,
	436, 437, 485, 883, 929, 0, 439, 438, 488, 0,
	0, 0, 0, 440, 441, 489, 442, 443, 444, 800,
	0, 0, 0, 0, 0, 0, 0, 798, 0, 0,
	0, 0, 796, 797, 0, 0, 0, 0, 0, 0,
	0, 826, 0, 0, 0, 0, 1157, 824, 856, 813,
	814, 815, 811, 812, 825, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 208, 209, 210, 211,
	0, 212, 0, 0, 0, 0, 903, 830, 0, 0,
	0, 213, 214, 215, 446, 871, 850, 882, 840, 881,
	880, 0, 219, 842, 841, 222, 223, 224, 832, 902,
	225, 930, 931, 452, 0, 226, 909, 0, 892, 0,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	0, 236, 0, 237, 238, 239, 0, 912, 240, 241,
	895, 893, 894, 899, 897, 896, 898, 242, 243, 244,
	245, 885, 247, 878, 877, 802, 248, 0, 250, 249,
	0, 251, 0, 0, 252, 876, 254, 0, 255, 0,
	256, 257, 0, 808, 258, 259, 261, 264, 260, 265,
	266, 267, 932, 933, 821, 913, 0, 0, 0, 0,
	0, 268, 269, 270, 875, 873, 874, 0, 273, 0,
	274, 0, 0, 914, 275, 276, 0, 277, 934, 0,
	831, 278, 0, 279, 280, 281, 282, 283, 284, 285,
	904, 905, 908, 916, 0, 906, 852, 0, 0, 0,
	0, 286, 288, 295, 0, 915, 289, 864, 855, 866,
	868, 869, 870, 865, 0, 857, 0, 296, 917, 918,
	297, 298, 299, 919, 890, 891, 0, 0, 302, 303,
	304, 305, 0, 307, 306, 0, 308, 935, 920, 309,
	310, 921, 0, 311, 312, 0, 0, 313, 0, 314,
	315, 804, 803, 316, 317, 319, 844, 318, 922, 321,
	322, 324, 323, 799, 0, 923, 822, 907, 879, 325,
	326, 0, 853, 328, 854, 0, 0, 331, 332, 0,
	0, 333, 472, 924, 334, 925, 936, 335, 330, 336,
	337, 338, 339, 340, 341, 0, 342, 937, 343, 475,
	344, 0, 345, 0, 346, 347, 348, 349, 350, 351,
	872, 352, 353, 0, 354, 355, 356, 357, 358, 0,
	360, 361, 362, 359, 363, 364, 365, 366, 0, 367,
	926, 368, 369, 370, 371, 809, 372, 0, 373, 377,
	378, 379, 380, 381, 382, 383, 0, 390, 391, 845,
	846, 848, 849, 385, 389, 392, 393, 900, 394, 374,
	375, 395, 927, 396, 867, 847, 398, 0, 408, 399,
	400, 401, 376, 402, 406, 911, 403, 404, 405, 938,
	0, 410, 411, 409, 0, 412, 413, 414, 415, 416,
	262, 417, 263, 843, 0, 886, 887, 888, 889, 0,
	0, 420, 421, 939, 422, 940, 820, 423, 424, 425,
	0, 426, 427, 0, 805, 428, 429, 430, 431, 433,
	901, 434, 0, 851, 435, 436, 437, 485, 883, 929,
	0, 439, 438, 488, 0, 0, 0, 0, 440, 441,
	489, 442, 443, 444, 800, 0, 0, 0, 0, 0,
	0, 0, 798, 0, 0, 0, 0, 796, 797, 856,
	813, 814, 815, 811, 812, 825, 826, 0, 0, 0,
	0, 0, 824, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 903, 830, 0,
	0, 0, 213, 214, 215, 446, 871, 850, 882, 840,
	881, 880, 0, 219, 842, 841, 222, 223, 224, 832,
	902, 225, 930, 931, 452, 0, 226, 909, 0, 892,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 912, 240,
	241, 895, 893, 894, 899, 897, 896, 898, 242, 243,
	244, 245, 885, 247, 878, 877, 802, 248, 0, 250,
	249, 0, 251, 0, 0, 252, 876, 254, 0, 255,
	0, 256, 257, 0, 808, 258, 259, 261, 264, 260,
	265, 266, 267, 932, 933, 821, 913, 0, 0, 0,
	0, 0, 268, 269, 270, 875, 873, 874, 0, 273,
	0, 274, 0, 0, 914, 275, 276, 0, 277, 934,
	0, 831, 278, 0, 279, 280, 281, 282, 283, 284,
	285, 904, 905, 908, 916, 0, 906, 852, 0, 0,
	0, 0, 286, 288, 295, 0, 915, 289, 864, 855,
	866, 868, 869, 870, 865, 0, 857, 0, 296, 917,
	918, 297, 298, 299, 919, 890, 891, 0, 0, 302,
	303, 304, 305, 0, 307, 306, 0, 308, 935, 920,
	309, 310, 921, 0, 311, 312, 0, 0, 313, 0,
	314, 315, 804, 803, 316, 317, 319, 844, 318, 922,
	321, 322, 324, 323, 799, 0, 923, 822, 907, 879,
	325, 326, 0, 853, 328, 854, 0, 0, 331, 332,
	0, 0, 333, 472, 924, 334, 925, 936, 335, 330,
	336, 337, 338, 339, 340, 341, 0, 342, 937, 343,
	475, 344, 0, 345, 0, 346, 347, 348, 349, 350,
	351, 872, 352, 353, 0, 354, 355, 356, 357, 358,
	0, 360, 361, 362, 359, 363, 364, 365, 366, 0,
	367, 926, 368, 369, 370, 371, 809, 372, 0, 373,
	377, 378, 379, 380, 381, 382, 383, 0, 390, 391,
	845, 846, 848, 849, 385, 389, 392, 393, 900, 394,
	374, 375, 395, 927, 396, 867, 847, 398, 0, 408,
	399, 400, 401, 376, 402, 406, 911, 403, 404, 405,
	938, 0, 410, 411, 409, 0, 412, 413, 414, 415,
	416, 262, 417, 263, 843, 0, 886, 887, 888, 889,
	0, 0, 420, 421, 939, 422, 940, 820, 423, 424,
	425, 0, 426, 427, 0, 805, 428, 429, 430, 431,
	433, 901, 434, 0, 851, 435, 436, 437, 485, 883,
	929, 0, 439, 438, 488, 0, 0, 0, 0, 440,
	441, 489, 442, 443, 444, 800, 0, 0, 0, 0,
	0, 0, 0, 798, 0, 0, 0, 0, 796, 797,
	856, 813, 814, 815, 811, 812, 825, 826, 0, 0,
	0, 0, 0, 824, 0, 0, 0, 207, 208, 209,
	210, 211, 0, 212, 0, 0, 0, 0, 903, 830,
	0, 0, 0, 213, 214, 215, 446, 871, 850, 882,
	840, 881, 880, 0, 219, 842, 841, 222, 223, 224,
	832, 902, 225, 930, 931, 452, 0, 226, 909, 0,
	892, 0, 227, 228, 229, 230, 231, 0, 233, 234,
	235, 232, 0, 236, 0, 237, 238, 239, 0, 912,
	240, 3252, 895, 893, 894, 899, 897, 896, 898, 242,
	243, 244, 245, 885, 247, 878, 877, 802, 248, 0,
	250, 249, 0, 251, 0, 0, 252, 876, 254, 0,
	255, 0, 256, 257, 0, 808, 258, 259, 261, 264,
	260, 265, 266, 267, 932, 933, 821, 913, 0, 0,
	0, 0, 0, 268, 269, 270, 875, 873, 874, 0,
	273, 0, 274, 0, 0, 914, 275, 276, 0, 277,
	934, 0, 831, 278, 0, 279, 280, 281, 282, 283,
	284, 285, 904, 905, 908, 916, 0, 906, 852, 0,
	0, 0, 0, 286, 288, 295, 0, 915, 289, 864,
	855, 866, 868, 869, 870, 865, 0, 857, 0, 296,
	917, 918, 297, 298, 299, 919, 890, 891, 0, 0,
	302, 303, 304, 305, 0, 307, 306, 0, 308, 935,
	920, 309, 310, 921, 0, 311, 312, 0, 0, 313,
	0, 314, 315, 804, 803, 316, 317, 319, 844, 318,
	922, 321, 322, 324, 323, 799, 0, 923, 822, 907,
	879, 325, 326, 0, 853, 328, 854, 0, 0, 331,
	332, 0, 0, 333, 472, 924, 334, 925, 936, 335,
	330, 336, 337, 338, 339, 340, 341, 0, 342, 937,
	343, 475, 344, 0, 345, 0, 346, 347, 348, 349,
	350, 351, 872, 352, 353, 0, 354, 355, 356, 357,
	358, 0, 360, 361, 362, 359, 363, 364, 365, 366,
	0, 367, 926, 368, 369, 370, 371, 809, 372, 0,
	373, 377, 378, 379, 380, 381, 382, 383, 0, 390,
	391, 845, 846, 848, 849, 385, 389, 392, 393, 900,
	394, 374, 375, 395, 927, 396, 867, 847, 398, 0,
	408, 399, 400, 401, 376, 402, 406, 911, 403, 404,
	405, 938, 0, 410, 411, 409, 0, 412, 413, 414,
	415, 416, 262, 417, 263, 843, 0, 886, 887, 888,
	889, 0, 0, 420, 421, 939, 422, 940, 820, 423,
	424, 425, 0, 3251, 427, 0, 805, 428, 429, 430,
	431, 433, 901, 434, 0, 851, 435, 436, 437, 485,
	883, 929, 0, 439, 438, 488, 0, 0, 0, 0,
	440, 441, 489, 442, 443, 444, 800, 0, 0, 0,
	0, 0, 0, 0, 798, 0, 0, 0, 0, 796,
	797, 856, 813, 814, 815, 811, 812, 825, 826, 0,
	0, 0, 0, 0, 824, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 903,
	830, 0, 0, 0, 213, 214, 215, 3250, 871, 850,
	882, 840, 881, 880, 0, 219, 842, 841, 222, 223,
	224, 832, 902, 225, 930, 931, 452, 0, 226, 909,
	0, 892, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	912, 240, 3252, 895, 893, 894, 899, 897, 896, 898,
	242, 243, 244, 245, 885, 247, 878, 877, 802, 248,
	0, 250, 249, 0, 251, 0, 0, 252, 876, 254,
	0, 255, 0, 256, 257, 0, 808, 258, 259, 261,
	264, 260, 265, 266, 267, 932, 933, 821, 913, 0,
	0, 0, 0, 0, 268, 269, 270, 875, 873, 874,
	0, 273, 0, 274, 0, 0, 914, 275, 276, 0,
	277, 934, 0, 831, 278, 0, 279, 280, 281, 282,
	283, 284, 285, 904, 905, 908, 916, 0, 906, 852,
	0, 0, 0, 0, 286, 288, 295, 0, 915, 289,
	864, 855, 866, 868, 869, 870, 865, 0, 857, 0,
	296, 917, 918, 297, 298, 299, 919, 890, 891, 0,
	0, 302, 303, 304, 305, 0, 307, 306, 0, 308,
	935, 920, 309, 310, 921, 0, 311, 312, 0, 0,
	313, 0, 314, 315, 804, 803, 316, 317, 319, 844,
	318, 922, 321, 322, 324, 323, 799, 0, 923, 822,
	907, 879, 325, 326, 0, 853, 328, 854, 0, 0,
	331, 332, 0, 0, 333, 472, 924, 334, 925, 936,
	335, 330, 336, 337, 338, 339, 340, 341, 0, 342,
	937, 343, 475, 344, 0, 345, 0, 346, 347, 348,
	349, 350, 351, 872, 352, 353, 0, 354, 355, 356,
	357, 358, 0, 360, 361, 362, 359, 363, 364, 365,
	366, 0, 367, 926, 368, 369, 370, 371, 809, 372,
	0, 373, 377, 378, 379, 380, 381, 382, 383, 0,
	390, 391, 845, 846, 848, 849, 385, 389, 392, 393,
	900, 394, 374, 375, 395, 927, 396, 867, 847, 398,
	0, 408, 399, 400, 401, 376, 402, 406, 911, 403,
	404, 405, 938, 0, 410, 411, 409, 0, 412, 413,
	414, 415, 416, 262, 417, 263, 843, 0, 886, 887,
	888, 889, 0, 0, 420, 421, 939, 422, 940, 820,
	423, 424, 425, 0, 3251, 427, 0, 805, 428, 429,
	430, 431, 433, 901, 434, 0, 851, 435, 436, 437,
	485, 883, 929, 0, 439, 438, 488, 0, 0, 0,
	0, 440, 441, 489, 442, 443, 444, 800, 0, 0,
	0, 0, 0, 0, 0, 798, 0, 0, 0, 0,
	796, 797, 856, 813, 814, 815, 811, 812, 825, 826,
	0, 0, 0, 0, 0, 824, 0, 0, 0, 207,
	208, 209, 210, 211, 0, 212, 0, 0, 0, 0,
	903, 830, 0, 0, 0, 213, 214, 215, 446, 871,
	850, 882, 840, 881, 880, 0, 219, 842, 841, 222,
	223, 224, 832, 902, 225, 930, 931, 452, 0, 226,
	909, 0, 892, 0, 227, 228, 229, 230, 231, 0,
	233, 234, 235, 232, 0, 236, 0, 237, 238, 239,
	0, 912, 240, 241, 895, 893, 894, 899, 897, 896,
	898, 242, 243, 244, 245, 885, 247, 878, 877, 0,
	248, 0, 250, 249, 0, 251, 0, 0, 252, 876,
	254, 0, 255, 0, 256, 257, 0, 808, 258, 259,
	261, 264, 260, 265, 266, 267, 932, 933, 821, 913,
	0, 0, 0, 0, 0, 268, 269, 270, 875, 873,
	874, 0, 273, 0, 274, 0, 0, 914, 275, 276,
	0, 277, 934, 0, 831, 278, 0, 279, 280, 281,
	282, 283, 284, 285, 904, 905, 908, 916, 0, 906,
	852, 0, 0, 0, 0, 286, 288, 295, 0, 915,
	289, 864, 855, 866, 868, 869, 870, 865, 0, 857,
	0, 296, 917, 918, 297, 298, 299, 919, 890, 891,
	0, 0, 302, 303, 304, 305, 0, 307, 306, 0,
	308, 935, 920, 309, 310, 921, 0, 311, 312, 0,
	0, 313, 0, 314, 315, 978, 977, 316, 317, 319,
	844, 318, 922, 321, 322, 324, 323, 0, 0, 923,
	822, 907, 879, 325, 326, 0, 853, 328, 854, 0,
	0, 331, 332, 0, 0, 333, 472, 924, 334, 925,
	936, 335, 330, 336, 337, 338, 339, 340, 341, 0,
	342, 937, 343, 475, 344, 0, 345, 0, 346, 347,
	348, 349, 350, 351, 872, 352, 353, 0, 354, 355,
	356, 357, 358, 0, 360, 361, 362, 359, 363, 364,
	365, 366, 0, 367, 926, 368, 369, 370, 371, 809,
	372, 0, 373, 377, 378, 379, 380, 381, 382, 383,
	0, 390, 391, 845, 846, 848, 849, 385, 389, 392,
	393, 900, 394, 374, 375, 395, 927, 396, 867, 847,
	398, 0, 408, 399, 400, 401, 376, 402, 406, 911,
	403, 404, 405, 938, 0, 410, 411, 409, 0, 412,
	413, 414, 415, 416, 262, 417, 263, 843, 0, 886,
	887, 888, 889, 0, 0, 420, 421, 939, 422, 940,
	820, 423, 424, 425, 0, 426, 427, 0, 0, 428,
	429, 430, 431, 433, 901, 434, 0, 851, 435, 436,
	437, 485, 883, 929, 0, 439, 438, 488, 0, 0,
	0, 0, 440, 441, 489, 442, 443, 444, 0, 0,
	0, 0, 0, 0, 0, 0, 2034, 0, 0, 0,
	0, 2032, 2033, 856, 813, 814, 815, 811, 812, 825,
	826, 0, 0, 0, 0, 0, 824, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 903, 830, 0, 0, 0, 213, 214, 215, 0,
	871, 850, 882, 840, 881, 880, 0, 219, 842, 841,
	222, 223, 224, 832, 902, 225, 930, 931, 452, 0,
	226, 909, 0, 892, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 912, 240, 3252, 895, 893, 894, 899, 897,
	896, 898, 242, 243, 244, 245, 885, 247, 878, 877,
	802, 248, 0, 250, 249, 0, 251, 0, 0, 252,
	876, 254, 0, 255, 0, 256, 257, 0, 808, 258,
	259, 261, 264, 260, 265, 266, 267, 932, 933, 821,
	913, 0, 0, 0, 0, 0, 268, 269, 270, 875,
	873, 874, 0, 273, 0, 274, 0, 0, 914, 275,
	276, 0, 277, 934, 0, 831, 278, 0, 279, 280,
	281, 282, 283, 284, 285, 904, 905, 908, 0, 0,
	906, 852, 0, 0, 0, 0, 286, 288, 295, 0,
	915, 289, 864, 855, 866, 868, 869, 870, 865, 0,
	857, 0, 296, 0, 0, 297, 298, 299, 919, 890,
	891, 0, 0, 302, 303, 304, 305, 0, 307, 306,
	0, 308, 935, 920, 309, 310, 0, 0, 311, 312,
	0, 0, 313, 0, 314, 315, 804, 803, 316, 317,
	319, 844, 318, 922, 321, 322, 324, 323, 799, 0,
	0, 822, 907, 879, 325, 326, 0, 853, 328, 854,
	0, 0, 331, 332, 0, 0, 333, 472, 924, 334,
	925, 936, 335, 330, 336, 337, 338, 339, 340, 341,
	0, 342, 937, 343, 475, 344, 0, 345, 0, 346,
	347, 348, 349, 350, 351, 872, 352, 353, 0, 354,
	355, 356, 357, 358, 0, 360, 361, 362, 359, 363,
	364, 365, 366, 0, 367, 926, 368, 369, 370, 371,
	809, 372, 0, 373, 377, 378, 379, 380, 381, 382,
	383, 0, 390, 391, 845, 846, 848, 849, 385, 389,
	392, 393, 900, 394, 374, 375, 395, 0, 396, 867,
	847, 398, 0, 408, 399, 400, 401, 376, 402, 406,
	911, 403, 404, 405, 938, 0, 410, 411, 409, 0,
	412, 413, 414, 415, 416, 262, 417, 263, 843, 0,
	886, 887, 888, 889, 0, 0, 420, 421, 939, 422,
	940, 820, 423, 424, 425, 0, 3251, 427, 0, 805,
	428, 429, 430, 431, 433, 901, 434, 0, 851, 435,
	436, 437, 485, 883, 929, 0, 439, 438, 488, 0,
	0, 0, 0, 440, 441, 489, 442, 443, 444, 0,
	0, 0, 0, 789, 0, 976, 0, 0, 0, 0,
	0, 0, 796, 797, 0, 0, 0, 0, 0, 0,
	0, 826, 207, 208, 209, 210, 211, 824, 212, 0,
	0, 0, 0, 903, 0, 0, 0, 0, 213, 214,
	215, 446, 447, 216, 448, 217, 218, 449, 0, 219,
	220, 221, 222, 223, 224, 0, 902, 225, 450, 451,
	452, 0, 226, 909, 0, 892, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 912, 240, 241, 895, 893, 894,
	899, 897, 896, 898, 242, 243, 244, 245, 246, 247,
	454, 455, 0, 248, 0, 250, 249, 0, 251, 0,
	0, 252, 253, 254, 0, 255, 0, 256, 257, 0,
	456, 258, 259, 261, 264, 260, 265, 266, 267, 932,
	933, 0, 913, 0, 0, 0, 0, 0, 268, 269,
	270, 459, 271, 272, 0, 273, 0, 274, 0, 0,
	914, 275, 276, 0, 277, 934, 0, 461, 278, 0,
	279, 280, 281, 282, 283, 284, 285, 904, 905, 908,
	916, 0, 906, 287, 0, 0, 0, 0, 286, 288,
	295, 0, 915, 289, 465, 291, 290, 292, 293, 294,
	466, 0, 467, 0, 296, 917, 918, 297, 298, 299,
	919, 300, 301, 0, 0, 302, 303, 304, 305, 963,
	307, 306, 0, 308, 935, 920, 309, 310, 921, 0,
	311, 312, 0, 0, 313, 0, 314, 315, 978, 977,
	316, 317, 319, 320, 318, 922, 321, 322, 324, 323,
	0, 0, 923, 0, 907, 471, 325, 326, 0, 327,
	328, 329, 0, 968, 331, 332, 0, 0, 333, 472,
	924, 334, 925, 936, 335, 330, 336, 337, 338, 339,
	340, 341, 0, 342, 937, 343, 475, 344, 0, 345,
	0, 346, 347, 348, 349, 350, 351, 476, 352, 353,
	0, 354, 355, 356, 357, 358, 0, 360, 361, 362,
	359, 363, 364, 365, 366, 0, 367, 926, 368, 369,
	370, 371, 477, 970, 0, 373, 377, 378, 379, 380,
	381, 382, 383, 176, 390, 391, 384, 386, 387, 388,
	385, 389, 392, 393, 900, 394, 374, 375, 395, 927,
	396, 478, 397, 398, 0, 408, 399, 400, 401, 376,
	402, 406, 407, 403, 404, 405, 938, 0, 410, 411,
	409, 178, 412, 413, 414, 415, 416, 262, 417, 263,
	418, 0, 480, 481, 482, 419, 0, 0, 420, 421,
	939, 422, 940, 0, 423, 424, 425, 0, 426, 427,
	0, 0, 428, 429, 430, 431, 433, 901, 434, 0,
	432, 435, 436, 437, 1278, 486, 487, 0, 439, 438,
	488, 976, 0, 0, 170, 440, 441, 489, 442, 443,
	444, 0, 171, 0, 0, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 903,
	0, 960, 0, 1546, 213, 214, 215, 446, 447, 216,
	448, 217, 218, 449, 0, 219, 220, 221, 222, 223,
	224, 0, 902, 225, 450, 451, 452, 0, 226, 909,
	0, 892, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	912, 240, 241, 895, 893, 894, 899, 897, 896, 898,
	242, 243, 244, 245, 246, 247, 454, 455, 0, 248,
	0, 250, 249, 0, 251, 0, 0, 252, 253, 254,
	0, 255, 0, 256, 257, 0, 456, 258, 259, 261,
	264, 260, 265, 266, 267, 932, 933, 0, 913, 0,
	0, 0, 0, 0, 268, 269, 270, 459, 271, 272,
	0, 273, 0, 274, 0, 0, 914, 275, 276, 0,
	277, 934, 0, 461, 278, 0, 279, 280, 281, 282,
	283, 284, 285, 904, 905, 908, 916, 0, 906, 287,
	0, 0, 0, 0, 286, 288, 295, 0, 915, 289,
	465, 291, 290, 292, 293, 294, 466, 0, 467, 0,
	296, 917, 918, 297, 298, 299, 919, 300, 301, 0,
	0, 302, 303, 304, 305, 963, 307, 306, 0, 308,
	935, 920, 309, 310, 921, 0, 311, 312, 0, 0,
	313, 0, 314, 315, 978, 977, 316, 317, 319, 320,
	318, 922, 321, 322, 324, 323, 0, 0, 923, 0,
	907, 471, 325, 326, 0, 327, 328, 329, 0, 968,
	331, 332, 0, 0, 333, 472, 924, 334, 925, 936,
	335, 330, 336, 337, 338, 339, 340, 341, 0, 342,
	937, 343, 475, 344, 0, 345, 0, 346, 347, 348,
	349, 350, 351, 476, 352, 353, 0, 354, 355, 356,
	357, 358, 0, 360, 361, 362, 359, 363, 364, 365,
	366, 0, 367, 926, 368, 369, 370, 371, 477, 970,
	0, 373, 377, 378, 379, 380, 381, 382, 383, 176,
	390, 391, 384, 386, 387, 388, 385, 389, 392, 393,
	900, 394, 374, 375, 395, 927, 396, 478, 397, 398,
	0, 408, 399, 400, 401, 376, 402, 406, 407, 403,
	404, 405, 938, 0, 410, 411, 409, 178, 412, 413,
	414, 415, 416, 262, 417, 263, 418, 0, 480, 481,
	482, 419, 0, 0, 420, 421, 939, 422, 940, 0,
	423, 424, 425, 0, 426, 427, 0, 0, 428, 429,
	430, 431, 433, 901, 434, 0, 432, 435, 436, 437,
	1278, 486, 487, 0, 439, 438, 488, 0, 0, 0,
	170, 440, 441, 489, 442, 443, 444, 0, 171, 0,
	0, 2443, 0, 976, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 960, 0, 1546,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 903, 0, 0, 0, 0, 213, 214, 215, 446,
	447, 216, 448, 217, 218, 449, 0, 219, 220, 221,
	222, 223, 224, 0, 902, 225, 450, 451, 452, 0,
	226, 909, 0, 892, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 912, 240, 241, 895, 893, 894, 899, 897,
	896, 898, 242, 243, 244, 245, 246, 247, 454, 455,
	0, 248, 0, 250, 249, 0, 251, 0, 0, 252,
	253, 254, 0, 255, 0, 256, 257, 0, 456, 258,
	259, 261, 264, 260, 265, 266, 267, 932, 933, 0,
	913, 0, 0, 0, 0, 0, 268, 269, 270, 459,
	271, 272, 0, 273, 0, 274, 0, 0, 914, 275,
	276, 0, 277, 934, 0, 461, 278, 0, 279, 280,
	281, 282, 283, 284, 285, 904, 905, 908, 916, 0,
	906, 287, 0, 0, 0, 0, 286, 288, 295, 0,
	915, 289, 465, 291, 290, 292, 293, 294, 466, 0,
	467, 0, 296, 917, 918, 297, 298, 299, 919, 300,
	301, 0, 0, 302, 303, 304, 305, 963, 307, 306,
	0, 308, 935, 920, 309, 310, 921, 0, 311, 312,
	0, 0, 313, 0, 314, 315, 978, 977, 316, 317,
	319, 320, 318, 922, 321, 322, 324, 323, 0, 0,
	923, 0, 907, 471, 325, 326, 0, 327, 328, 329,
	0, 968, 331, 332, 0, 0, 333, 472, 924, 334,
	925, 936, 335, 330, 336, 337, 338, 339, 340, 341,
	0, 342, 937, 343, 475, 344, 0, 345, 0, 346,
	347, 348, 349, 350, 351, 476, 352, 353, 0, 354,
	355, 356, 357, 358, 0, 360, 361, 362, 359, 363,
	364, 365, 366, 0, 367, 926, 368, 369, 370, 371,
	477, 970, 0, 373, 377, 378, 379, 380, 381, 382,
	383, 0, 390, 391, 384, 386, 387, 388, 385, 389,
	392, 393, 900, 394, 374, 375, 395, 927, 396, 478,
	397, 398, 0, 408, 399, 400, 401, 376, 402, 406,
	407, 403, 404, 405, 938, 0, 410, 411, 409, 0,
	412, 413, 414, 415, 416, 262, 417, 263, 418, 0,
	480, 481, 482, 419, 0, 0, 420, 421, 939, 422,
	940, 0, 423, 424, 425, 0, 426, 427, 0, 0,
	428, 429, 430, 431, 433, 901, 434, 0, 432, 435,
	436, 437, 485, 486, 487, 0, 439, 438, 488, 0,
	959, 0, 976, 440, 441, 489, 442, 443, 444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	208, 209, 210, 211, 0, 212, 0, 0, 0, 960,
	903, 965, 0, 0, 0, 213, 214, 215, 446, 447,
	216, 448, 217, 218, 449, 0, 219, 220, 221, 222,
	223, 224, 0, 902, 225, 450, 451, 452, 0, 226,
	909, 0, 892, 0, 227, 228, 229, 230, 231, 0,
	233, 234, 235, 232, 0, 236, 0, 237, 238, 239,
	0, 912, 240, 241, 895, 893, 894, 899, 897, 896,
	898, 242, 243, 244, 245, 246, 247, 454, 455, 0,
	248, 0, 250, 249, 0, 251, 0, 0, 252, 253,
	254, 0, 255, 0, 256, 257, 0, 456, 258, 259,
	261, 264, 260, 265, 266, 267, 932, 933, 0, 913,
	0, 0, 0, 0, 0, 268, 269, 270, 459, 271,
	272, 0, 273, 0, 274, 0, 0, 914, 275, 276,
	0, 277, 934, 0, 461, 278, 0, 279, 280, 281,
	282, 283, 284, 285, 904, 905, 908, 916, 0, 906,
	287, 0, 0, 0, 0, 286, 288, 295, 0, 915,
	289, 465, 291, 290, 292, 293, 294, 466, 0, 467,
	0, 296, 917, 918, 297, 298, 299, 919, 300, 301,
	0, 0, 302, 303, 304, 305, 963, 307, 306, 0,
	308, 935, 920, 309, 310, 921, 0, 311, 312, 0,
	0, 313, 0, 314, 315, 978, 977, 316, 317, 319,
	320, 318, 922, 321, 322, 324, 323, 0, 0, 923,
	0, 907, 471, 325, 326, 0, 327, 328, 329, 0,
	968, 331, 332, 0, 0, 333, 472, 924, 334, 925,
	936, 335, 330, 336, 337, 338, 339, 340, 341, 0,
	342, 937, 343, 475, 344, 0, 345, 0, 346, 347,
	348, 349, 350, 351, 476, 352, 353, 0, 354, 355,
	356, 357, 358, 0, 360, 361, 362, 359, 363, 364,
	365, 366, 0, 367, 926, 368, 369, 370, 371, 477,
	970, 0, 373, 377, 378, 379, 380, 381, 382, 383,
	0, 390, 391, 384, 386, 387, 388, 385, 389, 392,
	393, 900, 394, 374, 375, 395, 927, 396, 478, 397,
	398, 0, 408, 399, 400, 401, 376, 402, 406, 407,
	403, 404, 405, 938, 0, 410, 411, 409, 0, 412,
	413, 414, 415, 416, 262, 417, 263, 418, 0, 480,
	481, 482, 419, 0, 0, 420, 421, 939, 422, 940,
	0, 423, 424, 425, 0, 426, 427, 0, 0, 428,
	429, 430, 431, 433, 901, 434, 0, 432, 435, 436,
	437, 485, 486, 487, 0, 439, 438, 488, 976, 0,
	0, 0, 440, 441, 489, 442, 443, 444, 0, 0,
	0, 0, 0, 0, 0, 207, 208, 209, 210, 211,
	0, 212, 0, 0, 0, 0, 903, 0, 960, 0,
	965, 213, 214, 215, 446, 447, 216, 448, 217, 218,
	449, 0, 219, 220, 221, 222, 223, 224, 0, 902,
	225, 450, 451, 452, 0, 226, 909, 0, 892, 0,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	0, 236, 0, 237, 238, 239, 0, 912, 240, 241,
	895, 893, 894, 899, 897, 896, 898, 242, 243, 244,
	245, 246, 247, 454, 455, 0, 248, 0, 250, 249,
	0, 251, 0, 0, 252, 253, 254, 0, 255, 0,
	256, 257, 0, 456, 258, 259, 261, 264, 260, 265,
	266, 267, 932, 933, 0, 913, 0, 0, 0, 0,
	0, 268, 269, 270, 459, 271, 272, 0, 273, 0,
	274, 0, 0, 914, 275, 276, 0, 277, 934, 0,
	461, 278, 0, 279, 280, 281, 282, 283, 284, 285,
	904, 905, 908, 916, 0, 906, 287, 0, 0, 0,
	0, 286, 288, 295, 0, 915, 289, 465, 291, 290,
	292, 293, 294, 466, 0, 467, 0, 296, 917, 918,
	297, 298, 299, 919, 300, 301, 0, 0, 302, 303,
	304, 305, 963, 307, 306, 0, 308, 935, 920, 309,
	310, 921, 0, 311, 312, 0, 0, 313, 0, 314,
	315, 978, 977, 316, 317, 319, 320, 318, 922, 321,
	322, 324, 323, 0, 0, 923, 0, 907, 471, 325,
	326, 0, 327, 328, 329, 0, 968, 331, 332, 0,
	0, 333, 472, 924, 334, 925, 936, 335, 330, 336,
	337, 338, 339, 340, 341, 0, 342, 937, 343, 475,
	344, 0, 345, 0, 346, 347, 348, 349, 350, 351,
	476, 352, 353, 0, 354, 355, 356, 357, 358, 0,
	360, 361, 362, 359, 363, 364, 365, 366, 0, 367,
	926, 368, 369, 370, 371, 477, 970, 0, 373, 377,
	378, 379, 380, 381, 382, 383, 0, 390, 391, 384,
	386, 387, 388, 385, 389, 392, 393, 900, 394, 374,
	375, 395, 927, 396, 478, 397, 398, 0, 408, 399,
	400, 401, 376, 402, 406, 407, 403, 404, 405, 938,
	0, 410, 411, 409, 0, 412, 413, 414, 415, 416,
	262, 417, 263, 418, 0, 480, 481, 482, 419, 0,
	0, 420, 421, 939, 422, 940, 0, 423, 424, 425,
	0, 426, 427, 0, 0, 428, 429, 430, 431, 433,
	901, 434, 0, 432, 435, 436, 437, 485, 486, 487,
	0, 439, 438, 488, 976, 0, 0, 0, 440, 441,
	489, 442, 443, 444, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 903, 0, 960, 0, 965, 213, 214, 215,
	446, 447, 216, 448, 217, 218, 449, 0, 219, 220,
	221, 222, 223, 224, 0, 902, 225, 450, 451, 452,
	0, 226, 909, 0, 892, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 912, 240, 241, 895, 893, 894, 899,
	897, 896, 898, 242, 243, 244, 245, 246, 247, 454,
	455, 0, 248, 0, 250, 249, 0, 251, 0, 0,
	252, 253, 254, 0, 255, 0, 256, 257, 0, 456,
	258, 259, 261, 264, 260, 265, 266, 267, 932, 933,
	0, 913, 0, 0, 0, 0, 0, 268, 269, 270,
	459, 271, 272, 0, 273, 0, 274, 0, 0, 914,
	275, 276, 0, 277, 934, 0, 461, 278, 0, 279,
	280, 281, 282, 283, 284, 285, 904, 905, 908, 916,
	0, 906, 287, 0, 0, 0, 0, 286, 288, 295,
	0, 915, 289, 465, 291, 290, 292, 293, 294, 466,
	0, 467, 0, 296, 917, 918, 297, 298, 299, 919,
	300, 301, 0, 0, 302, 303, 304, 305, 0, 307,
	306, 0, 308, 935, 920, 309, 310, 921, 0, 311,
	312, 0, 0, 313, 0, 314, 315, 978, 977, 316,
	317, 319, 320, 318, 922, 321, 322, 324, 323, 0,
	0, 923, 0, 907, 471, 325, 326, 0, 327, 328,
	329, 0, 0, 331, 332, 0, 0, 333, 472, 924,
	334, 925, 936, 335, 330, 336, 337, 338, 339, 340,
	341, 0, 342, 937, 343, 475, 344, 0, 345, 0,
	346, 347, 348, 349, 350, 351, 476, 352, 353, 0,
	354, 355, 356, 357, 358, 0, 360, 361, 362, 359,
	363, 364, 365, 366, 0, 367, 926, 368, 369, 370,
	371, 477, 970, 0, 373, 377, 378, 379, 380, 381,
	382, 383, 0, 390, 391, 384, 386, 387, 388, 385,
	389, 392, 393, 900, 394, 374, 375, 395, 927, 396,
	478, 397, 398, 0, 408, 399, 400, 401, 376, 402,
	406, 407, 403, 404, 405, 938, 0, 410, 411, 409,
	0, 412, 413, 414, 415, 416, 262, 417, 263, 418,
	0, 480, 481, 482, 419, 0, 0, 420, 421, 939,
	422, 940, 0, 423, 424, 425, 0, 426, 427, 0,
	0, 428, 429, 430, 431, 433, 901, 434, 0, 432,
	435, 436, 437, 485, 486, 487, 0, 439, 438, 488,
	789, 0, 1134, 0, 440, 441, 489, 442, 443, 444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	208, 209, 210, 211, 0, 212, 0, 0, 0, 0,
	445, 0, 1452, 0, 0, 213, 214, 215, 446, 447,
	216, 448, 217, 218, 449, 0, 219, 220, 221, 222,
	223, 224, 0, 0, 225, 450, 451, 452, 0, 226,
	453, 0, 1038, 0, 227, 228, 229, 230, 231, 0,
	233, 234, 235, 232, 0, 236, 0, 237, 238, 239,
	0, 912, 240, 241, 0, 0, 0, 0, 0, 0,
	0, 242, 243, 244, 245, 246, 247, 454, 455, 0,
	248, 0, 250, 249, 0, 251, 0, 0, 252, 253,
	254, 0, 255, 0, 256, 257, 0, 456, 258, 259,
	261, 264, 260, 265, 266, 267, 457, 458, 0, 913,
	0, 0, 0, 0, 0, 268, 269, 270, 459, 271,
	272, 0, 273, 0, 274, 0, 0, 914, 275, 276,
	0, 277, 460, 0, 461, 278, 0, 279, 280, 281,
	282, 283, 284, 285, 462, 463, 464, 916, 0, 468,
	287, 0, 0, 0, 0, 286, 288, 295, 0, 915,
	289, 465, 291, 290, 292, 293, 294, 466, 0, 467,
	0, 296, 917, 918, 297, 298, 299, 919, 300, 301,
	0, 0, 302, 303, 304, 305, 0, 307, 306, 0,
	308, 469, 920, 309, 310, 921, 0, 311, 312, 0,
	0, 313, 0, 314, 315, 978, 977, 316, 317, 319,
	320, 318, 922, 321, 322, 324, 323, 0, 0, 923,
	0, 470, 471, 325, 326, 0, 327, 328, 329, 0,
	0, 331, 332, 0, 0, 333, 472, 924, 334, 925,
	473, 335, 330, 336, 337, 338, 339, 340, 341, 0,
	342, 474, 343, 475, 344, 0, 345, 0, 346, 347,
	348, 349, 350, 351, 476, 352, 353, 0, 354, 355,
	356, 357, 358, 0, 360, 361, 362, 359, 363, 364,
	365, 366, 0, 367, 926, 368, 369, 370, 371, 477,
	372, 0, 373, 377, 378, 379, 380, 381, 382, 383,
	176, 390, 391, 384, 386, 387, 388, 385, 389, 392,
	393, 0, 394, 374, 375, 395, 927, 396, 478, 397,
	398, 0, 408, 399, 400, 401, 376, 402, 406, 407,
	403, 404, 405, 479, 0, 410, 411, 409, 178, 412,
	413, 414, 415, 416, 262, 417, 263, 418, 0, 480,
	481, 482, 419, 0, 0, 420, 421, 483, 422, 484,
	0, 423, 424, 425, 0, 426, 427, 0, 0, 428,
	429, 430, 431, 433, 0, 434, 0, 432, 435, 436,
	437, 1278, 486, 487, 0, 439, 438, 488, 1275, 0,
	1134, 170, 440, 441, 489, 442, 443, 444, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 207, 208, 209,
	210, 211, 0, 212, 0, 0, 0, 0, 445, 0,
	148, 0, 0, 213, 214, 215, 446, 447, 216, 448,
	217, 218, 449, 0, 219, 220, 221, 222, 223, 224,
	0, 0, 225, 450, 451, 452, 0, 226, 453, 0,
	1038, 0, 227, 228, 229, 230, 231, 0, 233, 234,
	235, 232, 0, 236, 0, 237, 238, 239, 0, 912,
	240, 241, 0, 0, 0, 0, 0, 0, 0, 242,
	243, 244, 245, 246, 247, 454, 455, 0, 248, 0,
	250, 249, 0, 251, 0, 0, 252, 253, 254, 0,
	255, 0, 256, 257, 0, 456, 258, 259, 261, 264,
	260, 265, 266, 267, 457, 458, 0, 913, 0, 0,
	0, 0, 0, 268, 269, 270, 459, 271, 272, 0,
	273, 0, 274, 0, 0, 914, 275, 276, 0, 277,
	460, 0, 461, 278, 0, 279, 280, 281, 282, 283,
	284, 285, 462, 463, 464, 916, 0, 468, 287, 0,
	0, 0, 0, 286, 288, 295, 0, 915, 289, 465,
	291, 290, 292, 293, 294, 466, 0, 467, 0, 296,
	917, 918, 297, 298, 299, 919, 300, 301, 0, 0,
	302, 303, 304, 305, 0, 307, 306, 0, 308, 469,
	920, 309, 310, 921, 0, 311, 312, 0, 0, 313,
	0, 314, 315, 978, 977, 316, 317, 319, 320, 318,
	922, 321, 322, 324, 323, 0, 0, 923, 0, 470,
	471, 325, 326, 0, 327, 328, 329, 0, 0, 331,
	332, 0, 0, 333, 472, 924, 334, 925, 473, 335,
	330, 336, 337, 338, 339, 340, 341, 0, 342, 474,
	343, 475, 344, 0, 345, 0, 346, 347, 348, 349,
	350, 351, 476, 352, 353, 0, 354, 355, 356, 357,
	358, 0, 360, 361, 362, 359, 363, 364, 365, 366,
	0, 367, 926, 368, 369, 370, 371, 477, 372, 0,
	373, 377, 378, 379, 380, 381, 382, 383, 176, 390,
	391, 384, 386, 387, 388, 385, 389, 392, 393, 0,
	394, 374, 375, 395, 927, 396, 478, 397, 398, 0,
	408, 399, 400, 401, 376, 402, 406, 407, 403, 404,
	405, 479, 0, 410, 411, 409, 178, 412, 413, 414,
	415, 416, 262, 417, 263, 418, 0, 480, 481, 482,
	419, 0, 0, 420, 421, 483, 422, 484, 0, 423,
	424, 425, 0, 426, 427, 0, 0, 428, 429, 430,
	431, 433, 0, 434, 0, 432, 435, 436, 437, 1278,
	486, 487, 0, 439, 438, 488, 0, 0, 0, 170,
	440, 441, 489, 442, 443, 444, 0, 171, 0, 0,
	0, 0, 1134, 1133, 0, 0, 0, 0, 1131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 207,
	208, 209, 210, 211, 0, 212, 0, 0, 0, 0,
	445, 0, 0, 0, 0, 213, 214, 215, 446, 447,
	216, 448, 217, 218, 449, 0, 219, 220, 221, 222,
	223, 224, 0, 0, 225, 450, 451, 452, 0, 226,
	453, 0, 1038, 0, 227, 228, 229, 230, 231, 0,
	233, 234, 235, 232, 0, 236, 0, 237, 238, 239,
	0, 912, 240, 241, 0, 0, 0, 0, 0, 0,
	0, 242, 243, 244, 245, 246, 247, 454, 455, 0,
	248, 0, 250, 249, 0, 251, 0, 0, 252, 253,
	254, 0, 255, 0, 256, 257, 0, 456, 258, 259,
	261, 264, 260, 265, 266, 267, 457, 458, 0, 913,
	0, 0, 0, 0, 0, 268, 269, 270, 459, 271,
	272, 0, 273, 0, 274, 0, 0, 914, 275, 276,
	0, 277, 460, 0, 461, 278, 0, 279, 280, 281,
	282, 283, 284, 285, 462, 463, 464, 916, 0, 468,
	287, 0, 0, 0, 0, 286, 288, 295, 0, 915,
	289, 465, 291, 290, 292, 293, 294, 466, 0, 467,
	0, 296, 917, 918, 297, 298, 299, 919, 300, 301,
	0, 0, 302, 303, 304, 305, 0, 307, 306, 0,
	308, 469, 920, 309, 310, 921, 0, 311, 312, 0,
	0, 313, 0, 314, 315, 978, 977, 316, 317, 319,
	320, 318, 922, 321, 322, 324, 323, 0, 0, 923,
	0, 470, 471, 325, 326, 0, 327, 328, 329, 0,
	0, 331, 332, 0, 0, 333, 472, 924, 334, 925,
	473, 335, 330, 336, 337, 338, 339, 340, 341, 0,
	342, 474, 343, 475, 344, 0, 345, 0, 346, 347,
	348, 349, 350, 351, 476, 352, 353, 0, 354, 355,
	356, 357, 358, 0, 360, 361, 362, 359, 363, 364,
	365, 366, 0, 367, 926, 368, 369, 370, 371, 477,
	372, 0, 373, 377, 378, 379, 380, 381, 382, 383,
	0, 390, 391, 384, 386, 387, 388, 385, 389, 392,
	393, 0, 394, 374, 375, 395, 927, 396, 478, 397,
	398, 0, 408, 399, 400, 401, 376, 402, 406, 407,
	403, 404, 405, 479, 0, 410, 411, 409, 0, 412,
	413, 414, 415, 416, 262, 417, 263, 418, 0, 480,
	481, 482, 419, 0, 0, 420, 421, 483, 422, 484,
	0, 423, 424, 425, 0, 426, 427, 0, 0, 428,
	429, 430, 431, 433, 0, 434, 0, 432, 435, 436,
	437, 485, 486, 487, 0, 439, 438, 488, 0, 0,
	0, 0, 440, 441, 489, 442, 443, 444, 1134, 1133,
	0, 0, 0, 0, 1131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 208, 209, 210, 211,
	2628, 212, 0, 0, 0, 0, 445, 0, 0, 0,
	0, 213, 214, 215, 446, 447, 216, 448, 217, 218,
	449, 0, 219, 220, 221, 222, 223, 224, 0, 0,
	225, 450, 451, 452, 0, 226, 453, 0, 1038, 0,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	0, 236, 0, 237, 238, 239, 0, 912, 240, 241,
	0, 0, 0, 0, 0, 0, 0, 242, 243, 244,
	245, 246, 247, 454, 455, 0, 248, 0, 250, 249,
	0, 251, 0, 0, 252, 253, 254, 0, 255, 0,
	256, 257, 0, 456, 258, 259, 261, 264, 260, 265,
	266, 267, 457, 458, 0, 913, 0, 0, 0, 0,
	0, 268, 269, 270, 459, 271, 272, 0, 273, 0,
	274, 0, 0, 914, 275, 276, 0, 277, 460, 0,
	461, 278, 0, 279, 280, 281, 282, 283, 284, 285,
	462, 463, 464, 916, 0, 468, 287, 0, 0, 0,
	0, 286, 288, 295, 0, 915, 289, 465, 291, 290,
	292, 293, 294, 466, 0, 467, 0, 296, 917, 918,
	297, 298, 299, 919, 300, 301, 0, 0, 302, 303,
	304, 305, 0, 307, 306, 0, 308, 469, 920, 309,
	310, 921, 0, 311, 312, 0, 0, 313, 0, 314,
	315, 978, 977, 316, 317, 319, 320, 318, 922, 321,
	322, 324, 323, 0, 0, 923, 0, 470, 471, 325,
	326, 0, 327, 328, 329, 0, 0, 331, 332, 0,
	0, 333, 472, 924, 334, 925, 473, 335, 330, 336,
	337, 338, 339, 340, 341, 0, 342, 474, 343, 475,
	344, 0, 345, 0, 346, 347, 348, 349, 350, 351,
	476, 352, 353, 0, 354, 355, 356, 357, 358, 0,
	360, 361, 362, 359, 363, 364, 365, 366, 0, 367,
	926, 368, 369, 370, 371, 477, 372, 0, 373, 377,
	378, 379, 380, 381, 382, 383, 0, 390, 391, 384,
	386, 387, 388, 385, 389, 392, 393, 0, 394, 374,
	375, 395, 927, 396, 478, 397, 398, 0, 408, 399,
	400, 401, 376, 402, 406, 407, 403, 404, 405, 479,
	0, 410, 411, 409, 0, 412, 413, 414, 415, 416,
	262, 417, 263, 418, 0, 480, 481, 482, 419, 0,
	0, 420, 421, 483, 422, 484, 0, 423, 424, 425,
	0, 426, 427, 0, 0, 428, 429, 430, 431, 433,
	0, 434, 0, 432, 435, 436, 437, 485, 486, 487,
	0, 439, 438, 488, 976, 0, 0, 0, 440, 441,
	489, 442, 443, 444, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 903, 0, 0, 0, 1282, 213, 214, 215,
	446, 447, 216, 448, 217, 218, 449, 0, 219, 220,
	221, 222, 223, 224, 0, 902, 225, 450, 451, 452,
	0, 226, 909, 0, 892, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 912, 240, 241, 895, 893, 894, 899,
	897, 896, 898, 242, 243, 244, 245, 246, 247, 454,
	455, 0, 248, 0, 250, 249, 0, 251, 0, 0,
	252, 253, 254, 0, 255, 0, 256, 257, 0, 456,
	258, 259, 261, 264, 260, 265, 266, 267, 932, 933,
	0, 913, 0, 0, 0, 0, 0, 268, 269, 270,
	459, 271, 272, 0, 273, 0, 274, 0, 0, 914,
	275, 276, 0, 277, 934, 0, 461, 278, 0, 279,
	280, 281, 282, 283, 284, 285, 904, 905, 908, 916,
	0, 906, 287, 0, 0, 0, 0, 286, 288, 295,
	0, 915, 289, 465, 291, 290, 292, 293, 294, 466,
	0, 467, 0, 296, 917, 918, 297, 298, 299, 919,
	300, 301, 0, 0, 302, 303, 304, 305, 0, 307,
	306, 0, 308, 935, 920, 309, 310, 921, 0, 311,
	312, 0, 0, 313, 0, 314, 315, 978, 977, 316,
	317, 319, 320, 318, 922, 321, 322, 324, 323, 0,
	0, 923, 0, 907, 471, 325, 326, 0, 327, 328,
	329, 0, 0, 331, 332, 0, 0, 333, 472, 924,
	334, 925, 936, 335, 330, 336, 337, 338, 339, 340,
	341, 0, 342, 937, 343, 475, 344, 0, 345, 0,
	346, 347, 348, 349, 350, 351, 476, 352, 353, 0,
	354, 355, 356, 357, 358, 0, 360, 361, 362, 359,
	363, 364, 365, 366, 0, 367, 926, 368, 369, 370,
	371, 477, 372, 0, 373, 377, 378, 379, 380, 381,
	382, 383, 0, 390, 391, 384, 386, 387, 388, 385,
	389, 392, 393, 900, 394, 374, 375, 395, 927, 396,
	478, 397, 398, 0, 408, 399, 400, 401, 376, 402,
	406, 407, 403, 404, 405, 938, 0, 410, 411, 409,
	0, 412, 413, 414, 415, 416, 262, 417, 263, 418,
	0, 480, 481, 482, 419, 0, 0, 420, 421, 939,
	422, 940, 0, 423, 424, 425, 0, 426, 427, 0,
	0, 428, 429, 430, 431, 433, 901, 434, 0, 432,
	435, 436, 437, 485, 486, 487, 0, 439, 438, 488,
	789, 0, 204, 0, 440, 441, 489, 442, 443, 444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	208, 209, 210, 211, 0, 212, 0, 0, 0, 0,
	445, 0, 0, 0, 0, 213, 214, 215, 446, 447,
	216, 448, 217, 218, 449, 0, 219, 220, 221, 222,
	223, 224, 0, 0, 225, 450, 451, 452, 0, 226,
	453, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	233, 234, 235, 232, 0, 236, 0, 237, 238, 239,
	0, 0, 240, 241, 0, 0, 0, 0, 0, 0,
	0, 242, 243, 244, 245, 246, 247, 454, 455, 0,
	248, 0, 250, 249, 0, 251, 0, 0, 252, 253,
	254, 0, 255, 0, 256, 257, 0, 456, 258, 259,
	261, 264, 260, 265, 266, 267, 457, 458, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 459, 271,
	272, 0, 273, 0, 274, 0, 0, 0, 275, 276,
	0, 277, 460, 0, 461, 278, 0, 279, 280, 281,
	282, 283, 284, 285, 462, 463, 464, 0, 0, 468,
	287, 0, 0, 0, 0, 286, 288, 295, 0, 0,
	289, 465, 291, 290, 292, 293, 294, 466, 0, 467,
	0, 296, 0, 0, 297, 298, 299, 0, 300, 301,
	0, 0, 302, 303, 304, 305, 0, 307, 306, 0,
	308, 469, 0, 309, 310, 0, 0, 311, 312, 0,
	0, 313, 0, 314, 315, 0, 0, 316, 317, 319,
	320, 318, 0, 321, 322, 324, 323, 0, 0, 0,
	0, 470, 471, 325, 326, 0, 327, 328, 329, 0,
	0, 331, 332, 0, 0, 333, 472, 0, 334, 0,
	473, 335, 330, 336, 337, 338, 339, 340, 341, 0,
	342, 474, 343, 475, 344, 0, 345, 0, 346, 347,
	348, 349, 350, 351, 476, 352, 353, 0, 354, 355,
	356, 357, 358, 0, 360, 361, 362, 359, 363, 364,
	365, 366, 0, 367, 0, 368, 369, 370, 371, 477,
	372, 0, 373, 377, 378, 379, 380, 381, 382, 383,
	176, 390, 391, 384, 386, 387, 388, 385, 389, 392,
	393, 0, 394, 374, 375, 395, 0, 396, 478, 397,
	398, 0, 408, 399, 400, 401, 376, 402, 406, 407,
	403, 404, 405, 479, 0, 410, 411, 409, 178, 412,
	413, 414, 415, 416, 262, 417, 263, 418, 0, 480,
	481, 482, 419, 0, 0, 420, 421, 483, 422, 484,
	0, 423, 424, 425, 0, 426, 427, 0, 0, 428,
	429, 430, 431, 433, 0, 434, 0, 432, 435, 436,
	437, 1278, 486, 487, 0, 439, 438, 488, 204, 0,
	0, 170, 440, 441, 489, 442, 443, 444, 0, 171,
	0, 0, 0, 0, 0, 207, 208, 209, 210, 211,
	0, 212, 0, 0, 0, 0, 445, 0, 0, 0,
	148, 213, 214, 215, 446, 447, 216, 448, 217, 218,
	449, 0, 219, 220, 221, 222, 223, 224, 0, 0,
	225, 450, 451, 452, 0, 226, 453, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	0, 236, 0, 237, 238, 239, 0, 0, 240, 241,
	0, 0, 0, 0, 0, 0, 0, 242, 243, 244,
	245, 246, 247, 454, 455, 0, 248, 0, 250, 249,
	0, 251, 0, 0, 252, 253, 254, 0, 255, 0,
	256, 257, 0, 456, 258, 259, 261, 264, 260, 265,
	266, 267, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 459, 271, 272, 0, 273, 0,
	274, 0, 0, 0, 275, 276, 0, 277, 460, 0,
	461, 278, 0, 279, 280, 281, 282, 283, 284, 285,
	462, 463, 464, 0, 0, 468, 287, 0, 0, 0,
	0, 286, 288, 295, 0, 0, 289, 465, 291, 290,
	292, 293, 294, 466, 0, 467, 0, 296, 0, 0,
	297, 298, 299, 0, 300, 301, 0, 0, 302, 303,
	304, 305, 0, 307, 306, 0, 308, 469, 0, 309,
	310, 0, 0, 311, 312, 0, 0, 313, 0, 314,
	315, 0, 0, 316, 317, 319, 320, 318, 0, 321,
	322, 324, 323, 0, 0, 0, 0, 470, 471, 325,
	326, 0, 327, 328, 329, 0, 0, 331, 332, 0,
	0, 333, 472, 0, 334, 0, 473, 335, 330, 336,
	337, 338, 339, 340, 341, 0, 342, 474, 343, 475,
	344, 0, 345, 0, 346, 347, 348, 349, 350, 351,
	476, 352, 353, 0, 354, 355, 356, 357, 358, 0,
	360, 361, 362, 359, 363, 364, 365, 366, 0, 367,
	0, 368, 369, 370, 371, 477, 372, 0, 373, 377,
	378, 379, 380, 381, 382, 383, 0, 390, 391, 384,
	386, 387, 388, 385, 389, 392, 393, 0, 394, 374,
	375, 395, 0, 396, 478, 397, 398, 0, 408, 399,
	400, 401, 376, 402, 406, 407, 403, 404, 405, 479,
	0, 410, 411, 409, 0, 412, 413, 414, 415, 416,
	262, 417, 263, 418, 0, 480, 481, 482, 419, 0,
	0, 420, 421, 483, 422, 484, 0, 423, 424, 425,
	0, 426, 427, 0, 0, 428, 429, 430, 431, 433,
	0, 434, 0, 432, 435, 436, 437, 485, 486, 487,
	0, 439, 438, 488, 204, 0, 0, 0, 440, 441,
	489, 442, 443, 444, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 445, 0, 0, 0, 2247, 213, 214, 215,
	446, 447, 216, 448, 217, 218, 449, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 450, 451, 452,
	0, 226, 453, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 0, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 454,
	455, 0, 248, 0, 250, 249, 0, 251, 0, 0,
	252, 253, 254, 0, 255, 0, 256, 257, 0, 456,
	258, 259, 261, 264, 260, 265, 266, 267, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 270,
	459, 271, 272, 0, 273, 0, 274, 0, 0, 0,
	275, 276, 0, 277, 460, 0, 461, 278, 0, 279,
	280, 281, 282, 283, 284, 285, 462, 463, 464, 0,
	0, 468, 287, 0, 0, 0, 0, 286, 288, 295,
	0, 0, 289, 465, 291, 290, 292, 293, 294, 466,
	0, 467, 0, 296, 0, 0, 297, 298, 299, 0,
	300, 301, 0, 0, 302, 303, 304, 305, 0, 307,
	306, 0, 308, 469, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 0, 314, 315, 0, 0, 316,
	317, 319, 320, 318, 0, 321, 322, 324, 323, 0,
	0, 0, 0, 470, 471, 325, 326, 0, 327, 328,
	329, 0, 0, 331, 332, 0, 0, 333, 472, 0,
	334, 0, 473, 335, 330, 336, 337, 338, 339, 340,
	341, 0, 342, 474, 343, 475, 344, 0, 345, 0,
	346, 347, 348, 349, 350, 351, 476, 352, 353, 0,
	354, 355, 356, 357, 358, 0, 360, 361, 362, 359,
	363, 364, 365, 366, 0, 367, 0, 368, 369, 370,
	371, 477, 372, 0, 373, 377, 378, 379, 380, 381,
	382, 383, 0, 390, 391, 384, 386, 387, 388, 385,
	389, 392, 393, 0, 394, 374, 375, 395, 0, 396,
	478, 397, 398, 0, 408, 399, 400, 401, 376, 402,
	406, 407, 403, 404, 405, 479, 0, 410, 411, 409,
	0, 412, 413, 414, 415, 416, 262, 417, 263, 418,
	0, 480, 481, 482, 419, 0, 0, 420, 421, 483,
	422, 484, 0, 423, 424, 425, 0, 426, 427, 0,
	0, 428, 429, 430, 431, 433, 0, 434, 0, 432,
	435, 436, 437, 485, 486, 487, 0, 439, 438, 488,
	204, 0, 0, 0, 440, 441, 489, 442, 443, 444,
	0, 0, 0, 0, 0, 0, 0, 207, 208, 209,
	210, 211, 0, 212, 0, 0, 0, 0, 445, 0,
	0, 0, 2700, 213, 214, 215, 446, 447, 216, 448,
	217, 218, 449, 0, 219, 220, 221, 222, 223, 224,
	0, 0, 225, 450, 451, 452, 0, 226, 453, 0,
	0, 0, 227, 228, 229, 230, 231, 0, 233, 234,
	235, 232, 0, 236, 0, 237, 238, 239, 0, 0,
	240, 241, 0, 0, 0, 0, 0, 0, 0, 242,
	243, 244, 245, 246, 247, 454, 455, 0, 248, 0,
	250, 249, 0, 251, 0, 0, 252, 253, 254, 0,
	255, 0, 256, 257, 0, 456, 258, 259, 261, 264,
	260, 265, 266, 267, 457, 458, 0, 0, 0, 0,
	0, 0, 0, 268, 269, 270, 459, 271, 272, 0,
	273, 0, 274, 0, 0, 0, 275, 276, 0, 277,
	460, 0, 461, 278, 0, 279, 280, 281, 282, 283,
	284, 285, 462, 463, 464, 0, 0, 468, 287, 0,
	0, 0, 0, 286, 288, 295, 0, 0, 289, 465,
	291, 290, 292, 293, 294, 466, 0, 467, 0, 296,
	0, 0, 297, 298, 299, 0, 300, 301, 0, 0,
	302, 303, 304, 305, 0, 307, 306, 0, 308, 469,
	0, 309, 310, 0, 0, 311, 312, 0, 0, 313,
	0, 314, 315, 0, 0, 316, 317, 319, 320, 318,
	0, 321, 322, 324, 323, 0, 0, 0, 0, 470,
	471, 325, 326, 0, 327, 328, 329, 0, 0, 331,
	332, 0, 0, 333, 472, 0, 334, 0, 473, 335,
	330, 336, 337, 338, 339, 340, 341, 0, 342, 474,
	343, 475, 344, 0, 345, 0, 346, 347, 348, 349,
	350, 351, 476, 352, 353, 0, 354, 355, 356, 357,
	358, 0, 360, 361, 362, 359, 363, 364, 365, 366,
	0, 367, 0, 368, 369, 370, 371, 477, 372, 0,
	373, 377, 378, 379, 380, 381, 382, 383, 0, 390,
	391, 384, 386, 387, 388, 385, 389, 392, 393, 0,
	394, 374, 375, 395, 0, 396, 478, 397, 398, 0,
	408, 399, 400, 401, 376, 402, 406, 407, 403, 404,
	405, 479, 0, 410, 411, 409, 0, 412, 413, 414,
	415, 416, 262, 417, 263, 418, 0, 480, 481, 482,
	419, 0, 0, 420, 421, 483, 422, 484, 0, 423,
	424, 425, 0, 426, 427, 0, 0, 428, 429, 430,
	431, 433, 0, 434, 0, 432, 435, 436, 437, 485,
	486, 487, 0, 439, 438, 488, 0, 0, 0, 0,
	440, 441, 489, 442, 443, 444, 0, 0, 0, 0,
	1303, 0, 1134, 1133, 0, 0, 0, 0, 1131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1551, 207,
	208, 209, 210, 211, 0, 212, 0, 0, 0, 0,
	445, 0, 0, 0, 0, 213, 214, 215, 446, 447,
	216, 448, 217, 218, 449, 0, 219, 220, 221, 222,
	223, 224, 0, 0, 225, 450, 451, 452, 0, 226,
	453, 0, 1038, 0, 227, 228, 229, 230, 231, 0,
	233, 234, 235, 232, 0, 236, 0, 237, 238, 239,
	0, 912, 240, 241, 0, 0, 0, 0, 0, 0,
	0, 242, 243, 244, 245, 246, 247, 454, 455, 0,
	248, 0, 250, 249, 0, 251, 0, 0, 252, 253,
	254, 0, 255, 0, 256, 257, 0, 456, 258, 259,
	261, 264, 260, 265, 266, 267, 457, 458, 0, 913,
	0, 0, 0, 0, 0, 1302, 269, 270, 459, 271,
	272, 0, 273, 0, 274, 0, 0, 914, 275, 276,
	0, 277, 460, 0, 461, 278, 0, 279, 280, 281,
	282, 283, 284, 285, 462, 463, 464, 916, 0, 468,
	287, 0, 0, 0, 0, 286, 288, 295, 0, 915,
	289, 465, 291, 290, 292, 293, 294, 466, 0, 467,
	0, 296, 917, 918, 297, 298, 299, 919, 300, 301,
	0, 0, 302, 303, 304, 305, 0, 307, 306, 0,
	308, 469, 920, 309, 310, 921, 0, 311, 312, 0,
	0, 313, 0, 314, 315, 978, 977, 316, 317, 319,
	320, 318, 922, 321, 322, 324, 323, 0, 0, 923,
	0, 470, 471, 325, 326, 0, 327, 328, 329, 0,
	0, 331, 332, 0, 0, 333, 472, 924, 334, 925,
	473, 335, 330, 336, 337, 338, 339, 340, 341, 0,
	342, 474, 343, 475, 344, 0, 345, 0, 346, 347,
	348, 349, 1301, 351, 476, 352, 353, 0, 354, 355,
	356, 357, 358, 0, 360, 361, 362, 359, 363, 364,
	365, 366, 0, 367, 926, 368, 369, 370, 371, 477,
	372, 0, 373, 377, 378, 379, 380, 381, 382, 383,
	0, 390, 391, 384, 386, 387, 388, 385, 389, 392,
	393, 0, 394, 374, 375, 395, 927, 396, 478, 397,
	398, 0, 408, 399, 400, 401, 376, 402, 406, 407,
	403, 404, 405, 479, 0, 410, 411, 409, 0, 412,
	413, 414, 415, 416, 262, 417, 263, 418, 0, 480,
	481, 482, 419, 0, 0, 420, 421, 483, 422, 484,
	0, 423, 424, 425, 0, 426, 427, 0, 0, 428,
	429, 430, 431, 433, 0, 434, 0, 432, 435, 436,
	437, 485, 486, 487, 0, 439, 438, 488, 0, 0,
	0, 0, 440, 441, 489, 442, 443, 444, 1273, 0,
	1134, 1133, 0, 0, 0, 0, 1131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 208, 209,
	210, 211, 0, 212, 0, 0, 0, 0, 445, 0,
	0, 0, 0, 213, 214, 215, 446, 447, 216, 448,
	217, 218, 449, 0, 219, 220, 221, 222, 223, 224,
	0, 0, 225, 450, 451, 452, 0, 226, 453, 0,
	1038, 0, 227, 228, 229, 230, 231, 0, 233, 234,
	235, 232, 0, 236, 0, 237, 238, 239, 0, 912,
	240, 241, 0, 0, 0, 0, 0, 0, 0, 242,
	243, 244, 245, 246, 247, 454, 455, 0, 248, 0,
	250, 249, 0, 251, 0, 0, 252, 253, 254, 0,
	255, 0, 256, 257, 0, 456, 258, 259, 261, 264,
	260, 265, 266, 267, 457, 458, 0, 913, 0, 0,
	0, 0, 0, 268, 269, 270, 459, 271, 272, 0,
	273, 0, 274, 0, 0, 914, 275, 276, 0, 277,
	460, 0, 461, 278, 0, 279, 280, 281, 282, 283,
	284, 285, 1272, 463, 464, 916, 0, 468, 287, 0,
	0, 0, 0, 286, 288, 295, 0, 915, 289, 465,
	291, 290, 292, 293, 294, 466, 0, 467, 0, 296,
	917, 918, 297, 298, 299, 919, 300, 301, 0, 0,
	302, 303, 304, 305, 0, 307, 306, 0, 308, 469,
	920, 309, 310, 921, 0, 311, 312, 0, 0, 313,
	0, 314, 315, 978, 977, 316, 317, 319, 320, 318,
	922, 321, 322, 324, 323, 0, 0, 923, 0, 470,
	471, 325, 326, 0, 327, 328, 329, 0, 0, 331,
	332, 0, 0, 333, 472, 924, 334, 925, 473, 335,
	330, 336, 337, 338, 339, 340, 341, 0, 342, 474,
	343, 475, 344, 0, 345, 0, 346, 347, 348, 349,
	350, 351, 476, 352, 353, 0, 354, 355, 356, 357,
	358, 0, 360, 361, 362, 359, 363, 364, 365, 366,
	0, 367, 926, 368, 369, 370, 371, 477, 372, 0,
	373, 377, 378, 379, 380, 381, 382, 383, 0, 390,
	391, 384, 386, 387, 388, 385, 389, 392, 393, 0,
	394, 374, 375, 395, 927, 396, 478, 397, 398, 0,
	408, 399, 400, 401, 376, 402, 406, 407, 403, 404,
	405, 479, 0, 410, 411, 409, 0, 412, 413, 414,
	415, 416, 262, 417, 263, 418, 0, 480, 481, 482,
	419, 0, 0, 420, 421, 483, 422, 484, 0, 423,
	424, 425, 0, 426, 427, 0, 0, 428, 429, 430,
	431, 433, 0, 434, 0, 432, 435, 436, 437, 485,
	486, 487, 0, 439, 438, 488, 0, 0, 0, 0,
	440, 441, 489, 442, 443, 444, 1269, 0, 1134, 1133,
	0, 0, 0, 0, 1131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 208, 209, 210, 211,
	0, 212, 0, 0, 0, 0, 445, 0, 0, 0,
	0, 213, 214, 215, 446, 447, 216, 448, 217, 218,
	449, 0, 219, 220, 221, 222, 223, 224, 0, 0,
	225, 450, 451, 452, 0, 226, 453, 0, 1038, 0,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	0, 236, 0, 237, 238, 239, 0, 912, 240, 241,
	0, 0, 0, 0, 0, 0, 0, 242, 243, 244,
	245, 246, 247, 454, 455, 0, 248, 0, 250, 249,
	0, 251, 0, 0, 252, 253, 254, 0, 255, 0,
	256, 257, 0, 456, 258, 259, 261, 264, 260, 265,
	266, 267, 457, 458, 0, 913, 0, 0, 0, 0,
	0, 268, 269, 270, 459, 271, 272, 0, 273, 0,
	274, 0, 0, 914, 275, 276, 0, 277, 460, 0,
	461, 278, 0, 279, 280, 281, 282, 283, 284, 285,
	1268, 463, 464, 916, 0, 468, 287, 0, 0, 0,
	0, 286, 288, 295, 0, 915, 289, 465, 291, 290,
	292, 293, 294, 466, 0, 467, 0, 296, 917, 918,
	297, 298, 299, 919, 300, 301, 0, 0, 302, 303,
	304, 305, 0, 307, 306, 0, 308, 469, 920, 309,
	310, 921, 0, 311, 312, 0, 0, 313, 0, 314,
	315, 978, 977, 316, 317, 319, 320, 318, 922, 321,
	322, 324, 323, 0, 0, 923, 0, 470, 471, 325,
	326, 0, 327, 328, 329, 0, 0, 331, 332, 0,
	0, 333, 472, 924, 334, 925, 473, 335, 330, 336,
	337, 338, 339, 340, 341, 0, 342, 474, 343, 475,
	344, 0, 345, 0, 346, 347, 348, 349, 350, 351,
	476, 352, 353, 0, 354, 355, 356, 357, 358, 0,
	360, 361, 362, 359, 363, 364, 365, 366, 0, 367,
	926, 368, 369, 370, 371, 477, 372, 0, 373, 377,
	378, 379, 380, 381, 382, 383, 0, 390, 391, 384,
	386, 387, 388, 385, 389, 392, 393, 0, 394, 374,
	375, 395, 927, 396, 478, 397, 398, 0, 408, 399,
	400, 401, 376, 402, 406, 407, 403, 404, 405, 479,
	0, 410, 411, 409, 0, 412, 413, 414, 415, 416,
	262, 417, 263, 418, 0, 480, 481, 482, 419, 0,
	0, 420, 421, 483, 422, 484, 0, 423, 424, 425,
	0, 426, 427, 0, 0, 428, 429, 430, 431, 433,
	0, 434, 0, 432, 435, 436, 437, 485, 486, 487,
	0, 439, 438, 488, 0, 0, 0, 0, 440, 441,
	489, 442, 443, 444, 1207, 0, 1134, 1133, 0, 0,
	0, 0, 1131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 208, 209, 210, 211, 0, 212,
	0, 0, 0, 0, 445, 0, 0, 0, 0, 213,
	214, 215, 446, 447, 216, 448, 217, 218, 449, 0,
	219, 220, 221, 222, 223, 224, 0, 0, 225, 450,
	451, 452, 0, 226, 453, 0, 1038, 0, 227, 228,
	229, 230, 231, 0, 233, 234, 235, 232, 0, 236,
	0, 237, 238, 239, 0, 912, 240, 241, 0, 0,
	0, 0, 0, 0, 0, 242, 243, 244, 245, 246,
	247, 454, 455, 0, 248, 0, 250, 249, 0, 251,
	0, 0, 252, 253, 254, 0, 255, 0, 256, 257,
	0, 456, 258, 259, 261, 264, 260, 265, 266, 267,
	457, 458, 0, 913, 0, 0, 0, 0, 0, 268,
	269, 270, 459, 271, 272, 0, 273, 0, 274, 0,
	0, 914, 275, 276, 0, 277, 460, 0, 461, 278,
	0, 279, 280, 281, 282, 283, 284, 285, 1206, 463,
	464, 916, 0, 468, 287, 0, 0, 0, 0, 286,
	288, 295, 0, 915, 289, 465, 291, 290, 292, 293,
	294, 466, 0, 467, 0, 296, 917, 918, 297, 298,
	299, 919, 300, 301, 0, 0, 302, 303, 304, 305,
	0, 307, 306, 0, 308, 469, 920, 309, 310, 921,
	0, 311, 312, 0, 0, 313, 0, 314, 315, 978,
	977, 316, 317, 319, 320, 318, 922, 321, 322, 324,
	323, 0, 0, 923, 0, 470, 471, 325, 326, 0,
	327, 328, 329, 0, 0, 331, 332, 0, 0, 333,
	472, 924, 334, 925, 473, 335, 330, 336, 337, 338,
	339, 340, 341, 0, 342, 474, 343, 475, 344, 0,
	345, 0, 346, 347, 348, 349, 350, 351, 476, 352,
	353, 0, 354, 355, 356, 357, 358, 0, 360, 361,
	362, 359, 363, 364, 365, 366, 0, 367, 926, 368,
	369, 370, 371, 477, 372, 0, 373, 377, 378, 379,
	380, 381, 382, 383, 0, 390, 391, 384, 386, 387,
	388, 385, 389, 392, 393, 0, 394, 374, 375, 395,
	927, 396, 478, 397, 398, 0, 408, 399, 400, 401,
	376, 402, 406, 407, 403, 404, 405, 479, 0, 410,
	411, 409, 0, 412, 413, 414, 415, 416, 262, 417,
	263, 418, 0, 480, 481, 482, 419, 0, 0, 420,
	421, 483, 422, 484, 0, 423, 424, 425, 0, 426,
	427, 0, 0, 428, 429, 430, 431, 433, 0, 434,
	0, 432, 435, 436, 437, 485, 486, 487, 0, 439,
	438, 488, 0, 0, 0, 0, 440, 441, 489, 442,
	443, 444, 1204, 0, 1134, 1133, 0, 0, 0, 0,
	1131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 445, 0, 0, 0, 0, 213, 214, 215,
	446, 447, 216, 448, 217, 218, 449, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 450, 451, 452,
	0, 226, 453, 0, 1038, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 912, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 454,
	455, 0, 248, 0, 250, 249, 0, 251, 0, 0,
	252, 253, 254, 0, 255, 0, 256, 257, 0, 456,
	258, 259, 261, 264, 260, 265, 266, 267, 457, 458,
	0, 913, 0, 0, 0, 0, 0, 268, 269, 270,
	459, 271, 272, 0, 273, 0, 274, 0, 0, 914,
	275, 276, 0, 277, 460, 0, 461, 278, 0, 279,
	280, 281, 282, 283, 284, 285, 1203, 463, 464, 916,
	0, 468, 287, 0, 0, 0, 0, 286, 288, 295,
	0, 915, 289, 465, 291, 290, 292, 293, 294, 466,
	0, 467, 0, 296, 917, 918, 297, 298, 299, 919,
	300, 301, 0, 0, 302, 303, 304, 305, 0, 307,
	306, 0, 308, 469, 920, 309, 310, 921, 0, 311,
	312, 0, 0, 313, 0, 314, 315, 978, 977, 316,
	317, 319, 320, 318, 922, 321, 322, 324, 323, 0,
	0, 923, 0, 470, 471, 325, 326, 0, 327, 328,
	329, 0, 0, 331, 332, 0, 0, 333, 472, 924,
	334, 925, 473, 335, 330, 336, 337, 338, 339, 340,
	341, 0, 342, 474, 343, 475, 344, 0, 345, 0,
	346, 347, 348, 349, 350, 351, 476, 352, 353, 0,
	354, 355, 356, 357, 358, 0, 360, 361, 362, 359,
	363, 364, 365, 366, 0, 367, 926, 368, 369, 370,
	371, 477, 372, 0, 373, 377, 378, 379, 380, 381,
	382, 383, 0, 390, 391, 384, 386, 387, 388, 385,
	389, 392, 393, 0, 394, 374, 375, 395, 927, 396,
	478, 397, 398, 0, 408, 399, 400, 401, 376, 402,
	406, 407, 403, 404, 405, 479, 0, 410, 411, 409,
	0, 412, 413, 414, 415, 416, 262, 417, 263, 418,
	0, 480, 481, 482, 419, 0, 0, 420, 421, 483,
	422, 484, 0, 423, 424, 425, 0, 426, 427, 0,
	0, 428, 429, 430, 431, 433, 0, 434, 0, 432,
	435, 436, 437, 485, 486, 487, 0, 439, 438, 488,
	0, 0, 0, 0, 440, 441, 489, 442, 443, 444,
	1127, 0, 1134, 1133, 0, 0, 0, 0, 1131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	208, 209, 210, 211, 0, 212, 0, 0, 0, 0,
	445, 0, 0, 0, 0, 213, 214, 215, 446, 447,
	216, 448, 217, 218, 449, 0, 219, 220, 221, 222,
	223, 224, 0, 0, 225, 450, 451, 452, 0, 226,
	453, 0, 1038, 0, 227, 228, 229, 230, 231, 0,
	233, 234, 235, 232, 0, 236, 0, 237, 238, 239,
	0, 912, 240, 241, 0, 0, 0, 0, 0, 0,
	0, 242, 243, 244, 245, 246, 247, 454, 455, 0,
	248, 0, 250, 249, 0, 251, 0, 0, 252, 253,
	254, 0, 255, 0, 256, 257, 0, 456, 258, 259,
	261, 264, 260, 265, 266, 267, 457, 458, 0, 913,
	0, 0, 0, 0, 0, 268, 269, 270, 459, 271,
	272, 0, 273, 0, 274, 0, 0, 914, 275, 276,
	0, 277, 460, 0, 461, 278, 0, 279, 280, 281,
	282, 283, 284, 285, 1129, 463, 464, 916, 0, 468,
	287, 0, 0, 0, 0, 286, 288, 295, 0, 915,
	289, 465, 291, 290, 292, 293, 294, 466, 0, 467,
	0, 296, 917, 918, 297, 298, 299, 919, 300, 301,
	0, 0, 302, 303, 304, 305, 0, 307, 306, 0,
	308, 469, 920, 309, 310, 921, 0, 311, 312, 0,
	0, 313, 0, 314, 315, 978, 977, 316, 317, 319,
	320, 318, 922, 321, 322, 324, 323, 0, 0, 923,
	0, 470, 471, 325, 326, 0, 327, 328, 329, 0,
	0, 331, 332, 0, 0, 333, 472, 924, 334, 925,
	473, 335, 330, 336, 337, 338, 339, 340, 341, 0,
	342, 474, 343, 475, 344, 0, 345, 0, 346, 347,
	348, 349, 350, 351, 476, 352, 353, 0, 354, 355,
	356, 357, 358, 0, 360, 361, 362, 359, 363, 364,
	365, 366, 0, 367, 926, 368, 369, 370, 371, 477,
	372, 0, 373, 377, 378, 379, 380, 381, 382, 383,
	0, 390, 391, 384, 386, 387, 388, 385, 389, 392,
	393, 0, 394, 374, 375, 395, 927, 396, 478, 397,
	398, 0, 408, 399, 400, 401, 376, 402, 406, 407,
	403, 404, 405, 479, 0, 410, 411, 409, 0, 412,
	413, 414, 415, 416, 262, 417, 263, 418, 0, 480,
	481, 482, 419, 0, 0, 420, 421, 483, 422, 484,
	0, 423, 424, 425, 0, 426, 427, 0, 0, 428,
	429, 430, 431, 433, 0, 434, 0, 432, 435, 436,
	437, 485, 486, 487, 0, 439, 438, 488, 0, 0,
	0, 0, 440, 441, 489, 442, 443, 444, 1134, 1133,
	0, 0, 0, 0, 1131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 208, 209, 210, 211,
	0, 212, 0, 0, 0, 0, 445, 0, 0, 0,
	0, 213, 214, 215, 446, 447, 216, 448, 217, 218,
	449, 0, 219, 220, 221, 222, 223, 224, 0, 0,
	225, 450, 451, 452, 0, 226, 453, 0, 1038, 0,
	227, 228, 229, 230, 231, 0, 233, 234, 235, 232,
	0, 236, 0, 237, 238, 239, 0, 912, 240, 241,
	0, 0, 0, 0, 0, 0, 0, 242, 243, 244,
	245, 246, 247, 454, 455, 0, 248, 0, 250, 249,
	0, 251, 0, 0, 252, 253, 254, 0, 255, 0,
	256, 257, 0, 456, 258, 259, 261, 264, 260, 265,
	266, 267, 457, 458, 0, 913, 0, 0, 0, 0,
	0, 268, 269, 270, 459, 271, 272, 0, 273, 0,
	274, 0, 0, 914, 275, 276, 0, 277, 460, 0,
	461, 278, 0, 279, 280, 281, 282, 283, 284, 285,
	462, 463, 464, 916, 0, 468, 287, 0, 0, 0,
	0, 286, 288, 295, 0, 915, 289, 465, 291, 290,
	292, 293, 294, 466, 0, 467, 0, 296, 917, 918,
	297, 298, 299, 919, 300, 301, 0, 0, 302, 303,
	304, 305, 0, 307, 306, 0, 308, 469, 920, 309,
	310, 921, 0, 311, 312, 0, 0, 313, 0, 314,
	315, 978, 977, 316, 317, 319, 320, 318, 922, 321,
	322, 324, 323, 0, 0, 923, 0, 470, 471, 325,
	326, 0, 327, 328, 329, 0, 0, 331, 332, 0,
	0, 333, 472, 924, 334, 925, 473, 335, 330, 336,
	337, 338, 339, 340, 341, 0, 342, 474, 343, 475,
	344, 0, 345, 0, 346, 347, 348, 349, 350, 351,
	476, 352, 353, 0, 354, 355, 356, 357, 358, 0,
	360, 361, 362, 359, 363, 364, 365, 366, 0, 367,
	926, 368, 369, 370, 371, 477, 372, 0, 373, 377,
	378, 379, 380, 381, 382, 383, 0, 390, 391, 384,
	386, 387, 388, 385, 389, 392, 393, 0, 394, 374,
	375, 395, 927, 396, 478, 397, 398, 0, 408, 399,
	400, 401, 376, 402, 406, 407, 403, 404, 405, 479,
	0, 410, 411, 409, 0, 412, 413, 414, 415, 416,
	262, 417, 263, 418, 0, 480, 481, 482, 419, 0,
	0, 420, 421, 483, 422, 484, 0, 423, 424, 425,
	0, 426, 427, 0, 0, 428, 429, 430, 431, 433,
	0, 434, 0, 432, 435, 436, 437, 485, 486, 487,
	0, 439, 438, 488, 1134, 1133, 0, 0, 440, 441,
	489, 442, 443, 444, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 445, 0, 0, 0, 0, 213, 214, 215,
	446, 447, 216, 448, 217, 218, 449, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 450, 451, 452,
	0, 226, 453, 0, 1038, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 912, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 454,
	455, 0, 248, 0, 250, 249, 0, 251, 0, 0,
	252, 253, 254, 0, 255, 0, 256, 257, 0, 456,
	258, 259, 261, 264, 260, 265, 266, 267, 457, 458,
	0, 913, 0, 0, 0, 0, 0, 268, 269, 270,
	459, 271, 272, 0, 273, 0, 274, 0, 0, 914,
	275, 276, 0, 277, 460, 0, 461, 278, 0, 279,
	280, 281, 282, 283, 284, 285, 462, 463, 464, 916,
	0, 468, 287, 0, 0, 0, 0, 286, 288, 295,
	0, 915, 289, 465, 291, 290, 292, 293, 294, 466,
	0, 467, 0, 296, 917, 918, 297, 298, 299, 919,
	300, 301, 0, 0, 302, 303, 304, 305, 0, 307,
	306, 0, 308, 469, 920, 309, 310, 921, 0, 311,
	312, 0, 0, 313, 0, 314, 315, 978, 977, 316,
	317, 319, 320, 318, 922, 321, 322, 324, 323, 0,
	0, 923, 0, 470, 471, 325, 326, 0, 327, 328,
	329, 0, 0, 331, 332, 0, 0, 333, 472, 924,
	334, 925, 473, 335, 330, 336, 337, 338, 339, 340,
	341, 0, 342, 474, 343, 475, 344, 0, 345, 0,
	346, 347, 348, 349, 350, 351, 476, 352, 353, 0,
	354, 355, 356, 357, 358, 0, 360, 361, 362, 359,
	363, 364, 365, 366, 0, 367, 926, 368, 369, 370,
	371, 477, 372, 0, 373, 377, 378, 379, 380, 381,
	382, 383, 0, 390, 391, 384, 386, 387, 388, 385,
	389, 392, 393, 0, 394, 374, 375, 395, 927, 396,
	478, 397, 398, 0, 408, 399, 400, 401, 376, 402,
	406, 407, 403, 404, 405, 479, 0, 410, 411, 409,
	0, 412, 413, 414, 415, 416, 262, 417, 263, 418,
	0, 480, 481, 482, 419, 0, 0, 420, 421, 483,
	422, 484, 0, 423, 424, 425, 0, 426, 427, 0,
	0, 428, 429, 430, 431, 433, 0, 434, 0, 432,
	435, 436, 437, 485, 486, 487, 1134, 439, 438, 488,
	0, 0, 0, 0, 440, 441, 489, 442, 443, 444,
	0, 0, 0, 207, 208, 209, 210, 211, 0, 212,
	0, 0, 0, 0, 445, 0, 0, 0, 0, 213,
	214, 215, 446, 447, 216, 448, 217, 218, 449, 0,
	219, 220, 221, 222, 223, 224, 0, 0, 225, 450,
	451, 452, 0, 226, 453, 0, 1038, 0, 227, 228,
	229, 230, 231, 0, 233, 234, 235, 232, 0, 236,
	0, 237, 238, 239, 0, 912, 240, 241, 0, 0,
	0, 0, 0, 0, 0, 242, 243, 244, 245, 246,
	247, 454, 455, 0, 248, 0, 250, 249, 0, 251,
	0, 0, 252, 253, 254, 0, 255, 0, 256, 257,
	0, 456, 258, 259, 261, 264, 260, 265, 266, 267,
	457, 458, 0, 913, 0, 0, 0, 0, 0, 268,
	269, 270, 459, 271, 272, 0, 273, 0, 274, 0,
	0, 914, 275, 276, 0, 277, 460, 0, 461, 278,
	0, 279, 280, 281, 282, 283, 284, 285, 462, 463,
	464, 916, 0, 468, 287, 0, 0, 0, 0, 286,
	288, 295, 0, 915, 289, 465, 291, 290, 292, 293,
	294, 466, 0, 467, 0, 296, 917, 918, 297, 298,
	299, 919, 300, 301, 0, 0, 302, 303, 304, 305,
	0, 307, 306, 0, 308, 469, 920, 309, 310, 921,
	0, 311, 312, 0, 0, 313, 0, 314, 315, 978,
	977, 316, 317, 319, 320, 318, 922, 321, 322, 324,
	323, 0, 0, 923, 0, 470, 471, 325, 326, 0,
	327, 328, 329, 0, 0, 331, 332, 0, 0, 333,
	472, 924, 334, 925, 473, 335, 330, 336, 337, 338,
	339, 340, 341, 0, 342, 474, 343, 475, 344, 0,
	345, 0, 346, 347, 348, 349, 350, 351, 476, 352,
	353, 0, 354, 355, 356, 357, 358, 0, 360, 361,
	362, 359, 363, 364, 365, 366, 0, 367, 926, 368,
	369, 370, 371, 477, 372, 0, 373, 377, 378, 379,
	380, 381, 382, 383, 0, 390, 391, 384, 386, 387,
	388, 385, 389, 392, 393, 0, 394, 374, 375, 395,
	927, 396, 478, 397, 398, 0, 408, 399, 400, 401,
	376, 402, 406, 407, 403, 404, 405, 479, 0, 410,
	411, 409, 0, 412, 413, 414, 415, 416, 262, 417,
	263, 418, 0, 480, 481, 482, 419, 0, 0, 420,
	421, 483, 422, 484, 0, 423, 424, 425, 0, 426,
	427, 0, 0, 428, 429, 430, 431, 433, 0, 434,
	0, 432, 435, 436, 437, 485, 486, 487, 0, 439,
	438, 488, 666, 0, 558, 0, 440, 441, 489, 442,
	443, 444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 208, 209, 210, 211, 0, 212, 0, 0,
	0, 0, 445, 0, 0, 0, 0, 213, 214, 215,
	446, 447, 216, 448, 217, 218, 449, 0, 219, 220,
	221, 222, 223, 224, 0, 0, 225, 450, 451, 452,
	0, 226, 453, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 233, 234, 235, 232, 0, 236, 0, 237,
	238, 239, 0, 0, 240, 241, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 564, 245, 246, 247, 454,
	455, 0, 248, 0, 250, 249, 0, 251, 0, 0,
	252, 253, 254, 0, 255, 0, 256, 257, 0, 456,
	258, 259, 261, 264, 260, 265, 266, 267, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 270,
	459, 271, 272, 0, 273, 0, 274, 0, 0, 0,
	275, 276, 0, 277, 460, 0, 461, 278, 0, 279,
	280, 281, 282, 283, 284, 285, 462, 463, 464, 0,
	0, 468, 287, 0, 0, 0, 0, 286, 288, 295,
	0, 0, 289, 465, 291, 290, 292, 293, 294, 466,
	0, 467, 0, 296, 0, 0, 297, 298, 299, 0,
	300, 301, 0, 0, 302, 303, 304, 305, 0, 307,
	306, 0, 308, 469, 0, 309, 310, 0, 0, 311,
	312, 0, 0, 313, 0, 314, 315, 0, 0, 316,
	317, 319, 320, 318, 0, 321, 322, 324, 323, 0,
	0, 0, 0, 470, 471, 325, 326, 0, 327, 328,
	329, 0, 0, 331, 332, 0, 0, 333, 472, 0,
	334, 0, 473, 335, 330, 336, 337, 338, 339, 340,
	341, 0, 342, 474, 343, 475, 344, 0, 345, 0,
	346, 347, 348, 349, 350, 351, 476, 352, 353, 0,
	354, 355, 356, 357, 358, 0, 360, 361, 362, 359,
	363, 364, 365, 366, 0, 367, 0, 368, 369, 370,
	371, 477, 372, 0, 373, 377, 378, 379, 380, 381,
	382, 383, 0, 390, 391, 384, 386, 387, 388, 385,
	389, 392, 393, 0, 394, 374, 375, 395, 0, 396,
	478, 397, 398, 0, 408, 399, 400, 401, 376, 402,
	406, 407, 403, 404, 405, 479, 0, 410, 411, 409,
	563, 412, 413, 414, 415, 416, 262, 417, 263, 418,
	0, 480, 481, 482, 419, 0, 0, 420, 421, 483,
	422, 484, 0, 423, 424, 425, 0, 426, 427, 0,
	0, 428, 429, 430, 431, 433, 0, 434, 0, 432,
	435, 436, 437, 485, 486, 487, 0, 439, 438, 488,
	0, 557, 0, 558, 440, 441, 489, 442, 443, 444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 567, 212, 0, 0, 0,
	0, 445, 0, 0, 0, 0, 213, 214, 215, 446,
	447, 216, 448, 217, 218, 449, 0, 219, 220, 221,
	222, 223, 224, 0, 0, 225, 450, 451, 452, 0,
	226, 453, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 0, 240, 241, 0, 0, 0, 0, 0,
	0, 0, 242, 243, 564, 245, 246, 247, 454, 455,
	0, 248, 0, 250, 249, 0, 251, 0, 0, 252,
	253, 254, 0, 255, 0, 256, 257, 0, 456, 258,
	259, 261, 264, 260, 265, 266, 267, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 459,
	271, 272, 0, 273, 0, 274, 0, 0, 0, 275,
	276, 0, 277, 460, 0, 461, 278, 0, 279, 280,
	281, 282, 283, 284, 285, 462, 463, 464, 0, 0,
	468, 287, 0, 0, 0, 0, 286, 288, 295, 0,
	0, 289, 465, 291, 290, 292, 293, 294, 466, 0,
	467, 0, 296, 0, 0, 297, 298, 299, 0, 300,
	301, 0, 0, 302, 303, 304, 305, 0, 307, 306,
	0, 308, 469, 0, 309, 310, 0, 0, 311, 312,
	0, 0, 313, 0, 314, 315, 0, 0, 316, 317,
	319, 320, 318, 0, 321, 322, 324, 323, 0, 0,
	0, 0, 470, 471, 325, 326, 0, 327, 328, 329,
	0, 0, 331, 332, 0, 0, 333, 472, 0, 334,
	0, 473, 335, 330, 336, 337, 338, 339, 340, 341,
	0, 342, 474, 343, 475, 344, 0, 345, 0, 346,
	347, 348, 349, 350, 351, 476, 352, 353, 0, 354,
	355, 356, 357, 358, 0, 360, 361, 362, 359, 363,
	364, 365, 366, 0, 367, 0, 368, 369, 370, 371,
	477, 372, 0, 373, 377, 378, 379, 380, 381, 382,
	383, 0, 390, 391, 384, 386, 387, 388, 385, 389,
	392, 393, 0, 394, 374, 375, 395, 0, 396, 478,
	397, 398, 0, 408, 399, 400, 401, 376, 402, 406,
	407, 403, 404, 405, 479, 0, 410, 411, 409, 563,
	412, 413, 414, 415, 416, 262, 417, 263, 418, 0,
	480, 481, 482, 419, 0, 0, 420, 421, 483, 422,
	484, 0, 423, 424, 425, 0, 426, 427, 0, 0,
	428, 429, 430, 431, 433, 0, 434, 0, 432, 435,
	436, 437, 485, 486, 487, 558, 439, 438, 488, 0,
	0, 0, 0, 440, 441, 489, 442, 443, 444, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 445, 567, 0, 0, 0, 213, 214,
	215, 446, 447, 216, 448, 217, 218, 449, 0, 219,
	220, 221, 222, 223, 224, 0, 0, 225, 450, 451,
	452, 0, 226, 453, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 0, 240, 241, 0, 0, 0,
	0, 0, 0, 0, 242, 243, 564, 245, 246, 247,
	454, 455, 0, 248, 0, 250, 249, 0, 251, 0,
	0, 252, 253, 254, 0, 255, 0, 256, 257, 0,
	456, 258, 259, 261, 264, 260, 265, 266, 267, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 459, 271, 272, 0, 273, 0, 274, 0, 0,
	0, 275, 276, 0, 277, 460, 0, 461, 278, 0,
	279, 280, 281, 282, 283, 284, 285, 462, 463, 464,
	0, 0, 468, 287, 0, 0, 0, 0, 286, 288,
	295, 0, 0, 289, 465, 291, 290, 292, 293, 294,
	466, 0, 467, 0, 296, 0, 0, 297, 298, 299,
	0, 300, 301, 0, 0, 302, 303, 304, 305, 0,
	307, 306, 0, 308, 469, 0, 309, 310, 0, 0,
	311, 312, 0, 0, 313, 0, 314, 315, 0, 0,
	316, 317, 319, 320, 318, 0, 321, 322, 324, 323,
	0, 0, 0, 0, 470, 471, 325, 326, 0, 327,
	328, 329, 0, 0, 331, 332, 0, 0, 333, 472,
	0, 334, 0, 473, 335, 330, 336, 337, 338, 339,
	340, 341, 0, 342, 474, 343, 475, 344, 0, 345,
	0, 346, 347, 348, 349, 350, 351, 476, 352, 353,
	0, 354, 355, 356, 357, 358, 0, 360, 361, 362,
	359, 363, 364, 365, 366, 0, 367, 0, 1824, 369,
	370, 371, 477, 372, 0, 373, 377, 378, 379, 380,
	381, 382, 383, 0, 390, 391, 384, 386, 387, 388,
	385, 389, 392, 393, 0, 394, 374, 375, 395, 0,
	396, 478, 397, 398, 0, 408, 399, 400, 401, 376,
	402, 406, 407, 403, 404, 405, 479, 0, 410, 411,
	409, 563, 412, 413, 414, 415, 416, 262, 417, 263,
	418, 0, 480, 481, 482, 419, 0, 0, 420, 421,
	483, 422, 484, 0, 423, 424, 425, 0, 426, 427,
	0, 0, 428, 429, 430, 431, 433, 0, 434, 0,
	432, 435, 436, 437, 485, 486, 487, 558, 439, 438,
	488, 0, 0, 0, 0, 440, 441, 489, 442, 443,
	444, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 445, 567, 0, 0, 0,
	213, 214, 215, 446, 447, 216, 448, 217, 218, 449,
	0, 219, 220, 221, 222, 223, 224, 0, 0, 225,
	450, 451, 452, 0, 226, 453, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 0, 240, 241, 0,
	0, 0, 0, 0, 0, 0, 242, 243, 564, 245,
	246, 247, 454, 455, 0, 248, 0, 250, 249, 0,
	251, 0, 0, 252, 253, 254, 0, 255, 0, 256,
	257, 0, 456, 258, 259, 261, 264, 260, 265, 266,
	267, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 459, 271, 272, 0, 273, 0, 274,
	0, 0, 0, 275, 276, 0, 277, 460, 0, 461,
	278, 0, 279, 280, 281, 282, 283, 284, 285, 462,
	463, 464, 0, 0, 468, 287, 0, 0, 0, 0,
	286, 288, 295, 0, 0, 289, 465, 291, 290, 292,
	293, 294, 466, 0, 467, 0, 296, 0, 0, 297,
	298, 299, 0, 300, 301, 0, 0, 302, 303, 304,
	305, 0, 307, 306, 0, 308, 469, 0, 309, 310,
	0, 0, 311, 312, 0, 0, 313, 0, 314, 315,
	0, 0, 316, 317, 319, 320, 318, 0, 321, 322,
	324, 323, 0, 0, 0, 0, 470, 471, 325, 326,
	0, 327, 328, 329, 0, 0, 331, 332, 0, 0,
	333, 472, 0, 334, 0, 473, 335, 330, 336, 337,
	338, 339, 340, 341, 0, 342, 474, 343, 475, 344,
	0, 345, 0, 346, 347, 348, 349, 350, 351, 476,
	352, 353, 0, 354, 355, 356, 357, 358, 0, 360,
	361, 362, 359, 363, 364, 365, 366, 0, 367, 0,
	368, 369, 370, 371, 477, 372, 0, 373, 377, 378,
	379, 380, 381, 382, 383, 0, 390, 391, 384, 386,
	387, 388, 385, 389, 392, 393, 0, 394, 374, 375,
	395, 0, 396, 478, 397, 398, 0, 408, 399, 400,
	401, 376, 402, 406, 407, 403, 404, 405, 479, 0,
	410, 411, 409, 563, 412, 413, 414, 415, 416, 262,
	417, 263, 418, 0, 480, 481, 482, 419, 0, 0,
	420, 421, 483, 422, 484, 0, 423, 424, 425, 0,
	426, 427, 0, 0, 428, 429, 430, 431, 433, 0,
	434, 0, 432, 435, 436, 437, 485, 486, 487, 204,
	439, 438, 488, 0, 0, 0, 0, 440, 441, 489,
	442, 443, 444, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 445, 567, 0,
	0, 0, 213, 214, 215, 446, 447, 216, 448, 217,
	218, 449, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 450, 451, 452, 0, 226, 453, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 454, 455, 0, 248, 0, 250,
	249, 0, 251, 0, 0, 252, 253, 254, 0, 255,
	0, 256, 257, 0, 456, 258, 259, 261, 264, 260,
	265, 266, 267, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 459, 271, 272, 0, 273,
	0, 274, 0, 0, 0, 275, 276, 0, 277, 460,
	0, 461, 278, 0, 279, 280, 281, 282, 283, 284,
	285, 462, 463, 464, 0, 0, 468, 287, 0, 0,
	0, 0, 286, 288, 295, 0, 0, 289, 465, 291,
	290, 292, 293, 294, 466, 0, 467, 0, 296, 0,
	0, 297, 298, 299, 0, 300, 301, 0, 0, 302,
	303, 304, 305, 0, 307, 306, 0, 308, 469, 0,
	309, 310, 0, 0, 311, 312, 0, 0, 313, 0,
	314, 315, 0, 0, 316, 317, 319, 320, 318, 0,
	321, 322, 324, 323, 0, 0, 0, 0, 470, 471,
	325, 326, 0, 327, 328, 329, 0, 0, 331, 332,
	0, 0, 333, 472, 0, 334, 0, 473, 335, 330,
	336, 337, 338, 339, 340, 341, 0, 342, 474, 343,
	475, 344, 0, 345, 0, 346, 347, 348, 349, 350,
	351, 476, 352, 353, 0, 354, 355, 356, 357, 358,
	0, 360, 361, 362, 359, 363, 364, 365, 366, 0,
	367, 0, 368, 369, 370, 371, 477, 372, 0, 373,
	377, 378, 379, 380, 381, 382, 383, 0, 390, 391,
	384, 386, 387, 388, 385, 389, 392, 393, 0, 394,
	374, 375, 395, 0, 396, 478, 397, 398, 0, 408,
	399, 400, 401, 376, 402, 406, 407, 403, 404, 405,
	479, 0, 410, 411, 409, 0, 412, 413, 414, 415,
	416, 262, 417, 263, 418, 0, 480, 481, 482, 419,
	0, 0, 420, 421, 483, 422, 484, 0, 423, 424,
	425, 0, 426, 427, 0, 0, 428, 429, 430, 431,
	433, 0, 434, 0, 432, 435, 436, 437, 485, 486,
	487, 204, 439, 438, 488, 0, 0, 0, 0, 440,
	441, 489, 442, 443, 444, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 445,
	567, 0, 0, 0, 213, 214, 215, 446, 447, 216,
	448, 217, 218, 449, 0, 219, 220, 221, 222, 223,
	224, 0, 0, 225, 450, 451, 452, 2142, 226, 453,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 2139, 236, 0, 237, 238, 239, 0,
	0, 240, 241, 0, 0, 0, 0, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 454, 455, 0, 248,
	0, 250, 249, 0, 251, 0, 0, 252, 253, 254,
	0, 255, 0, 256, 257, 0, 456, 258, 259, 261,
	264, 260, 265, 266, 267, 457, 458, 0, 2282, 0,
	0, 0, 0, 0, 268, 269, 270, 459, 271, 272,
	0, 273, 0, 274, 2145, 0, 0, 275, 276, 0,
	277, 460, 0, 461, 278, 0, 279, 280, 281, 282,
	283, 284, 285, 462, 463, 464, 0, 0, 468, 287,
	0, 0, 0, 2279, 286, 288, 295, 0, 0, 289,
	465, 291, 290, 292, 293, 294, 466, 0, 467, 0,
	2281, 0, 0, 297, 298, 299, 0, 300, 301, 0,
	0, 302, 303, 304, 305, 0, 307, 306, 0, 308,
	469, 0, 309, 310, 2278, 0, 311, 312, 0, 0,
	313, 0, 314, 315, 0, 0, 316, 317, 319, 320,
	318, 0, 321, 322, 324, 323, 0, 0, 0, 0,
	470, 471, 325, 326, 0, 327, 328, 329, 0, 0,
	331, 332, 0, 0, 333, 472, 0, 334, 0, 473,
	335, 330, 336, 337, 338, 339, 340, 341, 0, 342,
	474, 343, 475, 344, 2144, 345, 0, 346, 347, 348,
	349, 350, 351, 476, 352, 353, 0, 354, 355, 356,
	357, 358, 0, 360, 361, 362, 359, 363, 364, 365,
	366, 0, 367, 0, 368, 369, 370, 371, 477, 372,
	0, 373, 377, 378, 379, 380, 381, 382, 383, 0,
	390, 391, 384, 386, 387, 388, 385, 389, 392, 393,
	0, 394, 374, 375, 395, 0, 396, 478, 397, 398,
	0, 408, 399, 400, 401, 376, 402, 406, 407, 403,
	404, 405, 479, 0, 410, 411, 409, 0, 412, 413,
	414, 415, 416, 262, 417, 263, 418, 0, 480, 481,
	482, 419, 0, 0, 420, 421, 483, 422, 484, 0,
	423, 424, 425, 0, 426, 427, 0, 2280, 428, 429,
	430, 431, 433, 0, 434, 0, 432, 435, 436, 437,
	485, 486, 487, 204, 439, 438, 488, 0, 0, 0,
	0, 440, 441, 489, 442, 443, 444, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 445, 0, 0, 0, 0, 213, 214, 215, 446,
	447, 216, 448, 217, 218, 449, 0, 219, 220, 221,
	222, 223, 224, 0, 0, 225, 450, 451, 452, 2142,
	226, 453, 0, 0, 2136, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 2139, 236, 0, 237, 238,
	239, 0, 0, 240, 241, 0, 0, 0, 0, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 454, 455,
	0, 248, 0, 250, 249, 0, 251, 0, 0, 252,
	253, 254, 0, 255, 0, 256, 257, 0, 456, 258,
	259, 261, 264, 260, 265, 266, 267, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 459,
	271, 272, 0, 273, 0, 274, 2145, 0, 0, 275,
	276, 0, 277, 460, 0, 461, 278, 0, 279, 280,
	281, 282, 283, 284, 285, 2135, 463, 464, 0, 0,
	468, 287, 0, 0, 0, 0, 286, 288, 295, 0,
	0, 289, 465, 291, 290, 292, 293, 294, 466, 0,
	467, 0, 296, 0, 0, 297, 298, 299, 0, 300,
	301, 0, 0, 302, 303, 304, 305, 0, 307, 306,
	0, 308, 469, 0, 309, 310, 0, 0, 311, 312,
	0, 0, 313, 0, 314, 315, 0, 0, 316, 317,
	319, 320, 318, 0, 321, 322, 324, 323, 0, 0,
	0, 0, 470, 471, 325, 326, 0, 327, 328, 329,
	0, 0, 331, 332, 0, 0, 333, 472, 0, 334,
	0, 473, 335, 330, 336, 337, 338, 339, 340, 341,
	0, 342, 474, 343, 475, 344, 2144, 345, 0, 346,
	347, 348, 349, 350, 351, 476, 352, 353, 0, 354,
	355, 356, 357, 358, 0, 360, 361, 362, 359, 363,
	364, 365, 366, 0, 367, 0, 368, 369, 370, 371,
	477, 372, 0, 373, 377, 378, 379, 380, 381, 382,
	383, 0, 390, 391, 384, 386, 387, 388, 385, 389,
	392, 393, 0, 394, 374, 375, 395, 0, 396, 478,
	397, 398, 0, 408, 399, 400, 401, 376, 402, 406,
	407, 403, 404, 405, 479, 0, 410, 411, 409, 0,
	412, 413, 414, 415, 416, 262, 417, 263, 418, 0,
	480, 481, 482, 419, 0, 0, 420, 421, 483, 422,
	484, 0, 423, 424, 425, 0, 426, 427, 0, 2143,
	428, 429, 430, 431, 433, 0, 434, 0, 432, 435,
	436, 437, 485, 486, 487, 0, 439, 438, 488, 520,
	0, 204, 0, 440, 441, 489, 442, 443, 444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 208,
	209, 519, 211, 509, 212, 0, 0, 0, 0, 445,
	0, 0, 0, 0, 213, 214, 215, 446, 447, 216,
	448, 217, 218, 449, 0, 219, 220, 221, 222, 223,
	224, 0, 0, 225, 450, 451, 452, 0, 226, 453,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 512,
	0, 240, 241, 0, 0, 0, 0, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 454, 455, 0, 248,
	0, 250, 249, 0, 251, 0, 0, 252, 253, 254,
	0, 255, 0, 256, 257, 0, 456, 258, 259, 261,
	264, 260, 265, 266, 267, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 459, 271, 272,
	0, 273, 0, 274, 0, 0, 0, 275, 276, 513,
	277, 460, 0, 461, 278, 0, 279, 280, 281, 282,
	283, 284, 285, 462, 463, 464, 0, 0, 468, 287,
	0, 0, 0, 0, 286, 288, 295, 0, 0, 289,
	465, 291, 290, 292, 293, 294, 466, 0, 467, 0,
	296, 0, 0, 297, 298, 299, 0, 300, 301, 0,
	0, 302, 303, 304, 305, 0, 307, 306, 0, 308,
	469, 0, 309, 310, 0, 0, 311, 312, 0, 0,
	313, 0, 314, 315, 0, 0, 316, 317, 319, 320,
	318, 0, 321, 322, 324, 323, 0, 0, 0, 0,
	470, 471, 325, 326, 0, 327, 328, 329, 0, 0,
	331, 332, 0, 0, 333, 472, 0, 334, 0, 473,
	335, 330, 336, 337, 338, 339, 340, 341, 0, 342,
	474, 343, 475, 344, 0, 345, 0, 346, 347, 348,
	349, 350, 351, 476, 352, 353, 0, 354, 355, 356,
	357, 358, 0, 360, 361, 362, 359, 363, 364, 365,
	366, 0, 367, 0, 368, 369, 370, 371, 477, 372,
	0, 373, 377, 378, 379, 380, 381, 382, 383, 514,
	390, 391, 384, 386, 387, 388, 385, 389, 392, 393,
	0, 394, 374, 375, 395, 0, 396, 478, 397, 398,
	0, 408, 399, 400, 401, 376, 402, 406, 407, 403,
	404, 405, 479, 0, 410, 411, 409, 0, 412, 413,
	414, 415, 416, 262, 417, 263, 418, 0, 480, 481,
	482, 419, 0, 0, 420, 421, 483, 422, 484, 0,
	423, 424, 425, 0, 426, 427, 0, 0, 428, 429,
	430, 431, 433, 0, 434, 0, 432, 435, 436, 437,
	485, 486, 487, 0, 439, 438, 488, 508, 0, 204,
	0, 440, 441, 489, 442, 443, 444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 509, 212, 0, 0, 0, 0, 445, 0, 0,
	0, 0, 213, 214, 215, 446, 447, 216, 448, 217,
	218, 449, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 450, 451, 452, 0, 226, 453, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 512, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 454, 455, 0, 248, 0, 250,
	249, 0, 251, 0, 0, 252, 253, 254, 0, 255,
	0, 256, 257, 0, 456, 258, 259, 261, 264, 260,
	265, 266, 267, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 459, 271, 272, 0, 273,
	0, 274, 0, 0, 0, 275, 276, 513, 277, 460,
	0, 461, 278, 0, 279, 280, 281, 282, 283, 284,
	285, 462, 463, 464, 0, 0, 468, 287, 0, 0,
	0, 0, 286, 288, 295, 0, 0, 289, 465, 291,
	290, 292, 293, 294, 466, 0, 467, 0, 296, 0,
	0, 297, 298, 299, 0, 300, 301, 0, 0, 302,
	303, 304, 305, 0, 307, 306, 0, 308, 469, 0,
	309, 310, 0, 0, 311, 312, 0, 0, 313, 0,
	314, 315, 0, 0, 316, 317, 319, 320, 318, 0,
	321, 322, 324, 323, 0, 0, 0, 0, 470, 471,
	325, 326, 0, 327, 328, 329, 0, 0, 331, 332,
	0, 0, 333, 472, 0, 334, 0, 473, 335, 330,
	336, 337, 338, 339, 340, 341, 0, 342, 474, 343,
	475, 344, 0, 345, 0, 346, 347, 348, 349, 350,
	351, 476, 352, 353, 0, 354, 355, 356, 357, 358,
	0, 360, 361, 362, 359, 363, 364, 365, 366, 0,
	367, 0, 368, 369, 370, 371, 477, 372, 0, 373,
	377, 378, 379, 380, 381, 382, 383, 514, 390, 391,
	384, 386, 387, 388, 385, 389, 392, 393, 0, 394,
	374, 375, 395, 0, 396, 478, 397, 398, 0, 408,
	399, 400, 401, 376, 402, 406, 407, 403, 404, 405,
	479, 0, 410, 411, 409, 0, 412, 413, 414, 415,
	416, 262, 417, 263, 418, 0, 480, 481, 482, 419,
	0, 0, 420, 421, 483, 422, 484, 0, 423, 424,
	425, 0, 426, 427, 0, 0, 428, 429, 430, 431,
	433, 0, 434, 0, 432, 435, 436, 437, 485, 486,
	487, 204, 439, 438, 488, 0, 0, 0, 0, 440,
	441, 489, 442, 443, 444, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 445,
	0, 0, 0, 0, 213, 214, 215, 446, 447, 216,
	448, 217, 218, 449, 0, 219, 220, 221, 222, 223,
	224, 0, 0, 225, 450, 451, 452, 0, 226, 453,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 512,
	0, 240, 241, 0, 0, 0, 0, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 454, 455, 0, 248,
	0, 250, 249, 0, 251, 0, 0, 252, 253, 254,
	0, 255, 0, 256, 257, 0, 456, 258, 259, 261,
	264, 260, 265, 266, 267, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 459, 271, 272,
	0, 273, 0, 274, 0, 0, 0, 275, 276, 513,
	277, 460, 0, 461, 278, 0, 279, 280, 281, 282,
	283, 284, 285, 462, 463, 464, 0, 0, 468, 287,
	0, 0, 0, 0, 286, 288, 295, 0, 0, 289,
	465, 291, 290, 292, 293, 294, 466, 0, 467, 0,
	296, 0, 0, 297, 298, 299, 0, 300, 301, 0,
	0, 302, 303, 304, 305, 0, 307, 306, 0, 308,
	469, 0, 309, 310, 0, 0, 311, 312, 0, 0,
	313, 0, 314, 315, 0, 0, 316, 317, 319, 320,
	318, 0, 321, 322, 324, 323, 0, 0, 0, 0,
	470, 471, 325, 326, 0, 327, 328, 329, 0, 0,
	331, 332, 0, 0, 333, 472, 0, 334, 0, 473,
	335, 330, 336, 337, 338, 339, 340, 341, 0, 342,
	474, 343, 475, 344, 0, 345, 0, 346, 347, 348,
	349, 350, 351, 476, 352, 353, 0, 354, 355, 356,
	357, 358, 0, 360, 361, 362, 359, 363, 364, 365,
	366, 0, 367, 0, 368, 369, 370, 371, 477, 372,
	0, 373, 377, 378, 379, 380, 381, 382, 383, 514,
	390, 391, 384, 386, 387, 388, 385, 389, 392, 393,
	0, 394, 374, 375, 395, 0, 396, 478, 397, 398,
	0, 408, 399, 400, 401, 376, 402, 406, 407, 403,
	404, 405, 479, 0, 410, 411, 409, 0, 412, 413,
	414, 415, 416, 262, 417, 263, 418, 0, 480, 481,
	482, 419, 0, 0, 420, 421, 483, 422, 484, 0,
	423, 424, 425, 0, 426, 427, 0, 0, 428, 429,
	430, 431, 433, 0, 434, 0, 432, 435, 436, 437,
	485, 486, 487, 0, 439, 438, 488, 1346, 0, 204,
	0, 440, 441, 489, 442, 443, 444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 445, 0, 0,
	0, 0, 213, 214, 215, 446, 447, 216, 448, 217,
	218, 449, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 450, 451, 452, 0, 226, 453, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 454, 455, 0, 248, 0, 250,
	249, 0, 251, 0, 0, 252, 253, 254, 0, 255,
	0, 256, 257, 0, 456, 258, 259, 261, 264, 260,
	265, 266, 267, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 459, 271, 272, 0, 273,
	0, 274, 0, 0, 0, 275, 276, 0, 277, 460,
	0, 461, 278, 0, 279, 280, 281, 282, 283, 284,
	285, 462, 463, 464, 0, 0, 468, 287, 0, 0,
	0, 0, 286, 288, 295, 0, 0, 289, 465, 291,
	290, 292, 293, 294, 466, 0, 467, 0, 296, 0,
	0, 297, 298, 299, 0, 300, 301, 0, 0, 302,
	303, 304, 305, 0, 307, 306, 0, 308, 469, 0,
	309, 310, 0, 0, 311, 312, 0, 0, 313, 0,
	314, 315, 0, 0, 316, 317, 319, 320, 318, 0,
	321, 322, 324, 323, 0, 0, 0, 0, 470, 471,
	325, 326, 0, 327, 328, 329, 0, 0, 331, 332,
	0, 0, 333, 472, 0, 334, 0, 473, 335, 330,
	336, 337, 338, 339, 340, 341, 0, 342, 474, 343,
	475, 344, 0, 345, 0, 346, 347, 348, 349, 350,
	351, 476, 352, 353, 0, 354, 355, 356, 357, 358,
	0, 360, 361, 362, 359, 363, 364, 365, 366, 0,
	367, 0, 368, 369, 370, 371, 477, 372, 0, 373,
	377, 378, 379, 380, 381, 382, 383, 0, 1349, 391,
	384, 386, 387, 388, 385, 389, 392, 393, 0, 394,
	374, 375, 395, 0, 396, 478, 397, 398, 0, 408,
	399, 400, 401, 376, 402, 406, 407, 403, 404, 405,
	479, 0, 410, 411, 409, 1347, 412, 413, 414, 415,
	416, 262, 417, 263, 418, 0, 480, 481, 482, 419,
	0, 0, 420, 421, 483, 422, 484, 0, 423, 424,
	425, 0, 426, 427, 0, 0, 428, 429, 430, 431,
	433, 0, 434, 0, 432, 435, 436, 437, 485, 486,
	487, 0, 1348, 438, 488, 1122, 0, 204, 0, 440,
	441, 489, 442, 443, 444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 445, 0, 0, 0, 0,
	213, 214, 215, 446, 447, 216, 448, 217, 218, 449,
	0, 219, 220, 221, 222, 223, 224, 0, 0, 225,
	450, 451, 452, 0, 226, 453, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 0, 240, 241, 0,
	0, 0, 0, 0, 0, 0, 242, 243, 244, 245,
	246, 247, 454, 455, 0, 248, 0, 250, 249, 0,
	251, 0, 0, 252, 253, 254, 0, 255, 0, 256,
	257, 0, 456, 258, 259, 261, 264, 260, 265, 266,
	267, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 459, 271, 272, 0, 273, 0, 274,
	0, 0, 0, 275, 276, 0, 277, 460, 0, 461,
	278, 0, 279, 280, 281, 282, 283, 284, 285, 1124,
	463, 464, 0, 0, 468, 287, 0, 0, 0, 0,
	286, 288, 295, 0, 0, 289, 465, 291, 290, 292,
	293, 294, 466, 0, 467, 0, 296, 0, 0, 297,
	298, 299, 0, 300, 301, 0, 0, 302, 303, 304,
	305, 0, 307, 306, 0, 308, 469, 0, 309, 310,
	0, 0, 311, 312, 0, 0, 313, 0, 314, 315,
	0, 0, 316, 317, 319, 320, 318, 0, 321, 322,
	324, 323, 0, 0, 0, 0, 470, 471, 325, 326,
	0, 327, 328, 329, 0, 968, 331, 332, 0, 0,
	333, 472, 0, 334, 0, 473, 335, 330, 336, 337,
	338, 339, 340, 341, 0, 342, 474, 343, 475, 344,
	0, 345, 0, 346, 347, 348, 349, 350, 351, 476,
	352, 353, 0, 354, 355, 356, 357, 358, 0, 360,
	361, 362, 359, 363, 364, 365, 366, 0, 367, 0,
	368, 369, 370, 371, 477, 372, 0, 373, 377, 378,
	379, 380, 381, 382, 383, 0, 390, 391, 384, 386,
	387, 388, 385, 389, 392, 393, 0, 394, 374, 375,
	395, 0, 396, 478, 397, 398, 0, 408, 399, 400,
	401, 376, 402, 406, 407, 403, 404, 405, 479, 0,
	410, 411, 409, 0, 412, 413, 414, 415, 416, 262,
	417, 263, 418, 0, 480, 481, 482, 419, 0, 0,
	420, 421, 483, 422, 484, 0, 423, 424, 425, 0,
	426, 427, 0, 0, 428, 429, 430, 431, 433, 0,
	434, 0, 432, 435, 436, 437, 485, 486, 487, 0,
	439, 438, 488, 1119, 0, 204, 0, 440, 441, 489,
	442, 443, 444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 445, 0, 0, 0, 0, 213, 214,
	215, 446, 447, 216, 448, 217, 218, 449, 0, 219,
	220, 221, 222, 223, 224, 0, 0, 225, 450, 451,
	452, 0, 226, 453, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 0, 240, 241, 0, 0, 0,
	0, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	454, 455, 0, 248, 0, 250, 249, 0, 251, 0,
	0, 252, 253, 254, 0, 255, 0, 256, 257, 0,
	456, 258, 259, 261, 264, 260, 265, 266, 267, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 459, 271, 272, 0, 273, 0, 274, 0, 0,
	0, 275, 276, 0, 277, 460, 0, 461, 278, 0,
	279, 280, 281, 282, 283, 284, 285, 1121, 463, 464,
	0, 0, 468, 287, 0, 0, 0, 0, 286, 288,
	295, 0, 0, 289, 465, 291, 290, 292, 293, 294,
	466, 0, 467, 0, 296, 0, 0, 297, 298, 299,
	0, 300, 301, 0, 0, 302, 303, 304, 305, 0,
	307, 306, 0, 308, 469, 0, 309, 310, 0, 0,
	311, 312, 0, 0, 313, 0, 314, 315, 0, 0,
	316, 317, 319, 320, 318, 0, 321, 322, 324, 323,
	0, 0, 0, 0, 470, 471, 325, 326, 0, 327,
	328, 329, 0, 968, 331, 332, 0, 0, 333, 472,
	0, 334, 0, 473, 335, 330, 336, 337, 338, 339,
	340, 341, 0, 342, 474, 343, 475, 344, 0, 345,
	0, 346, 347, 348, 349, 350, 351, 476, 352, 353,
	0, 354, 355, 356, 357, 358, 0, 360, 361, 362,
	359, 363, 364, 365, 366, 0, 367, 0, 368, 369,
	370, 371, 477, 372, 0, 373, 377, 378, 379, 380,
	381, 382, 383, 0, 390, 391, 384, 386, 387, 388,
	385, 389, 392, 393, 0, 394, 374, 375, 395, 0,
	396, 478, 397, 398, 0, 408, 399, 400, 401, 376,
	402, 406, 407, 403, 404, 405, 479, 0, 410, 411,
	409, 0, 412, 413, 414, 415, 416, 262, 417, 263,
	418, 0, 480, 481, 482, 419, 0, 0, 420, 421,
	483, 422, 484, 0, 423, 424, 425, 0, 426, 427,
	0, 0, 428, 429, 430, 431, 433, 0, 434, 0,
	432, 435, 436, 437, 485, 486, 487, 0, 439, 438,
	488, 1026, 0, 204, 0, 440, 441, 489, 442, 443,
	444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 445, 0, 0, 0, 0, 213, 214, 215, 446,
	447, 216, 448, 217, 218, 449, 0, 219, 220, 221,
	222, 223, 224, 0, 0, 225, 450, 451, 452, 0,
	226, 453, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 0, 240, 241, 0, 0, 0, 0, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 454, 455,
	0, 248, 0, 250, 249, 0, 251, 0, 0, 252,
	253, 254, 0, 255, 0, 256, 257, 0, 456, 258,
	259, 261, 264, 260, 265, 266, 267, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 459,
	271, 272, 0, 273, 0, 274, 0, 0, 0, 275,
	276, 0, 277, 460, 0, 461, 278, 0, 279, 280,
	281, 282, 283, 284, 285, 1028, 463, 464, 0, 0,
	468, 287, 0, 0, 0, 0, 286, 288, 295, 0,
	0, 289, 465, 291, 290, 292, 293, 294, 466, 0,
	467, 0, 296, 0, 0, 297, 298, 299, 0, 300,
	301, 0, 0, 302, 303, 304, 305, 0, 307, 306,
	0, 308, 469, 0, 309, 310, 0, 0, 311, 312,
	0, 0, 313, 0, 314, 315, 0, 0, 316, 317,
	319, 320, 318, 0, 321, 322, 324, 323, 0, 0,
	0, 0, 470, 471, 325, 326, 0, 327, 328, 329,
	0, 968, 331, 332, 0, 0, 333, 472, 0, 334,
	0, 473, 335, 330, 336, 337, 338, 339, 340, 341,
	0, 342, 474, 343, 475, 344, 0, 345, 0, 346,
	347, 348, 349, 350, 351, 476, 352, 353, 0, 354,
	355, 356, 357, 358, 0, 360, 361, 362, 359, 363,
	364, 365, 366, 0, 367, 0, 368, 369, 370, 371,
	477, 372, 0, 373, 377, 378, 379, 380, 381, 382,
	383, 0, 390, 391, 384, 386, 387, 388, 385, 389,
	392, 393, 0, 394, 374, 375, 395, 0, 396, 478,
	397, 398, 0, 408, 399, 400, 401, 376, 402, 406,
	407, 403, 404, 405, 479, 0, 410, 411, 409, 0,
	412, 413, 414, 415, 416, 262, 417, 263, 418, 0,
	480, 481, 482, 419, 0, 0, 420, 421, 483, 422,
	484, 0, 423, 424, 425, 0, 426, 427, 0, 0,
	428, 429, 430, 431, 433, 0, 434, 0, 432, 435,
	436, 437, 485, 486, 487, 0, 439, 438, 488, 658,
	0, 204, 0, 440, 441, 489, 442, 443, 444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 445,
	0, 0, 0, 0, 213, 214, 215, 446, 447, 216,
	448, 217, 218, 449, 0, 219, 220, 221, 222, 223,
	224, 0, 0, 225, 450, 451, 452, 0, 226, 453,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	0, 240, 241, 0, 0, 0, 0, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 454, 455, 0, 248,
	0, 250, 249, 0, 251, 0, 0, 252, 253, 254,
	0, 255, 0, 256, 257, 0, 456, 258, 259, 261,
	264, 260, 265, 266, 267, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 459, 271, 272,
	0, 273, 0, 274, 0, 0, 0, 275, 276, 0,
	277, 460, 0, 461, 278, 0, 279, 280, 281, 282,
	283, 284, 285, 462, 463, 464, 0, 0, 468, 287,
	0, 0, 0, 0, 286, 288, 295, 0, 0, 289,
	465, 291, 290, 292, 293, 294, 466, 0, 467, 0,
	296, 0, 0, 297, 298, 299, 0, 300, 301, 0,
	0, 302, 303, 304, 305, 0, 307, 306, 0, 308,
	469, 0, 309, 310, 0, 0, 311, 312, 0, 0,
	313, 0, 314, 315, 0, 0, 316, 317, 319, 320,
	318, 0, 321, 322, 324, 323, 0, 0, 0, 0,
	470, 471, 325, 326, 0, 327, 328, 329, 0, 0,
	331, 332, 0, 0, 333, 472, 0, 334, 0, 473,
	335, 330, 336, 337, 338, 339, 340, 341, 0, 342,
	474, 343, 475, 344, 0, 345, 0, 346, 347, 348,
	349, 350, 351, 476, 352, 353, 0, 354, 355, 356,
	357, 358, 0, 360, 361, 362, 359, 363, 364, 365,
	366, 0, 367, 0, 368, 369, 370, 371, 477, 372,
	0, 373, 377, 378, 379, 380, 381, 382, 383, 0,
	390, 391, 384, 386, 387, 388, 385, 389, 392, 393,
	0, 394, 374, 375, 395, 0, 396, 478, 397, 398,
	0, 408, 399, 400, 401, 376, 402, 406, 407, 403,
	404, 405, 479, 0, 410, 411, 409, 657, 412, 413,
	414, 415, 416, 262, 417, 263, 418, 0, 480, 481,
	482, 419, 0, 0, 420, 421, 483, 422, 484, 0,
	423, 424, 425, 0, 426, 427, 0, 0, 428, 429,
	430, 431, 433, 0, 434, 0, 432, 435, 436, 437,
	485, 486, 487, 0, 439, 438, 488, 497, 0, 204,
	0, 440, 441, 489, 442, 443, 444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 496, 212, 0, 0, 0, 0, 445, 0, 0,
	0, 0, 213, 214, 215, 446, 447, 216, 448, 217,
	218, 449, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 450, 451, 452, 0, 226, 453, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 454, 455, 0, 248, 0, 250,
	249, 0, 251, 0, 0, 252, 253, 254, 0, 255,
	0, 256, 257, 0, 456, 258, 259, 261, 264, 260,
	265, 266, 267, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 459, 271, 272, 0, 273,
	0, 274, 0, 0, 0, 275, 276, 0, 277, 460,
	0, 461, 278, 0, 279, 280, 281, 282, 283, 284,
	285, 462, 463, 464, 0, 0, 468, 287, 0, 0,
	0, 0, 286, 288, 295, 0, 0, 289, 465, 291,
	290, 292, 293, 294, 466, 0, 467, 0, 296, 0,
	0, 297, 298, 299, 0, 300, 301, 0, 0, 302,
	303, 304, 305, 0, 307, 306, 0, 308, 469, 0,
	309, 310, 0, 0, 311, 312, 0, 0, 313, 0,
	314, 315, 0, 0, 316, 317, 319, 320, 318, 0,
	321, 322, 324, 323, 0, 0, 0, 0, 470, 471,
	325, 326, 0, 327, 328, 329, 0, 0, 331, 332,
	0, 0, 333, 472, 0, 334, 0, 473, 335, 330,
	336, 337, 338, 339, 340, 341, 0, 342, 474, 343,
	475, 495, 0, 345, 0, 346, 347, 348, 349, 350,
	351, 476, 352, 353, 0, 354, 355, 356, 357, 358,
	0, 360, 361, 362, 359, 363, 364, 365, 366, 0,
	367, 0, 368, 369, 370, 371, 477, 372, 0, 373,
	377, 378, 379, 380, 381, 382, 383, 0, 390, 391,
	384, 386, 387, 388, 385, 389, 392, 393, 0, 394,
	374, 375, 395, 0, 396, 478, 397, 398, 0, 408,
	399, 400, 401, 376, 402, 406, 407, 403, 404, 405,
	479, 0, 410, 411, 409, 0, 412, 413, 414, 415,
	416, 262, 417, 263, 418, 0, 480, 481, 482, 419,
	0, 0, 420, 421, 483, 422, 484, 0, 423, 424,
	425, 0, 426, 427, 0, 0, 428, 429, 430, 431,
	433, 0, 434, 0, 432, 435, 436, 437, 485, 486,
	487, 204, 439, 438, 488, 0, 0, 0, 0, 440,
	441, 489, 442, 443, 444, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 445,
	0, 2080, 0, 0, 213, 214, 215, 446, 447, 216,
	448, 217, 218, 449, 0, 219, 220, 221, 222, 223,
	224, 0, 0, 225, 450, 451, 452, 0, 226, 453,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	0, 240, 241, 0, 0, 0, 0, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 454, 455, 0, 248,
	0, 250, 249, 0, 251, 0, 0, 252, 253, 254,
	0, 255, 0, 256, 257, 0, 456, 258, 259, 261,
	264, 260, 265, 266, 267, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 459, 271, 272,
	0, 273, 0, 274, 0, 0, 0, 275, 276, 0,
	277, 460, 0, 461, 278, 0, 279, 280, 281, 282,
	283, 284, 285, 462, 463, 464, 0, 0, 468, 287,
	0, 0, 0, 0, 286, 288, 295, 0, 0, 289,
	465, 291, 290, 292, 293, 294, 466, 0, 467, 0,
	296, 0, 0, 297, 298, 299, 0, 300, 301, 0,
	0, 302, 303, 304, 305, 0, 307, 306, 0, 308,
	469, 0, 309, 310, 0, 0, 311, 312, 0, 0,
	313, 0, 314, 315, 0, 0, 316, 317, 319, 320,
	318, 0, 321, 322, 324, 323, 0, 0, 0, 0,
	470, 471, 325, 326, 0, 327, 328, 329, 0, 0,
	331, 332, 0, 0, 333, 472, 0, 334, 0, 473,
	335, 330, 336, 337, 338, 339, 340, 341, 0, 342,
	474, 343, 475, 344, 0, 345, 0, 346, 347, 348,
	349, 350, 351, 476, 352, 353, 0, 354, 355, 356,
	357, 358, 0, 360, 361, 362, 359, 363, 364, 365,
	366, 0, 367, 0, 368, 369, 370, 371, 477, 372,
	0, 373, 377, 378, 379, 380, 381, 382, 383, 0,
	390, 391, 384, 386, 387, 388, 385, 389, 392, 393,
	0, 394, 374, 375, 395, 0, 396, 478, 397, 398,
	0, 408, 399, 400, 401, 376, 402, 406, 407, 403,
	404, 405, 479, 0, 410, 411, 409, 0, 412, 413,
	414, 415, 416, 262, 417, 263, 418, 0, 480, 481,
	482, 419, 0, 0, 420, 421, 483, 422, 484, 0,
	423, 424, 425, 0, 426, 427, 0, 0, 428, 429,
	430, 431, 433, 0, 434, 0, 432, 435, 436, 437,
	485, 486, 487, 0, 439, 438, 488, 204, 2269, 0,
	0, 440, 441, 489, 442, 443, 444, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 445, 0, 0, 0, 0,
	213, 214, 215, 446, 447, 216, 448, 217, 218, 449,
	0, 219, 220, 221, 222, 223, 224, 0, 0, 225,
	450, 451, 452, 0, 226, 453, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 0, 240, 241, 0,
	0, 0, 0, 0, 0, 0, 242, 243, 244, 245,
	246, 247, 454, 455, 0, 248, 0, 250, 249, 0,
	251, 0, 0, 252, 253, 254, 0, 255, 0, 256,
	257, 0, 456, 258, 259, 261, 264, 260, 265, 266,
	267, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 459, 271, 272, 0, 273, 0, 274,
	0, 0, 0, 275, 276, 0, 277, 460, 0, 461,
	278, 0, 279, 280, 281, 282, 283, 284, 285, 462,
	463, 464, 0, 0, 468, 287, 0, 0, 0, 0,
	286, 288, 295, 0, 0, 289, 465, 291, 290, 292,
	293, 294, 466, 0, 467, 0, 296, 0, 0, 297,
	298, 299, 0, 300, 301, 0, 0, 302, 303, 304,
	305, 0, 307, 306, 0, 308, 469, 0, 309, 310,
	0, 0, 311, 312, 0, 0, 313, 0, 314, 315,
	0, 0, 316, 317, 319, 320, 318, 0, 321, 322,
	324, 323, 0, 0, 0, 0, 470, 471, 325, 326,
	0, 327, 328, 329, 0, 0, 331, 332, 0, 0,
	333, 472, 0, 334, 0, 473, 335, 330, 336, 337,
	338, 339, 340, 341, 0, 342, 474, 343, 475, 344,
	0, 345, 0, 346, 347, 348, 349, 350, 351, 476,
	352, 353, 0, 354, 355, 356, 357, 358, 0, 360,
	361, 362, 359, 363, 364, 365, 366, 0, 367, 0,
	368, 369, 370, 371, 477, 372, 0, 373, 377, 378,
	379, 380, 381, 382, 383, 0, 390, 391, 384, 386,
	387, 388, 385, 389, 392, 393, 0, 394, 374, 375,
	395, 0, 396, 478, 397, 398, 0, 408, 399, 400,
	401, 376, 402, 406, 407, 403, 404, 405, 479, 0,
	410, 411, 409, 0, 412, 413, 414, 415, 416, 262,
	417, 263, 418, 0, 480, 481, 482, 419, 0, 0,
	420, 421, 483, 422, 484, 0, 423, 424, 425, 0,
	426, 427, 0, 0, 428, 429, 430, 431, 433, 0,
	434, 0, 432, 435, 436, 437, 485, 486, 487, 204,
	439, 438, 488, 0, 0, 0, 0, 440, 441, 489,
	442, 443, 444, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 445, 0, 0,
	0, 0, 213, 214, 215, 446, 447, 216, 448, 217,
	218, 449, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 450, 451, 452, 0, 226, 453, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 454, 455, 2819, 248, 0, 250,
	249, 0, 251, 0, 0, 252, 253, 254, 0, 255,
	0, 256, 257, 0, 456, 258, 259, 261, 264, 260,
	265, 266, 267, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 459, 271, 272, 0, 273,
	0, 274, 0, 0, 0, 275, 276, 0, 277, 460,
	0, 461, 278, 0, 279, 280, 281, 282, 283, 284,
	285, 462, 463, 464, 0, 0, 468, 287, 0, 0,
	0, 0, 286, 288, 295, 0, 0, 289, 465, 291,
	290, 292, 293, 294, 466, 0, 467, 0, 296, 0,
	0, 297, 298, 299, 0, 300, 301, 0, 0, 302,
	303, 304, 305, 0, 307, 306, 0, 308, 469, 0,
	309, 310, 0, 0, 311, 312, 0, 0, 313, 0,
	314, 315, 0, 0, 316, 317, 319, 320, 318, 0,
	321, 322, 324, 323, 0, 0, 0, 0, 470, 471,
	325, 326, 0, 327, 328, 329, 0, 0, 331, 332,
	0, 0, 333, 472, 0, 334, 0, 473, 335, 330,
	336, 337, 338, 339, 340, 341, 0, 342, 474, 343,
	475, 344, 0, 345, 0, 346, 347, 348, 349, 350,
	351, 476, 352, 353, 0, 354, 355, 356, 357, 358,
	0, 360, 361, 362, 359, 363, 364, 365, 366, 0,
	367, 0, 368, 369, 370, 371, 477, 372, 0, 373,
	377, 378, 379, 380, 381, 382, 383, 0, 390, 391,
	384, 386, 387, 388, 385, 389, 392, 393, 0, 394,
	374, 375, 395, 0, 396, 478, 397, 398, 0, 408,
	399, 400, 401, 376, 402, 406, 407, 403, 404, 405,
	479, 0, 410, 411, 409, 0, 412, 413, 414, 415,
	416, 262, 417, 263, 418, 0, 480, 481, 482, 419,
	0, 0, 420, 421, 483, 422, 484, 0, 423, 424,
	425, 0, 426, 427, 0, 0, 428, 429, 430, 431,
	433, 0, 434, 0, 432, 435, 436, 437, 485, 486,
	487, 204, 439, 438, 488, 0, 0, 0, 0, 440,
	441, 489, 442, 443, 444, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 445,
	0, 0, 0, 0, 213, 214, 215, 446, 447, 216,
	448, 217, 218, 449, 0, 219, 220, 221, 222, 223,
	224, 0, 0, 225, 450, 451, 452, 0, 226, 453,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	0, 240, 241, 0, 0, 0, 0, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 454, 455, 0, 248,
	0, 250, 249, 0, 251, 0, 0, 252, 253, 254,
	0, 255, 0, 256, 257, 0, 456, 258, 259, 261,
	264, 260, 265, 266, 267, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 459, 271, 272,
	0, 273, 0, 274, 0, 0, 0, 275, 276, 0,
	277, 460, 0, 461, 278, 0, 279, 280, 281, 282,
	283, 284, 285, 462, 463, 464, 0, 0, 468, 287,
	0, 0, 0, 0, 286, 288, 295, 0, 0, 289,
	465, 291, 290, 292, 293, 294, 466, 0, 467, 0,
	296, 0, 0, 297, 298, 299, 0, 300, 301, 0,
	0, 302, 303, 304, 305, 0, 307, 306, 0, 308,
	469, 0, 309, 310, 0, 0, 311, 312, 0, 0,
	313, 0, 314, 315, 0, 0, 316, 317, 319, 320,
	318, 0, 321, 322, 324, 323, 0, 0, 0, 0,
	470, 471, 325, 326, 0, 327, 328, 329, 0, 968,
	331, 332, 0, 0, 333, 472, 0, 334, 0, 473,
	335, 330, 336, 337, 338, 339, 340, 341, 0, 342,
	474, 343, 475, 344, 0, 345, 0, 346, 347, 348,
	349, 350, 351, 476, 352, 353, 0, 354, 355, 356,
	357, 358, 0, 360, 361, 362, 359, 363, 364, 365,
	366, 0, 367, 0, 368, 369, 370, 371, 477, 372,
	0, 373, 377, 378, 379, 380, 381, 382, 383, 0,
	390, 391, 384, 386, 387, 388, 385, 389, 392, 393,
	0, 394, 374, 375, 395, 0, 396, 478, 397, 398,
	0, 408, 399, 400, 401, 376, 402, 406, 407, 403,
	404, 405, 479, 0, 410, 411, 409, 0, 412, 413,
	414, 415, 416, 262, 417, 263, 418, 0, 480, 481,
	482, 419, 0, 0, 420, 421, 483, 422, 484, 0,
	423, 424, 425, 0, 426, 427, 0, 0, 428, 429,
	430, 431, 433, 0, 434, 0, 432, 435, 436, 437,
	485, 486, 487, 0, 439, 438, 488, 204, 2269, 0,
	0, 440, 441, 489, 442, 443, 444, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 445, 0, 0, 0, 0,
	213, 214, 215, 446, 447, 216, 448, 217, 218, 449,
	0, 219, 220, 221, 222, 223, 224, 0, 0, 225,
	450, 451, 452, 0, 226, 453, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 0, 240, 241, 0,
	0, 0, 0, 0, 0, 0, 242, 243, 244, 245,
	246, 247, 454, 455, 0, 248, 0, 250, 249, 0,
	251, 0, 0, 252, 253, 254, 0, 255, 0, 256,
	257, 0, 456, 258, 259, 261, 264, 260, 265, 266,
	267, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 459, 271, 272, 0, 273, 0, 274,
	0, 0, 0, 275, 276, 0, 277, 460, 0, 461,
	278, 0, 279, 280, 281, 282, 283, 284, 285, 462,
	463, 464, 0, 0, 468, 287, 0, 0, 0, 0,
	286, 288, 295, 0, 0, 289, 465, 291, 290, 292,
	293, 294, 466, 0, 467, 0, 296, 0, 0, 297,
	298, 299, 0, 300, 301, 0, 0, 302, 303, 304,
	305, 0, 307, 306, 0, 308, 469, 0, 309, 310,
	0, 0, 311, 312, 0, 0, 313, 0, 314, 315,
	0, 0, 316, 317, 319, 320, 318, 0, 321, 322,
	324, 323, 0, 0, 0, 0, 470, 471, 325, 326,
	0, 327, 328, 329, 0, 0, 331, 2266, 0, 0,
	333, 472, 0, 334, 0, 473, 335, 330, 336, 337,
	338, 339, 340, 341, 0, 342, 474, 343, 475, 344,
	0, 345, 0, 346, 347, 348, 349, 350, 351, 476,
	352, 353, 0, 354, 355, 356, 357, 358, 0, 360,
	361, 362, 359, 363, 364, 365, 366, 0, 367, 0,
	368, 369, 370, 371, 477, 372, 0, 373, 377, 378,
	379, 380, 381, 382, 383, 0, 390, 391, 384, 386,
	387, 388, 385, 389, 392, 393, 0, 394, 374, 375,
	395, 0, 396, 478, 397, 398, 0, 408, 399, 400,
	401, 376, 402, 406, 407, 403, 404, 405, 479, 0,
	410, 411, 409, 0, 412, 413, 414, 415, 416, 262,
	417, 263, 418, 0, 480, 481, 482, 419, 0, 0,
	420, 421, 483, 422, 484, 0, 423, 424, 425, 0,
	426, 427, 0, 0, 428, 429, 430, 431, 433, 0,
	434, 0, 432, 435, 436, 437, 485, 486, 487, 0,
	439, 438, 488, 2213, 0, 204, 0, 440, 441, 489,
	442, 443, 444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 445, 0, 0, 0, 0, 213, 214,
	215, 446, 447, 216, 448, 217, 218, 449, 0, 219,
	220, 221, 222, 223, 224, 0, 0, 225, 450, 451,
	452, 0, 226, 453, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 0, 240, 241, 0, 0, 0,
	0, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	454, 455, 0, 248, 0, 250, 249, 0, 251, 0,
	0, 252, 253, 254, 0, 255, 0, 256, 257, 0,
	456, 258, 259, 261, 264, 260, 265, 266, 267, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 459, 271, 272, 0, 273, 0, 274, 0, 0,
	0, 275, 276, 0, 277, 460, 0, 461, 278, 0,
	279, 280, 281, 282, 283, 284, 285, 462, 463, 464,
	0, 0, 468, 287, 0, 0, 0, 0, 286, 288,
	295, 0, 0, 289, 465, 291, 290, 292, 293, 294,
	466, 0, 467, 0, 296, 0, 0, 297, 298, 299,
	0, 300, 301, 0, 0, 302, 303, 304, 305, 0,
	307, 306, 0, 308, 469, 0, 309, 310, 0, 0,
	311, 312, 0, 0, 313, 0, 314, 315, 0, 0,
	316, 317, 319, 320, 318, 0, 321, 322, 324, 323,
	0, 0, 0, 0, 470, 471, 325, 326, 0, 327,
	328, 329, 0, 0, 331, 332, 0, 0, 333, 472,
	0, 334, 0, 473, 335, 330, 336, 337, 338, 339,
	340, 341, 0, 342, 474, 343, 475, 344, 0, 345,
	0, 346, 347, 348, 349, 350, 351, 476, 352, 353,
	0, 354, 355, 356, 357, 358, 0, 360, 361, 362,
	359, 363, 364, 365, 366, 0, 367, 0, 368, 369,
	370, 371, 477, 372, 0, 373, 377, 378, 379, 380,
	381, 382, 383, 0, 390, 391, 384, 386, 387, 388,
	385, 389, 392, 393, 0, 394, 374, 375, 395, 0,
	396, 478, 397, 398, 0, 408, 399, 400, 401, 376,
	402, 406, 407, 403, 404, 405, 479, 0, 410, 411,
	409, 0, 412, 413, 414, 415, 416, 262, 417, 263,
	418, 0, 480, 481, 482, 419, 0, 0, 420, 421,
	483, 422, 484, 0, 423, 424, 425, 0, 426, 427,
	0, 0, 428, 429, 430, 431, 433, 0, 434, 0,
	432, 435, 436, 437, 485, 486, 487, 204, 439, 438,
	488, 0, 0, 0, 0, 440, 441, 489, 442, 443,
	444, 0, 0, 0, 207, 208, 209, 210, 211, 1816,
	212, 0, 0, 0, 0, 445, 0, 0, 0, 0,
	213, 214, 215, 446, 447, 216, 448, 217, 218, 449,
	0, 219, 220, 221, 222, 223, 224, 0, 0, 225,
	450, 451, 452, 0, 226, 453, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 0, 240, 241, 0,
	0, 0, 0, 0, 0, 0, 242, 243, 244, 245,
	246, 247, 454, 455, 0, 248, 0, 250, 249, 0,
	251, 0, 0, 252, 253, 254, 0, 255, 0, 256,
	257, 0, 456, 258, 259, 261, 264, 260, 265, 266,
	267, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 459, 271, 272, 0, 273, 0, 274,
	0, 0, 0, 275, 276, 0, 277, 460, 0, 461,
	278, 0, 279, 280, 281, 282, 283, 284, 285, 462,
	463, 464, 0, 0, 468, 287, 0, 0, 0, 0,
	286, 288, 295, 0, 0, 289, 465, 291, 290, 292,
	293, 294, 466, 0, 467, 0, 296, 0, 0, 297,
	298, 299, 0, 300, 301, 0, 0, 302, 303, 304,
	305, 0, 307, 306, 0, 308, 469, 0, 309, 310,
	0, 0, 311, 312, 0, 0, 313, 0, 314, 315,
	0, 0, 316, 317, 319, 320, 318, 0, 321, 322,
	324, 323, 0, 0, 0, 0, 470, 471, 325, 326,
	0, 327, 328, 329, 0, 0, 331, 332, 0, 0,
	333, 472, 0, 334, 0, 473, 335, 330, 336, 337,
	338, 339, 340, 341, 0, 342, 474, 343, 475, 344,
	0, 345, 0, 346, 347, 348, 349, 350, 351, 476,
	352, 353, 0, 354, 355, 356, 357, 358, 0, 360,
	361, 362, 359, 363, 364, 365, 366, 0, 367, 0,
	368, 369, 370, 371, 477, 372, 0, 373, 377, 378,
	379, 380, 381, 382, 383, 0, 390, 391, 384, 386,
	387, 388, 385, 389, 392, 393, 0, 394, 374, 375,
	395, 0, 396, 478, 397, 398, 0, 408, 399, 400,
	401, 376, 402, 406, 407, 403, 404, 405, 479, 0,
	410, 411, 409, 0, 412, 413, 414, 415, 416, 262,
	417, 263, 418, 0, 480, 481, 482, 419, 0, 0,
	420, 421, 483, 422, 484, 0, 423, 424, 425, 0,
	426, 427, 0, 0, 428, 429, 430, 431, 433, 0,
	434, 0, 432, 435, 436, 437, 485, 486, 487, 0,
	439, 438, 488, 1810, 0, 204, 0, 440, 441, 489,
	442, 443, 444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 445, 0, 0, 0, 0, 213, 214,
	215, 446, 447, 216, 448, 217, 218, 449, 0, 219,
	220, 221, 222, 223, 224, 0, 0, 225, 450, 451,
	452, 0, 226, 453, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 0, 240, 241, 0, 0, 0,
	0, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	454, 455, 0, 248, 0, 250, 249, 0, 251, 0,
	0, 252, 253, 254, 0, 255, 0, 256, 257, 0,
	456, 258, 259, 261, 264, 260, 265, 266, 267, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 459, 271, 272, 0, 273, 0, 274, 0, 0,
	0, 275, 276, 0, 277, 460, 0, 461, 278, 0,
	279, 280, 281, 282, 283, 284, 285, 462, 463, 464,
	0, 0, 468, 287, 0, 0, 0, 0, 286, 288,
	295, 0, 0, 289, 465, 291, 290, 292, 293, 294,
	466, 0, 467, 0, 296, 0, 0, 297, 298, 299,
	0, 300, 301, 0, 0, 302, 303, 304, 305, 0,
	307, 306, 0, 308, 469, 0, 309, 310, 0, 0,
	311, 312, 0, 0, 313, 0, 314, 315, 0, 0,
	316, 317, 319, 320, 318, 0, 321, 322, 324, 323,
	0, 0, 0, 0, 470, 471, 325, 326, 0, 327,
	328, 329, 0, 0, 331, 332, 0, 0, 333, 472,
	0, 334, 0, 473, 335, 330, 336, 337, 338, 339,
	340, 341, 0, 342, 474, 343, 475, 344, 0, 345,
	0, 346, 347, 348, 349, 350, 351, 476, 352, 353,
	0, 354, 355, 356, 357, 358, 0, 360, 361, 362,
	359, 363, 364, 365, 366, 0, 367, 0, 368, 369,
	370, 371, 477, 372, 0, 373, 377, 378, 379, 380,
	381, 382, 383, 0, 390, 391, 384, 386, 387, 388,
	385, 389, 392, 393, 0, 394, 374, 375, 395, 0,
	396, 478, 397, 398, 0, 408, 399, 400, 401, 376,
	402, 406, 407, 403, 404, 405, 479, 0, 410, 411,
	409, 0, 412, 413, 414, 415, 416, 262, 417, 263,
	418, 0, 480, 481, 482, 419, 0, 0, 420, 421,
	483, 422, 484, 0, 423, 424, 425, 0, 426, 427,
	0, 0, 428, 429, 430, 431, 433, 0, 434, 0,
	432, 435, 436, 437, 485, 486, 487, 0, 439, 438,
	488, 1808, 0, 204, 0, 440, 441, 489, 442, 443,
	444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 445, 0, 0, 0, 0, 213, 214, 215, 446,
	447, 216, 448, 217, 218, 449, 0, 219, 220, 221,
	222, 223, 224, 0, 0, 225, 450, 451, 452, 0,
	226, 453, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 0, 240, 241, 0, 0, 0, 0, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 454, 455,
	0, 248, 0, 250, 249, 0, 251, 0, 0, 252,
	253, 254, 0, 255, 0, 256, 257, 0, 456, 258,
	259, 261, 264, 260, 265, 266, 267, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 459,
	271, 272, 0, 273, 0, 274, 0, 0, 0, 275,
	276, 0, 277, 460, 0, 461, 278, 0, 279, 280,
	281, 282, 283, 284, 285, 462, 463, 464, 0, 0,
	468, 287, 0, 0, 0, 0, 286, 288, 295, 0,
	0, 289, 465, 291, 290, 292, 293, 294, 466, 0,
	467, 0, 296, 0, 0, 297, 298, 299, 0, 300,
	301, 0, 0, 302, 303, 304, 305, 0, 307, 306,
	0, 308, 469, 0, 309, 310, 0, 0, 311, 312,
	0, 0, 313, 0, 314, 315, 0, 0, 316, 317,
	319, 320, 318, 0, 321, 322, 324, 323, 0, 0,
	0, 0, 470, 471, 325, 326, 0, 327, 328, 329,
	0, 0, 331, 332, 0, 0, 333, 472, 0, 334,
	0, 473, 335, 330, 336, 337, 338, 339, 340, 341,
	0, 342, 474, 343, 475, 344, 0, 345, 0, 346,
	347, 348, 349, 350, 351, 476, 352, 353, 0, 354,
	355, 356, 357, 358, 0, 360, 361, 362, 359, 363,
	364, 365, 366, 0, 367, 0, 368, 369, 370, 371,
	477, 372, 0, 373, 377, 378, 379, 380, 381, 382,
	383, 0, 390, 391, 384, 386, 387, 388, 385, 389,
	392, 393, 0, 394, 374, 375, 395, 0, 396, 478,
	397, 398, 0, 408, 399, 400, 401, 376, 402, 406,
	407, 403, 404, 405, 479, 0, 410, 411, 409, 0,
	412, 413, 414, 415, 416, 262, 417, 263, 418, 0,
	480, 481, 482, 419, 0, 0, 420, 421, 483, 422,
	484, 0, 423, 424, 425, 0, 426, 427, 0, 0,
	428, 429, 430, 431, 433, 0, 434, 0, 432, 435,
	436, 437, 485, 486, 487, 0, 439, 438, 488, 540,
	0, 204, 0, 440, 441, 489, 442, 443, 444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 445,
	0, 0, 0, 0, 213, 214, 215, 446, 447, 216,
	448, 217, 218, 449, 0, 219, 220, 221, 222, 223,
	224, 0, 0, 225, 450, 451, 1006, 0, 226, 453,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	0, 240, 241, 0, 0, 0, 0, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 454, 455, 0, 248,
	0, 250, 249, 0, 251, 0, 0, 252, 253, 254,
	0, 255, 0, 256, 257, 0, 456, 258, 259, 261,
	264, 260, 265, 266, 267, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 459, 271, 272,
	0, 273, 0, 274, 0, 0, 0, 275, 276, 0,
	277, 460, 0, 461, 278, 0, 279, 280, 281, 282,
	283, 284, 285, 462, 463, 464, 0, 0, 468, 287,
	0, 0, 0, 0, 286, 288, 295, 0, 0, 289,
	465, 291, 290, 292, 293, 294, 466, 0, 467, 0,
	296, 0, 0, 297, 298, 299, 0, 300, 301, 0,
	0, 302, 303, 304, 305, 0, 307, 306, 0, 308,
	469, 0, 309, 310, 0, 0, 311, 312, 0, 0,
	313, 0, 314, 315, 0, 0, 316, 317, 319, 320,
	541, 0, 321, 322, 324, 323, 0, 0, 0, 0,
	470, 471, 325, 326, 0, 327, 328, 329, 0, 0,
	331, 332, 0, 0, 333, 472, 0, 334, 0, 473,
	335, 330, 336, 337, 338, 339, 340, 341, 0, 342,
	474, 343, 475, 344, 0, 345, 0, 346, 347, 348,
	349, 350, 351, 476, 352, 353, 0, 354, 355, 356,
	357, 358, 0, 360, 361, 362, 359, 363, 364, 365,
	366, 0, 367, 0, 368, 369, 370, 371, 477, 372,
	0, 373, 377, 378, 537, 380, 381, 382, 383, 0,
	390, 391, 384, 386, 387, 388, 385, 389, 392, 393,
	0, 394, 374, 375, 395, 0, 396, 478, 397, 398,
	0, 408, 399, 400, 401, 376, 402, 406, 407, 403,
	404, 405, 479, 0, 410, 411, 409, 0, 412, 413,
	414, 415, 416, 262, 417, 263, 418, 0, 536, 481,
	482, 419, 0, 0, 420, 421, 483, 422, 484, 0,
	423, 424, 425, 0, 426, 427, 0, 0, 428, 429,
	430, 431, 433, 0, 434, 0, 432, 435, 436, 437,
	485, 486, 487, 0, 439, 438, 488, 1761, 0, 204,
	0, 440, 441, 489, 442, 443, 444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 445, 0, 0,
	0, 0, 213, 214, 215, 446, 447, 216, 448, 217,
	218, 449, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 450, 451, 452, 0, 226, 453, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 454, 455, 0, 248, 0, 250,
	249, 0, 251, 0, 0, 252, 253, 254, 0, 255,
	0, 256, 257, 0, 456, 258, 259, 261, 264, 260,
	265, 266, 267, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 459, 271, 272, 0, 273,
	0, 274, 0, 0, 0, 275, 276, 0, 277, 460,
	0, 461, 278, 0, 279, 280, 281, 282, 283, 284,
	285, 1760, 463, 464, 0, 0, 468, 287, 0, 0,
	0, 0, 286, 288, 295, 0, 0, 289, 465, 291,
	290, 292, 293, 294, 466, 0, 467, 0, 296, 0,
	0, 297, 298, 299, 0, 300, 301, 0, 0, 302,
	303, 304, 305, 0, 307, 306, 0, 308, 469, 0,
	309, 310, 0, 0, 311, 312, 0, 0, 313, 0,
	314, 315, 0, 0, 316, 317, 319, 320, 318, 0,
	321, 322, 324, 323, 0, 0, 0, 0, 470, 471,
	325, 326, 0, 327, 328, 329, 0, 0, 331, 332,
	0, 0, 333, 472, 0, 334, 0, 473, 335, 330,
	336, 337, 338, 339, 340, 341, 0, 342, 474, 343,
	475, 344, 0, 345, 0, 346, 347, 348, 349, 350,
	351, 476, 352, 353, 0, 354, 355, 356, 357, 358,
	0, 360, 361, 362, 359, 363, 364, 365, 366, 0,
	367, 0, 368, 369, 370, 371, 477, 372, 0, 373,
	377, 378, 379, 380, 381, 382, 383, 0, 390, 391,
	384, 386, 387, 388, 385, 389, 392, 393, 0, 394,
	374, 375, 395, 0, 396, 478, 397, 398, 0, 408,
	399, 400, 401, 376, 402, 406, 407, 403, 404, 405,
	479, 0, 410, 411, 409, 0, 412, 413, 414, 415,
	416, 262, 417, 263, 418, 0, 480, 481, 482, 419,
	0, 0, 420, 421, 483, 422, 484, 0, 423, 424,
	425, 0, 426, 427, 0, 0, 428, 429, 430, 431,
	433, 0, 434, 0, 432, 435, 436, 437, 485, 486,
	487, 204, 439, 438, 488, 0, 0, 0, 0, 440,
	441, 489, 442, 443, 444, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 445,
	0, 0, 0, 0, 213, 214, 215, 446, 447, 216,
	448, 217, 218, 449, 0, 219, 220, 221, 222, 223,
	224, 0, 0, 225, 450, 451, 452, 0, 226, 453,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	0, 240, 241, 0, 0, 0, 0, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 454, 455, 0, 248,
	0, 250, 249, 0, 251, 0, 0, 252, 253, 254,
	0, 255, 0, 256, 257, 0, 456, 258, 259, 261,
	264, 260, 265, 266, 267, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 459, 271, 272,
	0, 273, 0, 274, 0, 0, 0, 275, 276, 0,
	277, 460, 0, 461, 278, 0, 279, 280, 281, 282,
	283, 284, 285, 462, 463, 464, 0, 0, 468, 287,
	0, 0, 0, 0, 286, 288, 295, 0, 0, 289,
	465, 291, 290, 292, 293, 294, 466, 0, 467, 0,
	296, 0, 0, 297, 298, 299, 0, 300, 301, 0,
	0, 302, 303, 304, 305, 0, 307, 306, 0, 308,
	469, 0, 309, 310, 0, 0, 311, 312, 0, 0,
	313, 0, 314, 315, 0, 0, 316, 317, 319, 320,
	318, 0, 321, 322, 324, 323, 0, 0, 0, 0,
	470, 471, 325, 326, 0, 327, 328, 329, 0, 0,
	331, 332, 0, 0, 333, 472, 0, 334, 0, 473,
	335, 330, 336, 337, 338, 339, 340, 341, 0, 342,
	474, 343, 475, 344, 0, 345, 0, 346, 347, 348,
	349, 350, 351, 476, 352, 353, 0, 354, 355, 356,
	357, 358, 0, 360, 361, 362, 359, 363, 364, 365,
	366, 0, 367, 0, 368, 369, 370, 371, 477, 372,
	0, 373, 377, 378, 379, 380, 381, 382, 383, 0,
	390, 391, 384, 386, 387, 388, 385, 389, 392, 393,
	0, 394, 374, 375, 395, 0, 396, 478, 397, 398,
	0, 408, 399, 400, 401, 376, 402, 406, 407, 403,
	404, 405, 479, 0, 410, 411, 409, 1749, 412, 413,
	414, 415, 416, 262, 417, 263, 418, 0, 480, 481,
	482, 419, 0, 0, 420, 421, 483, 422, 484, 0,
	423, 424, 425, 0, 426, 427, 0, 0, 428, 429,
	430, 431, 433, 0, 434, 0, 432, 435, 436, 437,
	485, 486, 487, 0, 439, 438, 488, 1743, 0, 204,
	0, 440, 441, 489, 442, 443, 444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 445, 0, 0,
	0, 0, 213, 214, 215, 446, 447, 216, 448, 217,
	218, 449, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 450, 451, 452, 0, 226, 453, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 454, 455, 0, 248, 0, 250,
	249, 0, 251, 0, 0, 252, 253, 254, 0, 255,
	0, 256, 257, 0, 456, 258, 259, 261, 264, 260,
	265, 266, 267, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 459, 271, 272, 0, 273,
	0, 274, 0, 0, 0, 275, 276, 0, 277, 460,
	0, 461, 278, 0, 279, 280, 281, 282, 283, 284,
	285, 1742, 463, 464, 0, 0, 468, 287, 0, 0,
	0, 0, 286, 288, 295, 0, 0, 289, 465, 291,
	290, 292, 293, 294, 466, 0, 467, 0, 296, 0,
	0, 297, 298, 299, 0, 300, 301, 0, 0, 302,
	303, 304, 305, 0, 307, 306, 0, 308, 469, 0,
	309, 310, 0, 0, 311, 312, 0, 0, 313, 0,
	314, 315, 0, 0, 316, 317, 319, 320, 318, 0,
	321, 322, 324, 323, 0, 0, 0, 0, 470, 471,
	325, 326, 0, 327, 328, 329, 0, 0, 331, 332,
	0, 0, 333, 472, 0, 334, 0, 473, 335, 330,
	336, 337, 338, 339, 340, 341, 0, 342, 474, 343,
	475, 344, 0, 345, 0, 346, 347, 348, 349, 350,
	351, 476, 352, 353, 0, 354, 355, 356, 357, 358,
	0, 360, 361, 362, 359, 363, 364, 365, 366, 0,
	367, 0, 368, 369, 370, 371, 477, 372, 0, 373,
	377, 378, 379, 380, 381, 382, 383, 0, 390, 391,
	384, 386, 387, 388, 385, 389, 392, 393, 0, 394,
	374, 375, 395, 0, 396, 478, 397, 398, 0, 408,
	399, 400, 401, 376, 402, 406, 407, 403, 404, 405,
	479, 0, 410, 411, 409, 0, 412, 413, 414, 415,
	416, 262, 417, 263, 418, 0, 480, 481, 482, 419,
	0, 0, 420, 421, 483, 422, 484, 0, 423, 424,
	425, 0, 426, 427, 0, 0, 428, 429, 430, 431,
	433, 0, 434, 0, 432, 435, 436, 437, 485, 486,
	487, 0, 439, 438, 488, 1738, 0, 204, 0, 440,
	441, 489, 442, 443, 444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 445, 0, 0, 0, 0,
	213, 214, 215, 446, 447, 216, 448, 217, 218, 449,
	0, 219, 220, 221, 222, 223, 224, 0, 0, 225,
	450, 451, 452, 0, 226, 453, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 0, 240, 241, 0,
	0, 0, 0, 0, 0, 0, 242, 243, 244, 245,
	246, 247, 454, 455, 0, 248, 0, 250, 249, 0,
	251, 0, 0, 252, 253, 254, 0, 255, 0, 256,
	257, 0, 456, 258, 259, 261, 264, 260, 265, 266,
	267, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 459, 271, 272, 0, 273, 0, 274,
	0, 0, 0, 275, 276, 0, 277, 460, 0, 461,
	278, 0, 279, 280, 281, 282, 283, 284, 285, 1740,
	463, 464, 0, 0, 468, 287, 0, 0, 0, 0,
	286, 288, 295, 0, 0, 289, 465, 291, 290, 292,
	293, 294, 466, 0, 467, 0, 296, 0, 0, 297,
	298, 299, 0, 300, 301, 0, 0, 302, 303, 304,
	305, 0, 307, 306, 0, 308, 469, 0, 309, 310,
	0, 0, 311, 312, 0, 0, 313, 0, 314, 315,
	0, 0, 316, 317, 319, 320, 318, 0, 321, 322,
	324, 323, 0, 0, 0, 0, 470, 471, 325, 326,
	0, 327, 328, 329, 0, 0, 331, 332, 0, 0,
	333, 472, 0, 334, 0, 473, 335, 330, 336, 337,
	338, 339, 340, 341, 0, 342, 474, 343, 475, 344,
	0, 345, 0, 346, 347, 348, 349, 350, 351, 476,
	352, 353, 0, 354, 355, 356, 357, 358, 0, 360,
	361, 362, 359, 363, 364, 365, 366, 0, 367, 0,
	368, 369, 370, 371, 477, 372, 0, 373, 377, 378,
	379, 380, 381, 382, 383, 0, 390, 391, 384, 386,
	387, 388, 385, 389, 392, 393, 0, 394, 374, 375,
	395, 0, 396, 478, 397, 398, 0, 408, 399, 400,
	401, 376, 402, 406, 407, 403, 404, 405, 479, 0,
	410, 411, 409, 0, 412, 413, 414, 415, 416, 262,
	417, 263, 418, 0, 480, 481, 482, 419, 0, 0,
	420, 421, 483, 422, 484, 0, 423, 424, 425, 0,
	426, 427, 0, 0, 428, 429, 430, 431, 433, 0,
	434, 0, 432, 435, 436, 437, 485, 486, 487, 0,
	439, 438, 488, 540, 0, 204, 0, 440, 441, 489,
	442, 443, 444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 445, 0, 0, 0, 0, 213, 214,
	215, 446, 447, 216, 448, 217, 218, 449, 0, 219,
	220, 221, 222, 223, 224, 0, 0, 225, 450, 451,
	452, 0, 530, 453, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 0, 240, 241, 0, 0, 0,
	0, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	454, 455, 0, 248, 0, 250, 249, 0, 251, 0,
	0, 252, 253, 254, 0, 255, 0, 256, 257, 0,
	456, 258, 259, 261, 264, 260, 265, 266, 267, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 459, 271, 272, 0, 273, 0, 274, 0, 0,
	0, 275, 276, 0, 277, 460, 0, 461, 278, 0,
	279, 280, 281, 282, 283, 284, 285, 462, 463, 464,
	0, 0, 468, 287, 0, 0, 0, 0, 286, 288,
	295, 0, 0, 289, 465, 291, 290, 292, 293, 294,
	466, 0, 467, 0, 296, 0, 0, 297, 298, 299,
	0, 300, 301, 0, 0, 302, 303, 304, 305, 0,
	307, 306, 0, 308, 469, 0, 309, 310, 0, 0,
	311, 312, 0, 0, 313, 0, 314, 315, 0, 0,
	316, 317, 319, 320, 541, 0, 321, 322, 324, 323,
	0, 0, 0, 0, 470, 471, 325, 326, 0, 327,
	328, 329, 0, 0, 331, 332, 0, 0, 333, 472,
	0, 334, 0, 473, 335, 330, 336, 337, 338, 339,
	340, 341, 0, 342, 474, 343, 475, 344, 0, 345,
	0, 346, 347, 348, 349, 350, 351, 476, 352, 353,
	0, 354, 355, 356, 357, 358, 0, 360, 361, 362,
	359, 363, 364, 365, 366, 0, 367, 0, 368, 369,
	370, 371, 477, 372, 0, 373, 377, 378, 537, 380,
	381, 382, 383, 0, 390, 391, 384, 386, 387, 388,
	385, 389, 1281, 393, 0, 394, 374, 375, 395, 0,
	396, 478, 397, 398, 0, 408, 399, 400, 401, 376,
	402, 406, 407, 403, 404, 405, 479, 0, 410, 411,
	409, 0, 412, 413, 414, 415, 416, 262, 417, 263,
	418, 0, 536, 481, 482, 419, 0, 0, 420, 421,
	483, 422, 484, 0, 423, 424, 425, 0, 426, 427,
	0, 0, 428, 429, 430, 431, 433, 0, 434, 0,
	432, 435, 436, 437, 485, 486, 487, 0, 439, 438,
	488, 1266, 0, 204, 0, 440, 441, 489, 442, 443,
	444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 445, 0, 0, 0, 0, 213, 214, 215, 446,
	447, 216, 448, 217, 218, 449, 0, 219, 220, 221,
	222, 223, 224, 0, 0, 225, 450, 451, 452, 0,
	226, 453, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 0, 240, 241, 0, 0, 0, 0, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 454, 455,
	0, 248, 0, 250, 249, 0, 251, 0, 0, 252,
	253, 254, 0, 255, 0, 256, 257, 0, 456, 258,
	259, 261, 264, 260, 265, 266, 267, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 459,
	271, 272, 0, 273, 0, 274, 0, 0, 0, 275,
	276, 0, 277, 460, 0, 461, 278, 0, 279, 280,
	281, 282, 283, 284, 285, 1265, 463, 464, 0, 0,
	468, 287, 0, 0, 0, 0, 286, 288, 295, 0,
	0, 289, 465, 291, 290, 292, 293, 294, 466, 0,
	467, 0, 296, 0, 0, 297, 298, 299, 0, 300,
	301, 0, 0, 302, 303, 304, 305, 0, 307, 306,
	0, 308, 469, 0, 309, 310, 0, 0, 311, 312,
	0, 0, 313, 0, 314, 315, 0, 0, 316, 317,
	319, 320, 318, 0, 321, 322, 324, 323, 0, 0,
	0, 0, 470, 471, 325, 326, 0, 327, 328, 329,
	0, 0, 331, 332, 0, 0, 333, 472, 0, 334,
	0, 473, 335, 330, 336, 337, 338, 339, 340, 341,
	0, 342, 474, 343, 475, 344, 0, 345, 0, 346,
	347, 348, 349, 350, 351, 476, 352, 353, 0, 354,
	355, 356, 357, 358, 0, 360, 361, 362, 359, 363,
	364, 365, 366, 0, 367, 0, 368, 369, 370, 371,
	477, 372, 0, 373, 377, 378, 379, 380, 381, 382,
	383, 0, 390, 391, 384, 386, 387, 388, 385, 389,
	392, 393, 0, 394, 374, 375, 395, 0, 396, 478,
	397, 398, 0, 408, 399, 400, 401, 376, 402, 406,
	407, 403, 404, 405, 479, 0, 410, 411, 409, 0,
	412, 413, 414, 415, 416, 262, 417, 263, 418, 0,
	480, 481, 482, 419, 0, 0, 420, 421, 483, 422,
	484, 0, 423, 424, 425, 0, 426, 427, 0, 0,
	428, 429, 430, 431, 433, 0, 434, 0, 432, 435,
	436, 437, 485, 486, 487, 0, 439, 438, 488, 1262,
	0, 204, 0, 440, 441, 489, 442, 443, 444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 445,
	0, 0, 0, 0, 213, 214, 215, 446, 447, 216,
	448, 217, 218, 449, 0, 219, 220, 221, 222, 223,
	224, 0, 0, 225, 450, 451, 452, 0, 226, 453,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	0, 240, 241, 0, 0, 0, 0, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 454, 455, 0, 248,
	0, 250, 249, 0, 251, 0, 0, 252, 253, 254,
	0, 255, 0, 256, 257, 0, 456, 258, 259, 261,
	264, 260, 265, 266, 267, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 459, 271, 272,
	0, 273, 0, 274, 0, 0, 0, 275, 276, 0,
	277, 460, 0, 461, 278, 0, 279, 280, 281, 282,
	283, 284, 285, 1261, 463, 464, 0, 0, 468, 287,
	0, 0, 0, 0, 286, 288, 295, 0, 0, 289,
	465, 291, 290, 292, 293, 294, 466, 0, 467, 0,
	296, 0, 0, 297, 298, 299, 0, 300, 301, 0,
	0, 302, 303, 304, 305, 0, 307, 306, 0, 308,
	469, 0, 309, 310, 0, 0, 311, 312, 0, 0,
	313, 0, 314, 315, 0, 0, 316, 317, 319, 320,
	318, 0, 321, 322, 324, 323, 0, 0, 0, 0,
	470, 471, 325, 326, 0, 327, 328, 329, 0, 0,
	331, 332, 0, 0, 333, 472, 0, 334, 0, 473,
	335, 330, 336, 337, 338, 339, 340, 341, 0, 342,
	474, 343, 475, 344, 0, 345, 0, 346, 347, 348,
	349, 350, 351, 476, 352, 353, 0, 354, 355, 356,
	357, 358, 0, 360, 361, 362, 359, 363, 364, 365,
	366, 0, 367, 0, 368, 369, 370, 371, 477, 372,
	0, 373, 377, 378, 379, 380, 381, 382, 383, 0,
	390, 391, 384, 386, 387, 388, 385, 389, 392, 393,
	0, 394, 374, 375, 395, 0, 396, 478, 397, 398,
	0, 408, 399, 400, 401, 376, 402, 406, 407, 403,
	404, 405, 479, 0, 410, 411, 409, 0, 412, 413,
	414, 415, 416, 262, 417, 263, 418, 0, 480, 481,
	482, 419, 0, 0, 420, 421, 483, 422, 484, 0,
	423, 424, 425, 0, 426, 427, 0, 0, 428, 429,
	430, 431, 433, 0, 434, 0, 432, 435, 436, 437,
	485, 486, 487, 0, 439, 438, 488, 1259, 0, 204,
	0, 440, 441, 489, 442, 443, 444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 445, 0, 0,
	0, 0, 213, 214, 215, 446, 447, 216, 448, 217,
	218, 449, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 450, 451, 452, 0, 226, 453, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 454, 455, 0, 248, 0, 250,
	249, 0, 251, 0, 0, 252, 253, 254, 0, 255,
	0, 256, 257, 0, 456, 258, 259, 261, 264, 260,
	265, 266, 267, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 459, 271, 272, 0, 273,
	0, 274, 0, 0, 0, 275, 276, 0, 277, 460,
	0, 461, 278, 0, 279, 280, 281, 282, 283, 284,
	285, 1258, 463, 464, 0, 0, 468, 287, 0, 0,
	0, 0, 286, 288, 295, 0, 0, 289, 465, 291,
	290, 292, 293, 294, 466, 0, 467, 0, 296, 0,
	0, 297, 298, 299, 0, 300, 301, 0, 0, 302,
	303, 304, 305, 0, 307, 306, 0, 308, 469, 0,
	309, 310, 0, 0, 311, 312, 0, 0, 313, 0,
	314, 315, 0, 0, 316, 317, 319, 320, 318, 0,
	321, 322, 324, 323, 0, 0, 0, 0, 470, 471,
	325, 326, 0, 327, 328, 329, 0, 0, 331, 332,
	0, 0, 333, 472, 0, 334, 0, 473, 335, 330,
	336, 337, 338, 339, 340, 341, 0, 342, 474, 343,
	475, 344, 0, 345, 0, 346, 347, 348, 349, 350,
	351, 476, 352, 353, 0, 354, 355, 356, 357, 358,
	0, 360, 361, 362, 359, 363, 364, 365, 366, 0,
	367, 0, 368, 369, 370, 371, 477, 372, 0, 373,
	377, 378, 379, 380, 381, 382, 383, 0, 390, 391,
	384, 386, 387, 388, 385, 389, 392, 393, 0, 394,
	374, 375, 395, 0, 396, 478, 397, 398, 0, 408,
	399, 400, 401, 376, 402, 406, 407, 403, 404, 405,
	479, 0, 410, 411, 409, 0, 412, 413, 414, 415,
	416, 262, 417, 263, 418, 0, 480, 481, 482, 419,
	0, 0, 420, 421, 483, 422, 484, 0, 423, 424,
	425, 0, 426, 427, 0, 0, 428, 429, 430, 431,
	433, 0, 434, 0, 432, 435, 436, 437, 485, 486,
	487, 0, 439, 438, 488, 1256, 0, 204, 0, 440,
	441, 489, 442, 443, 444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 445, 0, 0, 0, 0,
	213, 214, 215, 446, 447, 216, 448, 217, 218, 449,
	0, 219, 220, 221, 222, 223, 224, 0, 0, 225,
	450, 451, 452, 0, 226, 453, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 0, 240, 241, 0,
	0, 0, 0, 0, 0, 0, 242, 243, 244, 245,
	246, 247, 454, 455, 0, 248, 0, 250, 249, 0,
	251, 0, 0, 252, 253, 254, 0, 255, 0, 256,
	257, 0, 456, 258, 259, 261, 264, 260, 265, 266,
	267, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 459, 271, 272, 0, 273, 0, 274,
	0, 0, 0, 275, 276, 0, 277, 460, 0, 461,
	278, 0, 279, 280, 281, 282, 283, 284, 285, 1255,
	463, 464, 0, 0, 468, 287, 0, 0, 0, 0,
	286, 288, 295, 0, 0, 289, 465, 291, 290, 292,
	293, 294, 466, 0, 467, 0, 296, 0, 0, 297,
	298, 299, 0, 300, 301, 0, 0, 302, 303, 304,
	305, 0, 307, 306, 0, 308, 469, 0, 309, 310,
	0, 0, 311, 312, 0, 0, 313, 0, 314, 315,
	0, 0, 316, 317, 319, 320, 318, 0, 321, 322,
	324, 323, 0, 0, 0, 0, 470, 471, 325, 326,
	0, 327, 328, 329, 0, 0, 331, 332, 0, 0,
	333, 472, 0, 334, 0, 473, 335, 330, 336, 337,
	338, 339, 340, 341, 0, 342, 474, 343, 475, 344,
	0, 345, 0, 346, 347, 348, 349, 350, 351, 476,
	352, 353, 0, 354, 355, 356, 357, 358, 0, 360,
	361, 362, 359, 363, 364, 365, 366, 0, 367, 0,
	368, 369, 370, 371, 477, 372, 0, 373, 377, 378,
	379, 380, 381, 382, 383, 0, 390, 391, 384, 386,
	387, 388, 385, 389, 392, 393, 0, 394, 374, 375,
	395, 0, 396, 478, 397, 398, 0, 408, 399, 400,
	401, 376, 402, 406, 407, 403, 404, 405, 479, 0,
	410, 411, 409, 0, 412, 413, 414, 415, 416, 262,
	417, 263, 418, 0, 480, 481, 482, 419, 0, 0,
	420, 421, 483, 422, 484, 0, 423, 424, 425, 0,
	426, 427, 0, 0, 428, 429, 430, 431, 433, 0,
	434, 0, 432, 435, 436, 437, 485, 486, 487, 0,
	439, 438, 488, 1252, 0, 204, 0, 440, 441, 489,
	442, 443, 444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 445, 0, 0, 0, 0, 213, 214,
	215, 446, 447, 216, 448, 217, 218, 449, 0, 219,
	220, 221, 222, 223, 224, 0, 0, 225, 450, 451,
	452, 0, 226, 453, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 0, 240, 241, 0, 0, 0,
	0, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	454, 455, 0, 248, 0, 250, 249, 0, 251, 0,
	0, 252, 253, 254, 0, 255, 0, 256, 257, 0,
	456, 258, 259, 261, 264, 260, 265, 266, 267, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 459, 271, 272, 0, 273, 0, 274, 0, 0,
	0, 275, 276, 0, 277, 460, 0, 461, 278, 0,
	279, 280, 281, 282, 283, 284, 285, 1251, 463, 464,
	0, 0, 468, 287, 0, 0, 0, 0, 286, 288,
	295, 0, 0, 289, 465, 291, 290, 292, 293, 294,
	466, 0, 467, 0, 296, 0, 0, 297, 298, 299,
	0, 300, 301, 0, 0, 302, 303, 304, 305, 0,
	307, 306, 0, 308, 469, 0, 309, 310, 0, 0,
	311, 312, 0, 0, 313, 0, 314, 315, 0, 0,
	316, 317, 319, 320, 318, 0, 321, 322, 324, 323,
	0, 0, 0, 0, 470, 471, 325, 326, 0, 327,
	328, 329, 0, 0, 331, 332, 0, 0, 333, 472,
	0, 334, 0, 473, 335, 330, 336, 337, 338, 339,
	340, 341, 0, 342, 474, 343, 475, 344, 0, 345,
	0, 346, 347, 348, 349, 350, 351, 476, 352, 353,
	0, 354, 355, 356, 357, 358, 0, 360, 361, 362,
	359, 363, 364, 365, 366, 0, 367, 0, 368, 369,
	370, 371, 477, 372, 0, 373, 377, 378, 379, 380,
	381, 382, 383, 0, 390, 391, 384, 386, 387, 388,
	385, 389, 392, 393, 0, 394, 374, 375, 395, 0,
	396, 478, 397, 398, 0, 408, 399, 400, 401, 376,
	402, 406, 407, 403, 404, 405, 479, 0, 410, 411,
	409, 0, 412, 413, 414, 415, 416, 262, 417, 263,
	418, 0, 480, 481, 482, 419, 0, 0, 420, 421,
	483, 422, 484, 0, 423, 424, 425, 0, 426, 427,
	0, 0, 428, 429, 430, 431, 433, 0, 434, 0,
	432, 435, 436, 437, 485, 486, 487, 0, 439, 438,
	488, 1227, 0, 204, 0, 440, 441, 489, 442, 443,
	444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 445, 0, 0, 0, 0, 213, 214, 215, 446,
	447, 216, 448, 217, 218, 449, 0, 219, 220, 221,
	222, 223, 224, 0, 0, 225, 450, 451, 452, 0,
	226, 453, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 0, 240, 241, 0, 0, 0, 0, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 454, 455,
	0, 248, 0, 250, 249, 0, 251, 0, 0, 252,
	253, 254, 0, 255, 0, 256, 257, 0, 456, 258,
	259, 261, 264, 260, 265, 266, 267, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 459,
	271, 272, 0, 273, 0, 274, 0, 0, 0, 275,
	276, 0, 277, 460, 0, 461, 278, 0, 279, 280,
	281, 282, 283, 284, 285, 462, 463, 464, 0, 0,
	468, 287, 0, 0, 0, 0, 286, 288, 295, 0,
	0, 289, 465, 291, 290, 292, 293, 294, 466, 0,
	467, 0, 296, 0, 0, 297, 298, 299, 0, 300,
	301, 0, 0, 302, 303, 304, 305, 0, 307, 306,
	0, 308, 469, 0, 309, 310, 0, 0, 311, 312,
	0, 0, 313, 0, 314, 315, 0, 0, 316, 317,
	319, 320, 318, 0, 321, 322, 324, 323, 0, 0,
	0, 0, 470, 471, 325, 326, 0, 327, 328, 329,
	0, 0, 331, 332, 0, 0, 333, 472, 0, 334,
	0, 473, 335, 330, 336, 337, 338, 339, 340, 341,
	0, 342, 474, 343, 475, 344, 0, 345, 0, 346,
	347, 348, 349, 350, 351, 476, 352, 353, 0, 354,
	355, 356, 357, 358, 0, 360, 361, 362, 359, 363,
	364, 365, 366, 0, 367, 0, 368, 369, 370, 371,
	477, 372, 0, 373, 377, 378, 379, 380, 381, 382,
	383, 0, 390, 391, 384, 386, 387, 388, 385, 389,
	392, 393, 0, 394, 374, 375, 395, 0, 396, 478,
	397, 398, 0, 408, 399, 400, 401, 376, 402, 406,
	407, 403, 404, 405, 479, 0, 410, 411, 409, 0,
	412, 413, 414, 415, 416, 262, 417, 263, 418, 0,
	480, 481, 482, 419, 0, 0, 420, 421, 483, 422,
	484, 0, 423, 424, 425, 0, 426, 427, 0, 0,
	428, 429, 430, 431, 433, 0, 434, 0, 432, 435,
	436, 437, 485, 486, 487, 0, 439, 438, 488, 1215,
	0, 204, 0, 440, 441, 489, 442, 443, 444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 445,
	0, 0, 0, 0, 213, 214, 215, 446, 447, 216,
	448, 217, 218, 449, 0, 219, 220, 221, 222, 223,
	224, 0, 0, 225, 450, 451, 452, 0, 226, 453,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	0, 240, 241, 0, 0, 0, 0, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 454, 455, 0, 248,
	0, 250, 249, 0, 251, 0, 0, 252, 253, 254,
	0, 255, 0, 256, 257, 0, 456, 258, 259, 261,
	264, 260, 265, 266, 267, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 459, 271, 272,
	0, 273, 0, 274, 0, 0, 0, 275, 276, 0,
	277, 460, 0, 461, 278, 0, 279, 280, 281, 282,
	283, 284, 285, 1214, 463, 464, 0, 0, 468, 287,
	0, 0, 0, 0, 286, 288, 295, 0, 0, 289,
	465, 291, 290, 292, 293, 294, 466, 0, 467, 0,
	296, 0, 0, 297, 298, 299, 0, 300, 301, 0,
	0, 302, 303, 304, 305, 0, 307, 306, 0, 308,
	469, 0, 309, 310, 0, 0, 311, 312, 0, 0,
	313, 0, 314, 315, 0, 0, 316, 317, 319, 320,
	318, 0, 321, 322, 324, 323, 0, 0, 0, 0,
	470, 471, 325, 326, 0, 327, 328, 329, 0, 0,
	331, 332, 0, 0, 333, 472, 0, 334, 0, 473,
	335, 330, 336, 337, 338, 339, 340, 341, 0, 342,
	474, 343, 475, 344, 0, 345, 0, 346, 347, 348,
	349, 350, 351, 476, 352, 353, 0, 354, 355, 356,
	357, 358, 0, 360, 361, 362, 359, 363, 364, 365,
	366, 0, 367, 0, 368, 369, 370, 371, 477, 372,
	0, 373, 377, 378, 379, 380, 381, 382, 383, 0,
	390, 391, 384, 386, 387, 388, 385, 389, 392, 393,
	0, 394, 374, 375, 395, 0, 396, 478, 397, 398,
	0, 408, 399, 400, 401, 376, 402, 406, 407, 403,
	404, 405, 479, 0, 410, 411, 409, 0, 412, 413,
	414, 415, 416, 262, 417, 263, 418, 0, 480, 481,
	482, 419, 0, 0, 420, 421, 483, 422, 484, 0,
	423, 424, 425, 0, 426, 427, 0, 0, 428, 429,
	430, 431, 433, 0, 434, 0, 432, 435, 436, 437,
	485, 486, 487, 0, 439, 438, 488, 1199, 0, 204,
	0, 440, 441, 489, 442, 443, 444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 445, 0, 0,
	0, 0, 213, 214, 215, 446, 447, 216, 448, 217,
	218, 449, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 450, 451, 452, 0, 226, 453, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 454, 455, 0, 248, 0, 250,
	249, 0, 251, 0, 0, 252, 253, 254, 0, 255,
	0, 256, 257, 0, 456, 258, 259, 261, 264, 260,
	265, 266, 267, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 459, 271, 272, 0, 273,
	0, 274, 0, 0, 0, 275, 276, 0, 277, 460,
	0, 461, 278, 0, 279, 280, 281, 282, 283, 284,
	285, 462, 463, 464, 0, 0, 468, 287, 0, 0,
	0, 0, 286, 288, 295, 0, 0, 289, 465, 291,
	290, 292, 293, 294, 466, 0, 467, 0, 296, 0,
	0, 297, 298, 299, 0, 300, 301, 0, 0, 302,
	303, 304, 305, 0, 307, 306, 0, 308, 469, 0,
	309, 310, 0, 0, 311, 312, 0, 0, 313, 0,
	314, 315, 0, 0, 316, 317, 319, 320, 318, 0,
	321, 322, 324, 323, 0, 0, 0, 0, 470, 471,
	325, 326, 0, 327, 328, 329, 0, 0, 331, 332,
	0, 0, 333, 472, 0, 334, 0, 473, 335, 330,
	336, 337, 338, 339, 340, 341, 0, 342, 474, 343,
	475, 344, 0, 345, 0, 346, 347, 348, 349, 350,
	351, 476, 352, 353, 0, 354, 355, 356, 357, 358,
	0, 360, 361, 362, 359, 363, 364, 365, 366, 0,
	367, 0, 368, 369, 370, 371, 477, 372, 0, 373,
	377, 378, 379, 380, 381, 382, 383, 0, 390, 391,
	384, 386, 387, 388, 385, 389, 392, 393, 0, 394,
	374, 375, 395, 0, 396, 478, 397, 398, 0, 408,
	399, 400, 401, 376, 402, 406, 407, 403, 404, 405,
	479, 0, 410, 411, 409, 0, 412, 413, 414, 415,
	416, 262, 417, 263, 418, 0, 480, 481, 482, 419,
	0, 0, 420, 421, 483, 422, 484, 0, 423, 424,
	425, 0, 426, 427, 0, 0, 428, 429, 430, 431,
	433, 0, 434, 0, 432, 435, 436, 437, 485, 486,
	487, 0, 439, 438, 488, 1144, 0, 204, 0, 440,
	441, 489, 442, 443, 444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 445, 0, 0, 0, 0,
	213, 214, 215, 446, 447, 216, 448, 217, 218, 449,
	0, 219, 220, 221, 222, 223, 224, 0, 0, 225,
	450, 451, 452, 0, 226, 453, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 0, 240, 241, 0,
	0, 0, 0, 0, 0, 0, 242, 243, 244, 245,
	246, 247, 454, 455, 0, 248, 0, 250, 249, 0,
	251, 0, 0, 252, 253, 254, 0, 255, 0, 256,
	257, 0, 456, 258, 259, 261, 264, 260, 265, 266,
	267, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 459, 271, 272, 0, 273, 0, 274,
	0, 0, 0, 275, 276, 0, 277, 460, 0, 461,
	278, 0, 279, 280, 281, 282, 283, 284, 285, 1146,
	463, 464, 0, 0, 468, 287, 0, 0, 0, 0,
	286, 288, 295, 0, 0, 289, 465, 291, 290, 292,
	293, 294, 466, 0, 467, 0, 296, 0, 0, 297,
	298, 299, 0, 300, 301, 0, 0, 302, 303, 304,
	305, 0, 307, 306, 0, 308, 469, 0, 309, 310,
	0, 0, 311, 312, 0, 0, 313, 0, 314, 315,
	0, 0, 316, 317, 319, 320, 318, 0, 321, 322,
	324, 323, 0, 0, 0, 0, 470, 471, 325, 326,
	0, 327, 328, 329, 0, 0, 331, 332, 0, 0,
	333, 472, 0, 334, 0, 473, 335, 330, 336, 337,
	338, 339, 340, 341, 0, 342, 474, 343, 475, 344,
	0, 345, 0, 346, 347, 348, 349, 350, 351, 476,
	352, 353, 0, 354, 355, 356, 357, 358, 0, 360,
	361, 362, 359, 363, 364, 365, 366, 0, 367, 0,
	368, 369, 370, 371, 477, 372, 0, 373, 377, 378,
	379, 380, 381, 382, 383, 0, 390, 391, 384, 386,
	387, 388, 385, 389, 392, 393, 0, 394, 374, 375,
	395, 0, 396, 478, 397, 398, 0, 408, 399, 400,
	401, 376, 402, 406, 407, 403, 404, 405, 479, 0,
	410, 411, 409, 0, 412, 413, 414, 415, 416, 262,
	417, 263, 418, 0, 480, 481, 482, 419, 0, 0,
	420, 421, 483, 422, 484, 0, 423, 424, 425, 0,
	426, 427, 0, 0, 428, 429, 430, 431, 433, 0,
	434, 0, 432, 435, 436, 437, 485, 486, 487, 0,
	439, 438, 488, 1138, 0, 204, 0, 440, 441, 489,
	442, 443, 444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 445, 0, 0, 0, 0, 213, 214,
	215, 446, 447, 216, 448, 217, 218, 449, 0, 219,
	220, 221, 222, 223, 224, 0, 0, 225, 450, 451,
	452, 0, 226, 453, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 0, 240, 241, 0, 0, 0,
	0, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	454, 455, 0, 248, 0, 250, 249, 0, 251, 0,
	0, 252, 253, 254, 0, 255, 0, 256, 257, 0,
	456, 258, 259, 261, 264, 260, 265, 266, 267, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 459, 271, 272, 0, 273, 0, 274, 0, 0,
	0, 275, 276, 0, 277, 460, 0, 461, 278, 0,
	279, 280, 281, 282, 283, 284, 285, 462, 463, 464,
	0, 0, 468, 287, 0, 0, 0, 0, 286, 288,
	295, 0, 0, 289, 465, 291, 290, 292, 293, 294,
	466, 0, 467, 0, 296, 0, 0, 297, 298, 299,
	0, 300, 301, 0, 0, 302, 303, 304, 305, 0,
	307, 306, 0, 308, 469, 0, 309, 310, 0, 0,
	311, 312, 0, 0, 313, 0, 314, 315, 0, 0,
	316, 317, 319, 320, 318, 0, 321, 322, 324, 323,
	0, 0, 0, 0, 470, 471, 325, 326, 0, 327,
	328, 329, 0, 0, 331, 332, 0, 0, 333, 472,
	0, 334, 0, 473, 335, 330, 336, 337, 338, 339,
	340, 341, 0, 342, 474, 343, 475, 344, 0, 345,
	0, 346, 347, 348, 349, 350, 351, 476, 352, 353,
	0, 354, 355, 356, 357, 358, 0, 360, 361, 362,
	359, 363, 364, 365, 366, 0, 367, 0, 368, 369,
	370, 371, 477, 372, 0, 373, 377, 378, 379, 380,
	381, 382, 383, 0, 390, 391, 384, 386, 387, 388,
	385, 389, 392, 393, 0, 394, 374, 375, 395, 0,
	396, 478, 397, 398, 0, 408, 399, 400, 401, 376,
	402, 406, 407, 403, 404, 405, 479, 0, 410, 411,
	409, 0, 412, 413, 414, 415, 416, 262, 417, 263,
	418, 0, 480, 481, 482, 419, 0, 0, 420, 421,
	483, 422, 484, 0, 423, 424, 425, 0, 426, 427,
	0, 0, 428, 429, 430, 431, 433, 0, 434, 0,
	432, 435, 436, 437, 485, 486, 487, 0, 439, 438,
	488, 540, 0, 204, 0, 440, 441, 489, 442, 443,
	444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 445, 0, 0, 0, 0, 213, 214, 215, 446,
	447, 216, 448, 217, 218, 449, 0, 219, 220, 221,
	222, 223, 224, 0, 0, 225, 450, 451, 1006, 0,
	226, 453, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 0, 240, 241, 0, 0, 0, 0, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 454, 455,
	0, 248, 0, 250, 249, 0, 251, 0, 0, 252,
	253, 254, 0, 255, 0, 256, 257, 0, 456, 258,
	259, 261, 264, 260, 265, 266, 267, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 459,
	271, 272, 0, 273, 0, 274, 0, 0, 0, 275,
	276, 0, 277, 460, 0, 461, 278, 0, 279, 280,
	281, 282, 283, 284, 285, 462, 463, 464, 0, 0,
	468, 287, 0, 0, 0, 0, 286, 288, 295, 0,
	0, 289, 465, 291, 290, 292, 293, 294, 466, 0,
	467, 0, 296, 0, 0, 297, 298, 299, 0, 300,
	301, 0, 0, 302, 303, 304, 305, 0, 307, 306,
	0, 308, 469, 0, 309, 310, 0, 0, 311, 312,
	0, 0, 313, 0, 314, 315, 0, 0, 316, 317,
	319, 320, 541, 0, 321, 322, 324, 323, 0, 0,
	0, 0, 470, 471, 325, 326, 0, 327, 328, 329,
	0, 0, 331, 332, 0, 0, 333, 472, 0, 334,
	0, 473, 335, 330, 336, 337, 338, 339, 340, 341,
	0, 342, 474, 343, 475, 344, 0, 345, 0, 346,
	347, 348, 349, 350, 351, 476, 352, 353, 0, 354,
	355, 356, 357, 358, 0, 360, 361, 362, 359, 363,
	364, 365, 366, 0, 367, 0, 368, 369, 370, 371,
	477, 372, 0, 373, 377, 378, 537, 380, 381, 382,
	383, 0, 390, 391, 384, 386, 387, 388, 385, 389,
	392, 393, 0, 394, 374, 375, 395, 0, 396, 478,
	397, 398, 0, 408, 399, 400, 401, 376, 402, 406,
	407, 403, 404, 405, 479, 0, 410, 411, 409, 0,
	412, 413, 414, 415, 416, 262, 417, 263, 418, 0,
	536, 481, 482, 419, 0, 0, 420, 1007, 483, 422,
	484, 0, 423, 424, 425, 0, 426, 427, 0, 0,
	428, 429, 430, 431, 433, 0, 434, 0, 432, 435,
	436, 437, 485, 486, 487, 204, 439, 438, 488, 0,
	0, 0, 0, 440, 441, 489, 442, 443, 444, 0,
	0, 0, 207, 208, 209, 210, 211, 989, 212, 0,
	0, 0, 0, 445, 0, 0, 0, 0, 213, 214,
	215, 446, 447, 216, 448, 217, 218, 449, 0, 219,
	220, 221, 222, 223, 224, 0, 0, 225, 450, 451,
	452, 0, 226, 453, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 0, 240, 241, 0, 0, 0,
	0, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	454, 455, 0, 248, 0, 250, 249, 0, 251, 0,
	0, 252, 253, 254, 0, 255, 0, 256, 257, 0,
	456, 258, 259, 261, 264, 260, 265, 266, 267, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 459, 271, 272, 0, 273, 0, 274, 0, 0,
	0, 275, 276, 0, 277, 460, 0, 461, 278, 0,
	279, 280, 281, 282, 283, 284, 285, 462, 463, 464,
	0, 0, 468, 287, 0, 0, 0, 0, 286, 288,
	295, 0, 0, 289, 465, 291, 290, 292, 293, 294,
	466, 0, 467, 0, 296, 0, 0, 297, 298, 299,
	0, 300, 301, 0, 0, 302, 303, 304, 305, 0,
	307, 306, 0, 308, 469, 0, 309, 310, 0, 0,
	311, 312, 0, 0, 313, 0, 314, 315, 0, 0,
	316, 317, 319, 320, 318, 0, 321, 322, 324, 323,
	0, 0, 0, 0, 470, 471, 325, 326, 0, 327,
	328, 329, 0, 0, 331, 332, 0, 0, 333, 472,
	0, 334, 0, 473, 335, 330, 336, 337, 338, 339,
	340, 341, 0, 342, 474, 343, 475, 344, 0, 345,
	0, 346, 347, 348, 349, 350, 351, 476, 352, 353,
	0, 354, 355, 356, 357, 358, 0, 360, 361, 362,
	359, 363, 364, 365, 366, 0, 367, 0, 368, 369,
	370, 371, 477, 372, 0, 373, 377, 378, 379, 380,
	381, 382, 383, 0, 390, 391, 384, 386, 387, 388,
	385, 389, 392, 393, 0, 394, 374, 375, 395, 0,
	396, 478, 397, 398, 0, 408, 399, 400, 401, 376,
	402, 406, 407, 403, 404, 405, 479, 0, 410, 411,
	409, 0, 412, 413, 414, 415, 416, 262, 417, 263,
	418, 0, 480, 481, 482, 419, 0, 0, 420, 421,
	483, 422, 484, 0, 423, 424, 425, 0, 426, 427,
	0, 0, 428, 429, 430, 431, 433, 0, 434, 0,
	432, 435, 436, 437, 485, 486, 487, 0, 439, 438,
	488, 540, 0, 204, 0, 440, 441, 489, 442, 443,
	444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 445, 0, 0, 0, 0, 213, 214, 215, 446,
	447, 216, 448, 217, 218, 449, 0, 219, 220, 221,
	222, 223, 224, 0, 0, 225, 450, 451, 452, 0,
	530, 453, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 528, 0, 237, 238,
	239, 0, 0, 240, 241, 0, 0, 0, 0, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 454, 455,
	0, 248, 0, 250, 249, 0, 251, 0, 0, 252,
	253, 254, 0, 255, 0, 256, 257, 0, 456, 258,
	259, 261, 264, 260, 265, 266, 267, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 459,
	271, 272, 0, 273, 0, 274, 0, 0, 0, 275,
	276, 0, 277, 460, 0, 461, 278, 0, 279, 280,
	281, 282, 283, 284, 285, 462, 463, 464, 0, 0,
	468, 287, 0, 0, 0, 0, 286, 288, 295, 0,
	0, 289, 465, 291, 290, 292, 293, 294, 466, 0,
	467, 0, 296, 0, 0, 297, 298, 299, 0, 300,
	301, 0, 0, 302, 303, 304, 305, 0, 307, 306,
	0, 308, 469, 0, 309, 310, 0, 0, 311, 529,
	0, 0, 313, 0, 314, 315, 0, 0, 316, 317,
	319, 320, 541, 0, 321, 322, 324, 323, 0, 0,
	0, 0, 470, 471, 325, 326, 0, 327, 328, 329,
	0, 0, 331, 332, 0, 0, 333, 472, 0, 334,
	0, 473, 335, 330, 336, 337, 338, 339, 340, 341,
	0, 342, 474, 343, 475, 344, 0, 345, 0, 346,
	347, 348, 349, 350, 351, 476, 352, 353, 0, 354,
	355, 356, 357, 358, 0, 360, 361, 362, 359, 363,
	364, 365, 366, 0, 367, 0, 368, 369, 370, 371,
	531, 372, 0, 373, 377, 378, 537, 380, 381, 382,
	383, 0, 390, 391, 384, 386, 387, 388, 385, 389,
	532, 393, 0, 394, 374, 375, 395, 0, 396, 478,
	397, 398, 0, 408, 399, 400, 401, 376, 402, 406,
	407, 403, 404, 405, 479, 0, 410, 411, 409, 0,
	412, 413, 414, 415, 416, 262, 417, 263, 418, 0,
	536, 481, 482, 419, 0, 0, 420, 534, 483, 422,
	484, 0, 423, 424, 425, 0, 426, 427, 0, 0,
	428, 429, 430, 431, 433, 0, 434, 0, 432, 435,
	436, 437, 485, 486, 487, 0, 439, 438, 488, 524,
	0, 204, 0, 440, 441, 489, 442, 443, 444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 445,
	0, 0, 0, 0, 213, 214, 215, 446, 447, 216,
	448, 217, 218, 449, 0, 219, 220, 221, 222, 223,
	224, 0, 0, 225, 450, 451, 452, 0, 226, 453,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	0, 240, 241, 0, 0, 0, 0, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 454, 455, 0, 248,
	0, 250, 249, 0, 251, 0, 0, 252, 253, 254,
	0, 255, 0, 256, 257, 0, 456, 258, 259, 261,
	264, 260, 265, 266, 267, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 459, 271, 272,
	0, 273, 0, 274, 0, 0, 0, 275, 276, 0,
	277, 460, 0, 461, 278, 0, 279, 280, 281, 282,
	283, 284, 285, 462, 463, 464, 0, 0, 468, 287,
	0, 0, 0, 0, 286, 288, 295, 0, 0, 289,
	465, 291, 290, 292, 293, 294, 466, 0, 467, 0,
	296, 0, 0, 297, 298, 299, 0, 300, 301, 0,
	0, 302, 303, 304, 305, 0, 307, 306, 0, 308,
	469, 0, 309, 310, 0, 0, 311, 312, 0, 0,
	313, 0, 314, 315, 0, 0, 316, 317, 319, 320,
	318, 0, 321, 322, 324, 323, 0, 0, 0, 0,
	470, 471, 325, 326, 0, 327, 328, 329, 0, 0,
	331, 332, 0, 0, 333, 472, 0, 334, 0, 473,
	335, 330, 336, 337, 338, 339, 340, 341, 0, 342,
	474, 343, 475, 344, 0, 345, 0, 346, 347, 348,
	349, 350, 351, 476, 352, 353, 0, 354, 355, 356,
	357, 358, 0, 360, 361, 362, 359, 363, 364, 365,
	366, 0, 367, 0, 368, 369, 370, 371, 477, 372,
	0, 373, 525, 378, 379, 380, 381, 382, 383, 0,
	390, 391, 384, 386, 387, 388, 385, 389, 392, 393,
	0, 394, 374, 375, 395, 0, 396, 478, 397, 398,
	0, 408, 399, 400, 401, 376, 402, 406, 407, 403,
	404, 405, 479, 0, 410, 411, 409, 0, 412, 413,
	414, 415, 416, 262, 417, 263, 418, 0, 480, 481,
	482, 419, 0, 0, 420, 421, 483, 422, 484, 0,
	423, 424, 425, 0, 426, 427, 0, 0, 428, 429,
	430, 431, 433, 0, 434, 0, 432, 435, 436, 437,
	485, 486, 487, 0, 439, 438, 488, 522, 0, 204,
	0, 440, 441, 489, 442, 443, 444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 445, 0, 0,
	0, 0, 213, 214, 215, 446, 447, 216, 448, 217,
	218, 449, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 450, 451, 452, 0, 226, 453, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 454, 455, 0, 248, 0, 250,
	249, 0, 251, 0, 0, 252, 253, 254, 0, 255,
	0, 256, 257, 0, 456, 258, 259, 261, 264, 260,
	265, 266, 267, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 459, 271, 272, 0, 273,
	0, 274, 0, 0, 0, 275, 276, 0, 277, 460,
	0, 461, 278, 0, 279, 280, 281, 282, 283, 284,
	285, 462, 463, 464, 0, 0, 468, 287, 0, 0,
	0, 0, 286, 288, 295, 0, 0, 289, 465, 291,
	290, 292, 293, 294, 466, 0, 467, 0, 296, 0,
	0, 297, 298, 299, 0, 300, 301, 0, 0, 302,
	303, 304, 305, 0, 307, 306, 0, 308, 469, 0,
	309, 310, 0, 0, 311, 312, 0, 0, 313, 0,
	314, 315, 0, 0, 316, 317, 319, 320, 318, 0,
	321, 322, 324, 323, 0, 0, 0, 0, 470, 471,
	325, 326, 0, 327, 328, 329, 0, 0, 331, 332,
	0, 0, 333, 472, 0, 334, 0, 473, 335, 330,
	336, 337, 338, 339, 340, 341, 0, 342, 474, 343,
	475, 344, 0, 345, 0, 346, 347, 348, 349, 350,
	351, 476, 352, 353, 0, 354, 355, 356, 357, 358,
	0, 360, 361, 362, 359, 363, 364, 365, 366, 0,
	367, 0, 368, 369, 370, 371, 477, 372, 0, 373,
	377, 378, 379, 380, 381, 382, 383, 0, 390, 391,
	384, 386, 387, 388, 385, 389, 392, 393, 0, 394,
	374, 375, 395, 0, 396, 478, 397, 398, 0, 408,
	399, 400, 401, 376, 402, 406, 407, 403, 404, 405,
	479, 0, 410, 411, 409, 0, 412, 413, 414, 415,
	416, 262, 417, 263, 418, 0, 480, 481, 482, 419,
	0, 0, 420, 421, 483, 422, 484, 0, 423, 424,
	425, 0, 426, 427, 0, 0, 428, 429, 430, 431,
	433, 0, 434, 0, 432, 435, 436, 437, 485, 486,
	487, 0, 439, 438, 488, 516, 0, 204, 0, 440,
	441, 489, 442, 443, 444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 445, 0, 0, 0, 0,
	213, 214, 215, 446, 447, 216, 448, 217, 218, 449,
	0, 219, 220, 221, 222, 223, 224, 0, 0, 225,
	450, 451, 452, 0, 226, 453, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 0, 240, 241, 0,
	0, 0, 0, 0, 0, 0, 242, 243, 244, 245,
	246, 247, 454, 455, 0, 248, 0, 250, 249, 0,
	251, 0, 0, 252, 253, 254, 0, 255, 0, 256,
	257, 0, 456, 258, 259, 261, 264, 260, 265, 266,
	267, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 459, 271, 272, 0, 273, 0, 274,
	0, 0, 0, 275, 276, 0, 277, 460, 0, 461,
	278, 0, 279, 280, 281, 282, 283, 284, 285, 462,
	463, 464, 0, 0, 468, 287, 0, 0, 0, 0,
	286, 288, 295, 0, 0, 289, 465, 291, 290, 292,
	293, 294, 466, 0, 467, 0, 296, 0, 0, 297,
	298, 299, 0, 300, 301, 0, 0, 302, 303, 304,
	305, 0, 307, 306, 0, 308, 469, 0, 309, 310,
	0, 0, 311, 312, 0, 0, 313, 0, 314, 315,
	0, 0, 316, 317, 319, 320, 318, 0, 321, 322,
	324, 323, 0, 0, 0, 0, 470, 471, 325, 326,
	0, 327, 328, 329, 0, 0, 331, 332, 0, 0,
	333, 472, 0, 334, 0, 473, 335, 330, 336, 337,
	338, 339, 340, 341, 0, 342, 474, 343, 475, 344,
	0, 345, 0, 346, 347, 348, 349, 350, 351, 476,
	352, 353, 0, 354, 355, 356, 357, 358, 0, 360,
	361, 362, 359, 363, 364, 365, 366, 0, 367, 0,
	368, 369, 370, 371, 477, 372, 0, 373, 377, 378,
	379, 380, 381, 382, 383, 0, 390, 391, 384, 386,
	387, 388, 385, 389, 392, 393, 0, 394, 374, 375,
	395, 0, 396, 478, 397, 398, 0, 408, 399, 400,
	401, 376, 402, 406, 407, 403, 404, 405, 479, 0,
	410, 411, 409, 0, 412, 413, 414, 415, 416, 262,
	417, 263, 418, 0, 480, 481, 482, 419, 0, 0,
	420, 421, 483, 422, 484, 0, 423, 424, 425, 0,
	426, 427, 0, 0, 428, 429, 430, 431, 433, 0,
	434, 0, 432, 435, 436, 437, 485, 486, 487, 0,
	439, 438, 488, 492, 0, 204, 0, 440, 441, 489,
	442, 443, 444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 445, 0, 0, 0, 0, 213, 214,
	215, 446, 447, 216, 448, 217, 218, 449, 0, 219,
	220, 221, 222, 223, 224, 0, 0, 225, 450, 451,
	452, 0, 226, 453, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 0, 240, 241, 0, 0, 0,
	0, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	454, 455, 0, 248, 0, 250, 249, 0, 251, 0,
	0, 252, 253, 254, 0, 255, 0, 256, 257, 0,
	456, 258, 259, 261, 264, 260, 265, 266, 267, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 459, 271, 272, 0, 273, 0, 274, 0, 0,
	0, 275, 276, 0, 277, 460, 0, 461, 278, 0,
	279, 280, 281, 282, 283, 284, 285, 462, 463, 464,
	0, 0, 468, 287, 0, 0, 0, 0, 286, 288,
	295, 0, 0, 289, 465, 291, 290, 292, 293, 294,
	466, 0, 467, 0, 296, 0, 0, 297, 298, 299,
	0, 300, 301, 0, 0, 302, 303, 304, 305, 0,
	307, 306, 0, 308, 469, 0, 309, 310, 0, 0,
	311, 312, 0, 0, 313, 0, 314, 315, 0, 0,
	316, 317, 319, 320, 318, 0, 321, 322, 324, 323,
	0, 0, 0, 0, 470, 471, 325, 326, 0, 327,
	328, 329, 0, 0, 331, 332, 0, 0, 333, 472,
	0, 334, 0, 473, 335, 330, 336, 337, 338, 339,
	340, 341, 0, 342, 474, 343, 475, 344, 0, 345,
	0, 346, 347, 348, 349, 350, 351, 476, 352, 353,
	0, 354, 355, 356, 357, 358, 0, 360, 361, 362,
	359, 363, 364, 365, 366, 0, 367, 0, 368, 369,
	370, 371, 477, 372, 0, 373, 377, 378, 379, 380,
	381, 382, 383, 0, 390, 391, 384, 386, 387, 388,
	385, 389, 392, 393, 0, 394, 374, 375, 395, 0,
	396, 478, 397, 398, 0, 408, 399, 400, 401, 376,
	402, 406, 407, 403, 404, 405, 479, 0, 410, 411,
	409, 0, 412, 413, 414, 415, 416, 262, 417, 263,
	418, 0, 480, 481, 482, 419, 0, 0, 420, 421,
	483, 422, 484, 0, 423, 424, 425, 0, 426, 427,
	0, 0, 428, 429, 430, 431, 433, 0, 434, 0,
	432, 435, 436, 437, 485, 486, 487, 204, 439, 438,
	488, 0, 0, 0, 0, 440, 441, 489, 442, 443,
	444, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 445, 0, 0, 0, 0,
	213, 214, 215, 446, 447, 216, 448, 217, 218, 449,
	0, 219, 220, 221, 222, 223, 224, 0, 0, 225,
	450, 451, 452, 0, 226, 453, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 0, 240, 241, 0,
	0, 0, 0, 0, 0, 0, 242, 243, 244, 245,
	246, 247, 454, 455, 0, 248, 0, 250, 249, 0,
	251, 0, 0, 252, 253, 254, 0, 255, 0, 256,
	257, 0, 456, 258, 259, 261, 264, 260, 265, 266,
	267, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 459, 271, 272, 0, 273, 0, 274,
	0, 0, 0, 275, 276, 0, 277, 460, 0, 461,
	278, 0, 279, 280, 281, 282, 283, 284, 285, 462,
	463, 464, 0, 0, 468, 287, 0, 0, 0, 0,
	286, 288, 295, 0, 0, 289, 465, 291, 290, 292,
	293, 294, 466, 0, 467, 0, 296, 0, 0, 297,
	298, 299, 0, 300, 301, 0, 0, 302, 303, 304,
	305, 0, 307, 306, 0, 308, 469, 0, 309, 310,
	0, 0, 311, 312, 0, 0, 313, 0, 314, 315,
	0, 0, 316, 317, 319, 320, 318, 0, 321, 322,
	324, 323, 0, 0, 0, 0, 470, 471, 325, 326,
	0, 327, 328, 329, 0, 0, 331, 332, 0, 0,
	333, 472, 0, 334, 0, 473, 335, 330, 336, 337,
	338, 339, 340, 341, 0, 342, 474, 343, 475, 344,
	0, 345, 0, 346, 347, 348, 349, 350, 351, 476,
	352, 353, 0, 354, 355, 356, 357, 358, 0, 360,
	361, 362, 359, 363, 364, 365, 366, 0, 367, 0,
	368, 369, 370, 371, 477, 372, 0, 373, 377, 378,
	379, 380, 381, 382, 383, 0, 390, 391, 384, 386,
	387, 388, 385, 389, 392, 393, 0, 394, 374, 375,
	395, 0, 396, 478, 397, 398, 0, 408, 399, 400,
	401, 376, 402, 406, 407, 403, 404, 405, 479, 0,
	410, 411, 409, 0, 412, 413, 414, 415, 416, 262,
	417, 263, 418, 0, 480, 481, 482, 419, 0, 0,
	420, 421, 483, 422, 484, 0, 423, 424, 425, 0,
	426, 427, 0, 0, 428, 429, 430, 431, 433, 0,
	434, 0, 432, 435, 436, 437, 485, 486, 487, 204,
	439, 438, 488, 0, 0, 0, 0, 440, 441, 489,
	442, 443, 444, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 445, 0, 0,
	0, 0, 213, 214, 215, 446, 447, 216, 448, 217,
	218, 449, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 450, 451, 452, 0, 226, 453, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 454, 455, 0, 248, 0, 250,
	249, 0, 251, 0, 0, 252, 253, 254, 0, 255,
	0, 256, 257, 0, 456, 258, 259, 261, 264, 260,
	265, 266, 267, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 459, 271, 272, 0, 273,
	0, 274, 0, 0, 0, 275, 276, 0, 277, 460,
	0, 461, 278, 0, 279, 280, 281, 282, 283, 284,
	285, 2525, 463, 464, 0, 0, 468, 287, 0, 0,
	0, 0, 286, 288, 295, 0, 0, 289, 465, 291,
	290, 292, 293, 294, 466, 0, 467, 0, 296, 0,
	0, 297, 298, 299, 0, 300, 301, 0, 0, 302,
	303, 304, 305, 0, 307, 306, 0, 308, 469, 0,
	309, 310, 0, 0, 311, 312, 0, 0, 313, 0,
	314, 315, 0, 0, 316, 317, 319, 320, 318, 0,
	321, 322, 324, 323, 0, 0, 0, 0, 470, 471,
	325, 326, 0, 327, 328, 329, 0, 0, 331, 332,
	0, 0, 333, 472, 0, 334, 0, 473, 335, 330,
	336, 337, 338, 339, 340, 341, 0, 342, 474, 343,
	475, 344, 0, 345, 0, 346, 347, 348, 349, 350,
	351, 476, 352, 353, 0, 354, 355, 356, 357, 358,
	0, 360, 361, 362, 359, 363, 364, 365, 366, 0,
	367, 0, 368, 369, 370, 371, 477, 372, 0, 373,
	377, 378, 379, 380, 381, 382, 383, 0, 390, 391,
	384, 386, 387, 388, 385, 389, 392, 393, 0, 394,
	374, 375, 395, 0, 396, 478, 397, 398, 0, 408,
	399, 400, 401, 376, 402, 406, 407, 403, 404, 405,
	479, 0, 410, 411, 409, 0, 412, 413, 414, 415,
	416, 262, 417, 263, 418, 0, 480, 481, 482, 419,
	0, 0, 420, 421, 483, 422, 484, 0, 423, 424,
	425, 0, 426, 427, 0, 0, 428, 429, 430, 431,
	433, 0, 434, 0, 432, 435, 436, 437, 485, 486,
	487, 204, 439, 438, 488, 0, 0, 0, 0, 440,
	441, 489, 442, 443, 444, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 445,
	0, 0, 0, 0, 213, 214, 215, 446, 447, 216,
	448, 217, 218, 449, 0, 219, 220, 221, 222, 223,
	224, 0, 0, 225, 450, 451, 452, 0, 226, 453,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	0, 240, 241, 0, 0, 0, 0, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 454, 455, 0, 248,
	0, 250, 249, 0, 251, 0, 0, 252, 253, 254,
	0, 255, 0, 256, 257, 0, 456, 258, 259, 261,
	264, 260, 265, 266, 267, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 459, 271, 272,
	0, 273, 0, 274, 0, 0, 0, 275, 276, 0,
	277, 460, 0, 461, 278, 0, 279, 280, 281, 282,
	283, 284, 285, 2523, 463, 464, 0, 0, 468, 287,
	0, 0, 0, 0, 286, 288, 295, 0, 0, 289,
	465, 291, 290, 292, 293, 294, 466, 0, 467, 0,
	296, 0, 0, 297, 298, 299, 0, 300, 301, 0,
	0, 302, 303, 304, 305, 0, 307, 306, 0, 308,
	469, 0, 309, 310, 0, 0, 311, 312, 0, 0,
	313, 0, 314, 315, 0, 0, 316, 317, 319, 320,
	318, 0, 321, 322, 324, 323, 0, 0, 0, 0,
	470, 471, 325, 326, 0, 327, 328, 329, 0, 0,
	331, 332, 0, 0, 333, 472, 0, 334, 0, 473,
	335, 330, 336, 337, 338, 339, 340, 341, 0, 342,
	474, 343, 475, 344, 0, 345, 0, 346, 347, 348,
	349, 350, 351, 476, 352, 353, 0, 354, 355, 356,
	357, 358, 0, 360, 361, 362, 359, 363, 364, 365,
	366, 0, 367, 0, 368, 369, 370, 371, 477, 372,
	0, 373, 377, 378, 379, 380, 381, 382, 383, 0,
	390, 391, 384, 386, 387, 388, 385, 389, 392, 393,
	0, 394, 374, 375, 395, 0, 396, 478, 397, 398,
	0, 408, 399, 400, 401, 376, 402, 406, 407, 403,
	404, 405, 479, 0, 410, 411, 409, 0, 412, 413,
	414, 415, 416, 262, 417, 263, 418, 0, 480, 481,
	482, 419, 0, 0, 420, 421, 483, 422, 484, 0,
	423, 424, 425, 0, 426, 427, 0, 0, 428, 429,
	430, 431, 433, 0, 434, 0, 432, 435, 436, 437,
	485, 486, 487, 204, 439, 438, 488, 0, 0, 0,
	0, 440, 441, 489, 442, 443, 444, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 445, 0, 0, 0, 0, 213, 214, 215, 446,
	447, 216, 448, 217, 218, 449, 0, 219, 220, 221,
	222, 223, 224, 0, 0, 225, 450, 451, 452, 0,
	226, 453, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 0, 240, 241, 0, 0, 0, 0, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 454, 455,
	0, 248, 0, 250, 249, 0, 251, 0, 0, 252,
	253, 254, 0, 255, 0, 256, 257, 0, 456, 258,
	259, 261, 264, 260, 265, 266, 267, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 459,
	271, 272, 0, 273, 0, 274, 0, 0, 0, 275,
	276, 0, 277, 460, 0, 461, 278, 0, 279, 280,
	281, 282, 283, 284, 285, 2512, 463, 464, 0, 0,
	468, 287, 0, 0, 0, 0, 286, 288, 295, 0,
	0, 289, 465, 291, 290, 292, 293, 294, 466, 0,
	467, 0, 296, 0, 0, 297, 298, 299, 0, 300,
	301, 0, 0, 302, 303, 304, 305, 0, 307, 306,
	0, 308, 469, 0, 309, 310, 0, 0, 311, 312,
	0, 0, 313, 0, 314, 315, 0, 0, 316, 317,
	319, 320, 318, 0, 321, 322, 324, 323, 0, 0,
	0, 0, 470, 471, 325, 326, 0, 327, 328, 329,
	0, 0, 331, 332, 0, 0, 333, 472, 0, 334,
	0, 473, 335, 330, 336, 337, 338, 339, 340, 341,
	0, 342, 474, 343, 475, 344, 0, 345, 0, 346,
	347, 348, 349, 350, 351, 476, 352, 353, 0, 354,
	355, 356, 357, 358, 0, 360, 361, 362, 359, 363,
	364, 365, 366, 0, 367, 0, 368, 369, 370, 371,
	477, 372, 0, 373, 377, 378, 379, 380, 381, 382,
	383, 0, 390, 391, 384, 386, 387, 388, 385, 389,
	392, 393, 0, 394, 374, 375, 395, 0, 396, 478,
	397, 398, 0, 408, 399, 400, 401, 376, 402, 406,
	407, 403, 404, 405, 479, 0, 410, 411, 409, 0,
	412, 413, 414, 415, 416, 262, 417, 263, 418, 0,
	480, 481, 482, 419, 0, 0, 420, 421, 483, 422,
	484, 0, 423, 424, 425, 0, 426, 427, 0, 0,
	428, 429, 430, 431, 433, 0, 434, 0, 432, 435,
	436, 437, 485, 486, 487, 204, 439, 438, 488, 0,
	0, 0, 0, 440, 441, 489, 442, 443, 444, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 445, 0, 0, 0, 0, 213, 214,
	215, 446, 447, 216, 448, 217, 218, 449, 0, 219,
	220, 221, 222, 223, 224, 0, 0, 225, 450, 451,
	452, 0, 226, 453, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 0, 240, 241, 0, 0, 0,
	0, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	454, 455, 0, 248, 0, 250, 249, 0, 251, 0,
	0, 252, 253, 254, 0, 255, 0, 256, 257, 0,
	456, 258, 259, 261, 264, 260, 265, 266, 267, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 459, 271, 272, 0, 273, 0, 274, 0, 0,
	0, 275, 276, 0, 277, 460, 0, 461, 278, 0,
	279, 280, 281, 282, 283, 284, 285, 2230, 463, 464,
	0, 0, 468, 287, 0, 0, 0, 0, 286, 288,
	295, 0, 0, 289, 465, 291, 290, 292, 293, 294,
	466, 0, 467, 0, 296, 0, 0, 297, 298, 299,
	0, 300, 301, 0, 0, 302, 303, 304, 305, 0,
	307, 306, 0, 308, 469, 0, 309, 310, 0, 0,
	311, 312, 0, 0, 313, 0, 314, 315, 0, 0,
	316, 317, 319, 320, 318, 0, 321, 322, 324, 323,
	0, 0, 0, 0, 470, 471, 325, 326, 0, 327,
	328, 329, 0, 0, 331, 332, 0, 0, 333, 472,
	0, 334, 0, 473, 335, 330, 336, 337, 338, 339,
	340, 341, 0, 342, 474, 343, 475, 344, 0, 345,
	0, 346, 347, 348, 349, 350, 351, 476, 352, 353,
	0, 354, 355, 356, 357, 358, 0, 360, 361, 362,
	359, 363, 364, 365, 366, 0, 367, 0, 368, 369,
	370, 371, 477, 372, 0, 373, 377, 378, 379, 380,
	381, 382, 383, 0, 390, 391, 384, 386, 387, 388,
	385, 389, 392, 393, 0, 394, 374, 375, 395, 0,
	396, 478, 397, 398, 0, 408, 399, 400, 401, 376,
	402, 406, 407, 403, 404, 405, 479, 0, 410, 411,
	409, 0, 412, 413, 414, 415, 416, 262, 417, 263,
	418, 0, 480, 481, 482, 419, 0, 0, 420, 421,
	483, 422, 484, 0, 423, 424, 425, 0, 426, 427,
	0, 0, 428, 429, 430, 431, 433, 0, 434, 0,
	432, 435, 436, 437, 485, 486, 487, 204, 439, 438,
	488, 0, 0, 0, 0, 440, 441, 489, 442, 443,
	444, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 445, 0, 0, 0, 0,
	213, 214, 215, 446, 447, 216, 448, 217, 218, 449,
	0, 219, 220, 221, 222, 223, 224, 0, 0, 225,
	450, 451, 452, 0, 226, 453, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 0, 240, 241, 0,
	0, 0, 0, 0, 0, 0, 242, 243, 244, 245,
	246, 247, 454, 455, 0, 248, 0, 250, 249, 0,
	251, 0, 0, 252, 253, 254, 0, 255, 0, 256,
	257, 0, 456, 258, 259, 261, 264, 260, 265, 266,
	267, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 459, 271, 272, 0, 273, 0, 274,
	0, 0, 0, 275, 276, 0, 277, 460, 0, 461,
	278, 0, 279, 280, 281, 282, 283, 284, 285, 462,
	463, 464, 0, 0, 468, 287, 0, 0, 0, 0,
	286, 288, 295, 0, 0, 289, 465, 291, 290, 292,
	293, 294, 466, 0, 467, 0, 296, 0, 0, 297,
	298, 299, 0, 300, 301, 0, 0, 302, 303, 304,
	305, 0, 307, 306, 0, 308, 469, 0, 309, 310,
	0, 0, 311, 312, 0, 0, 313, 0, 314, 315,
	0, 0, 316, 317, 319, 320, 318, 0, 321, 322,
	324, 323, 0, 0, 0, 0, 470, 471, 325, 326,
	0, 327, 328, 329, 0, 0, 331, 332, 0, 0,
	333, 472, 0, 334, 0, 473, 335, 330, 336, 337,
	338, 339, 340, 341, 0, 342, 474, 343, 475, 344,
	0, 345, 0, 346, 347, 348, 349, 350, 351, 476,
	352, 353, 0, 354, 355, 356, 357, 358, 0, 360,
	361, 362, 359, 363, 364, 365, 366, 0, 367, 0,
	368, 369, 370, 371, 477, 372, 0, 373, 525, 378,
	379, 380, 381, 382, 383, 0, 390, 391, 384, 386,
	387, 388, 385, 389, 392, 393, 0, 394, 374, 375,
	395, 0, 396, 478, 397, 398, 0, 408, 399, 400,
	401, 376, 402, 406, 407, 403, 404, 405, 479, 0,
	410, 411, 409, 0, 412, 413, 414, 415, 416, 262,
	417, 263, 418, 0, 480, 481, 482, 419, 0, 0,
	420, 421, 483, 422, 484, 0, 423, 424, 425, 0,
	426, 427, 0, 0, 428, 429, 430, 431, 433, 0,
	434, 0, 432, 435, 436, 437, 485, 486, 487, 204,
	439, 438, 488, 0, 0, 0, 0, 440, 441, 489,
	442, 443, 444, 0, 0, 0, 207, 208, 209, 210,
	211, 0, 212, 0, 0, 0, 0, 445, 0, 1773,
	0, 0, 213, 214, 215, 446, 447, 216, 448, 217,
	218, 449, 0, 219, 220, 221, 222, 223, 224, 0,
	0, 225, 450, 451, 452, 0, 226, 453, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 233, 234, 235,
	232, 0, 236, 0, 237, 238, 239, 0, 0, 240,
	241, 0, 0, 0, 0, 0, 0, 0, 242, 243,
	244, 245, 246, 247, 454, 455, 0, 248, 0, 250,
	249, 0, 251, 0, 0, 252, 253, 254, 0, 255,
	0, 256, 257, 0, 456, 258, 259, 261, 264, 260,
	265, 266, 267, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 459, 271, 272, 0, 273,
	0, 274, 0, 0, 0, 275, 276, 0, 277, 460,
	0, 461, 278, 0, 279, 280, 281, 282, 283, 284,
	285, 462, 463, 464, 0, 0, 468, 287, 0, 0,
	0, 0, 286, 288, 295, 0, 0, 289, 465, 291,
	290, 292, 293, 294, 466, 0, 467, 0, 296, 0,
	0, 297, 298, 299, 0, 300, 301, 0, 0, 302,
	303, 304, 305, 0, 307, 306, 0, 308, 469, 0,
	309, 310, 0, 0, 311, 312, 0, 0, 313, 0,
	314, 315, 0, 0, 316, 317, 319, 320, 318, 0,
	321, 322, 324, 323, 0, 0, 0, 0, 470, 471,
	325, 326, 0, 327, 328, 329, 0, 0, 331, 332,
	0, 0, 333, 472, 0, 334, 0, 473, 335, 330,
	336, 337, 338, 339, 340, 341, 0, 342, 474, 343,
	475, 344, 0, 345, 0, 346, 347, 348, 349, 350,
	351, 476, 352, 353, 0, 354, 355, 356, 357, 358,
	0, 360, 361, 362, 359, 363, 364, 365, 366, 0,
	367, 0, 368, 369, 370, 371, 477, 372, 0, 373,
	377, 378, 379, 380, 381, 382, 383, 0, 390, 391,
	384, 386, 387, 388, 385, 389, 392, 393, 0, 0,
	374, 375, 395, 0, 396, 478, 397, 398, 0, 408,
	399, 400, 401, 376, 402, 406, 407, 403, 404, 405,
	479, 0, 410, 411, 409, 0, 412, 413, 414, 415,
	416, 262, 417, 263, 418, 0, 480, 481, 482, 419,
	0, 0, 420, 421, 483, 422, 484, 0, 423, 424,
	425, 0, 426, 427, 0, 0, 428, 429, 430, 431,
	433, 0, 434, 0, 432, 435, 436, 437, 485, 486,
	487, 204, 439, 438, 488, 0, 0, 0, 0, 440,
	441, 489, 442, 443, 444, 0, 0, 0, 207, 208,
	209, 210, 211, 0, 212, 0, 0, 0, 0, 445,
	0, 0, 0, 0, 213, 214, 215, 446, 447, 216,
	448, 217, 218, 449, 0, 219, 220, 221, 222, 223,
	224, 0, 0, 225, 450, 451, 452, 0, 226, 453,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 233,
	234, 235, 232, 0, 236, 0, 237, 238, 239, 0,
	0, 240, 241, 0, 0, 0, 0, 0, 0, 0,
	242, 243, 244, 245, 246, 247, 454, 455, 0, 248,
	0, 250, 249, 0, 251, 0, 0, 252, 253, 254,
	0, 255, 0, 256, 257, 0, 456, 258, 259, 261,
	264, 260, 265, 266, 267, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 459, 271, 272,
	0, 273, 0, 274, 0, 0, 0, 275, 276, 0,
	277, 460, 0, 461, 278, 0, 279, 280, 281, 282,
	283, 284, 285, 1235, 463, 464, 0, 0, 468, 287,
	0, 0, 0, 0, 286, 288, 295, 0, 0, 289,
	465, 291, 290, 292, 293, 294, 466, 0, 467, 0,
	296, 0, 0, 297, 298, 299, 0, 300, 301, 0,
	0, 302, 303, 304, 305, 0, 307, 306, 0, 308,
	469, 0, 309, 310, 0, 0, 311, 312, 0, 0,
	313, 0, 314, 315, 0, 0, 316, 317, 319, 320,
	318, 0, 321, 322, 324, 323, 0, 0, 0, 0,
	470, 471, 325, 326, 0, 327, 328, 329, 0, 0,
	331, 332, 0, 0, 333, 472, 0, 334, 0, 473,
	335, 330, 336, 337, 338, 339, 340, 341, 0, 342,
	474, 343, 475, 344, 0, 345, 0, 346, 347, 348,
	349, 350, 351, 476, 352, 353, 0, 354, 355, 356,
	357, 358, 0, 360, 361, 362, 359, 363, 364, 365,
	366, 0, 367, 0, 368, 369, 370, 371, 477, 372,
	0, 373, 377, 378, 379, 380, 381, 382, 383, 0,
	390, 391, 384, 386, 387, 388, 385, 389, 392, 393,
	0, 394, 374, 375, 395, 0, 396, 478, 397, 398,
	0, 408, 399, 400, 401, 376, 402, 406, 407, 403,
	404, 405, 479, 0, 410, 411, 409, 0, 412, 413,
	414, 415, 416, 262, 417, 263, 418, 0, 480, 481,
	482, 419, 0, 0, 420, 421, 483, 422, 484, 0,
	423, 424, 425, 0, 426, 427, 0, 0, 428, 429,
	430, 431, 433, 0, 434, 0, 432, 435, 436, 437,
	485, 486, 487, 204, 439, 438, 488, 0, 0, 0,
	0, 440, 441, 489, 442, 443, 444, 0, 0, 0,
	207, 208, 209, 210, 211, 0, 212, 0, 0, 0,
	0, 445, 0, 0, 0, 0, 213, 214, 215, 446,
	447, 216, 448, 217, 218, 449, 0, 219, 220, 221,
	222, 223, 224, 0, 0, 225, 450, 451, 452, 0,
	226, 453, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 233, 234, 235, 232, 0, 236, 0, 237, 238,
	239, 0, 0, 240, 241, 0, 0, 0, 0, 0,
	0, 0, 242, 243, 244, 245, 246, 247, 454, 455,
	0, 248, 0, 250, 249, 0, 251, 0, 0, 252,
	253, 254, 0, 255, 0, 256, 257, 0, 456, 258,
	259, 261, 264, 260, 265, 266, 267, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 459,
	271, 272, 0, 273, 0, 274, 0, 0, 0, 275,
	276, 0, 277, 460, 0, 461, 278, 0, 279, 280,
	281, 282, 283, 284, 285, 1177, 463, 464, 0, 0,
	468, 287, 0, 0, 0, 0, 286, 288, 295, 0,
	0, 289, 465, 291, 290, 292, 293, 294, 466, 0,
	467, 0, 296, 0, 0, 297, 298, 299, 0, 300,
	301, 0, 0, 302, 303, 304, 305, 0, 307, 306,
	0, 308, 469, 0, 309, 310, 0, 0, 311, 312,
	0, 0, 313, 0, 314, 315, 0, 0, 316, 317,
	319, 320, 318, 0, 321, 322, 324, 323, 0, 0,
	0, 0, 470, 471, 325, 326, 0, 327, 328, 329,
	0, 0, 331, 332, 0, 0, 333, 472, 0, 334,
	0, 473, 335, 330, 336, 337, 338, 339, 340, 341,
	0, 342, 474, 343, 475, 344, 0, 345, 0, 346,
	347, 348, 349, 350, 351, 476, 352, 353, 0, 354,
	355, 356, 357, 358, 0, 360, 361, 362, 359, 363,
	364, 365, 366, 0, 367, 0, 368, 369, 370, 371,
	477, 372, 0, 373, 377, 378, 379, 380, 381, 382,
	383, 0, 390, 391, 384, 386, 387, 388, 385, 389,
	392, 393, 0, 394, 374, 375, 395, 0, 396, 478,
	397, 398, 0, 408, 399, 400, 401, 376, 402, 406,
	407, 403, 404, 405, 479, 0, 410, 411, 409, 0,
	412, 413, 414, 415, 416, 262, 417, 263, 418, 0,
	480, 481, 482, 419, 0, 0, 420, 421, 483, 422,
	484, 0, 423, 424, 425, 0, 426, 427, 0, 0,
	428, 429, 430, 431, 433, 0, 434, 0, 432, 435,
	436, 437, 485, 486, 487, 204, 439, 438, 488, 0,
	0, 0, 0, 440, 441, 489, 442, 443, 444, 0,
	0, 0, 207, 208, 209, 210, 211, 0, 212, 0,
	0, 0, 0, 445, 0, 0, 0, 0, 213, 214,
	215, 446, 447, 216, 448, 217, 218, 449, 0, 219,
	220, 221, 222, 223, 224, 0, 0, 225, 450, 451,
	452, 0, 226, 453, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 233, 234, 235, 232, 0, 236, 0,
	237, 238, 239, 0, 0, 240, 241, 0, 0, 0,
	0, 0, 0, 0, 242, 243, 244, 245, 246, 247,
	454, 455, 0, 248, 0, 250, 249, 0, 251, 0,
	0, 252, 253, 254, 0, 255, 0, 256, 257, 0,
	456, 258, 259, 261, 264, 260, 265, 266, 267, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 459, 271, 272, 0, 273, 0, 274, 0, 0,
	0, 275, 276, 0, 277, 460, 0, 461, 278, 0,
	279, 280, 281, 282, 283, 284, 285, 462, 463, 464,
	0, 0, 468, 287, 0, 0, 0, 0, 286, 288,
	295, 0, 0, 289, 465, 291, 290, 292, 293, 294,
	466, 0, 467, 0, 296, 0, 0, 297, 298, 299,
	0, 300, 301, 0, 0, 302, 303, 304, 305, 0,
	307, 306, 0, 308, 469, 0, 309, 310, 0, 0,
	311, 312, 0, 0, 313, 0, 314, 315, 0, 0,
	316, 317, 319, 320, 318, 0, 321, 322, 324, 323,
	0, 0, 0, 0, 470, 471, 325, 326, 0, 327,
	328, 329, 0, 0, 331, 332, 0, 0, 333, 472,
	0, 334, 0, 473, 335, 330, 336, 337, 338, 339,
	340, 341, 0, 342, 474, 343, 475, 344, 0, 345,
	0, 346, 347, 348, 349, 350, 351, 476, 942, 353,
	0, 354, 355, 356, 357, 358, 0, 360, 361, 362,
	359, 363, 364, 365, 366, 0, 367, 0, 368, 369,
	370, 371, 477, 372, 0, 373, 377, 378, 379, 380,
	381, 382, 383, 0, 390, 391, 384, 386, 387, 388,
	385, 389, 392, 393, 0, 394, 374, 375, 395, 0,
	396, 478, 397, 398, 0, 408, 399, 400, 401, 376,
	402, 406, 407, 403, 404, 405, 479, 0, 410, 411,
	409, 0, 412, 413, 414, 415, 416, 262, 417, 263,
	418, 0, 480, 481, 482, 419, 0, 0, 420, 421,
	483, 422, 484, 0, 423, 424, 425, 0, 426, 427,
	0, 0, 428, 429, 430, 431, 433, 0, 434, 0,
	432, 435, 436, 437, 485, 486, 487, 204, 439, 438,
	488, 0, 0, 0, 0, 440, 441, 489, 442, 443,
	444, 0, 0, 0, 207, 208, 209, 210, 211, 0,
	212, 0, 0, 0, 0, 445, 0, 0, 0, 0,
	213, 214, 215, 446, 447, 216, 448, 217, 218, 449,
	0, 219, 220, 221, 222, 223, 224, 0, 0, 225,
	450, 451, 452, 0, 226, 453, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 233, 234, 235, 232, 0,
	236, 0, 237, 238, 239, 0, 0, 240, 241, 0,
	0, 0, 0, 0, 0, 0, 242, 243, 244, 245,
	246, 247, 454, 455, 0, 248, 0, 250, 249, 0,
	251, 0, 0, 252, 253, 254, 0, 255, 0, 256,
	257, 0, 456, 258, 259, 261, 264, 260, 265, 266,
	267, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 459, 271, 272, 0, 273, 0, 274,
	0, 0, 0, 275, 276, 0, 277, 460, 0, 461,
	0, 0, 279, 280, 281, 282, 283, 284, 285, 462,
	463, 464, 0, 0, 468, 287, 0, 0, 0, 0,
	286, 288, 295, 0, 0, 289, 465, 291, 290, 292,
	293, 294, 466, 0, 467, 0, 296, 0, 0, 297,
	298, 299, 0, 300, 301, 0, 0, 302, 303, 304,
	305, 0, 307, 306, 0, 308, 469, 0, 309, 310,
	0, 0, 311, 312, 0, 0, 313, 0, 314, 315,
	0, 0, 316, 317, 319, 320, 318, 0, 321, 322,
	324, 323, 0, 0, 0, 0, 470, 471, 325, 326,
	0, 327, 328, 329, 0, 0, 331, 332, 0, 0,
	333, 472, 0, 334, 0, 473, 335, 330, 336, 337,
	0, 339, 340, 341, 0, 342, 474, 343, 475, 344,
	0, 345, 0, 346, 347, 348, 0, 350, 351, 476,
	352, 353, 0, 354, 355, 356, 357, 358, 0, 360,
	361, 362, 359, 363, 364, 365, 366, 0, 367, 0,
	368, 369, 370, 371, 477, 0, 0, 373, 377, 378,
	379, 380, 381, 382, 383, 0, 390, 391, 384, 386,
	387, 388, 385, 389, 392, 393, 0, 394, 374, 375,
	395, 0, 396, 478, 397, 398, 0, 408, 399, 400,
	401, 376, 402, 406, 407, 403, 404, 405, 479, 0,
	410, 411, 409, 0, 412, 413, 414, 415, 416, 262,
	417, 263, 418, 0, 480, 481, 482, 419, 0, 0,
	420, 421, 483, 422, 484, 0, 423, 424, 425, 0,
	426, 427, 0, 0, 428, 429, 430, 431, 433, 0,
	434, 0, 432, 435, 436, 437, 485, 486, 487, 0,
	439, 438, 488, 0, 0, 0, 0, 440, 441, 489,
	442, 443, 444, 1388, 1389, 0, 1421, 1422, 1423, 1431,
	1432, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1424, 0, 0, 0, 0, 0, 0, 1391,
	0, 0, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1390, 0, 0, 0, 0,
	0, 0, 0, 1410, 0, 0, 0, 0, 0, 0,
	1407, 0, 0, 0, 0, 0, 0, 0, 1388, 1389,
	0, 1421, 1422, 1423, 1431, 1432, 1433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1424, 0, 0,
	0, 0, 0, 0, 1391, 0, 0, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1413, 1414, 1415, 1416, 0,
	1390, 0, 0, 0, 0, 1396, 0, 0, 1410, 0,
	0, 0, 0, 0, 0, 1407, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1428, 1438, 0, 0, 1418, 1419, 1420, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 1435, 0, 0,
	0, 0, 0, 0, 1405, 1406, 0, 0, 0, 0,
	1413, 1414, 1415, 1416, 0, 0, 0, 0, 0, 1426,
	1396, 0, 0, 0, 0, 0, 1411, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 0, 0, 1428, 1438, 0, 0,
	1418, 1419, 1420, 0, 0, 0, 0, 1425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 1435, 0, 0, 0, 0, 0, 0, 1405,
	1406, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1426, 0, 0, 1417, 0, 0,
	0, 1411, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1412, 0, 0, 1436, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	1429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1412, 0, 0, 0, 1388, 1389, 0, 1421, 1422, 1423,
	1431, 1432, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1424, 0, 1429, 0, 0, 0, 0,
	1391, 0, 1427, 1437, 0, 1402, 1403, 1409, 1408, 1404,
	1430, 0, 1401, 1399, 1400, 1392, 1393, 1394, 1395, 1397,
	1398, 0, 0, 0, 0, 1966, 1390, 0, 0, 1967,
	0, 0, 0, 0, 1410, 0, 0, 0, 0, 0,
	0, 1407, 0, 0, 0, 0, 0, 0, 0, 1388,
	1389, 0, 1421, 1422, 1423, 1431, 1432, 1433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1424, 0,
	0, 0, 0, 0, 0, 1391, 0, 1427, 1437, 0,
	1402, 1403, 1409, 1408, 1404, 1430, 0, 1401, 1399, 1400,
	1392, 1393, 1394, 1395, 1397, 1398, 1413, 1414, 1415, 1416,
	0, 1390, 0, 0, 2920, 0, 1396, 0, 0, 1410,
	0, 0, 0, 0, 0, 0, 1407, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1428, 1438, 0, 0, 1418, 1419, 1420, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 1435, 0,
	0, 0, 0, 0, 0, 1405, 1406, 0, 0, 0,
	0, 1413, 1414, 1415, 1416, 0, 0, 0, 0, 0,
	1426, 1396, 0, 0, 0, 0, 0, 1411, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 1428, 1438, 0,
	0, 1418, 1419, 1420, 0, 0, 0, 0, 1425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 1435, 0, 0, 0, 0, 0, 0,
	1405, 1406, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1426, 0, 0, 1417, 0,
	0, 0, 1411, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1412, 0, 0, 1436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1425, 0, 0, 0, 0, 0, 0,
	0, 1429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1412, 0, 0, 0, 1388, 1389, 0, 1421, 1422,
	1423, 1431, 1432, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1424, 0, 1429, 0, 0, 0,
	0, 1391, 0, 1427, 1437, 0, 1402, 1403, 1409, 1408,
	1404, 1430, 0, 1401, 1399, 1400, 1392, 1393, 1394, 1395,
	1397, 1398, 0, 0, 0, 0, 0, 1390, 0, 0,
	2672, 0, 0, 0, 0, 1410, 0, 0, 0, 0,
	0, 0, 1407, 0, 0, 0, 0, 0, 0, 0,
	1388, 1389, 0, 1421, 1422, 1423, 1431, 1432, 1433, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1424,
	0, 0, 0, 0, 0, 0, 1391, 0, 1427, 1437,
	0, 1402, 1403, 1409, 1408, 1404, 1430, 0, 1401, 1399,
	1400, 1392, 1393, 1394, 1395, 1397, 1398, 1413, 1414, 1415,
	1416, 0, 1390, 0, 0, 2389, 0, 1396, 0, 0,
	1410, 0, 0, 0, 0, 0, 0, 1407, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1428, 1438, 0, 0, 1418, 1419, 1420,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 1435,
	0, 0, 0, 0, 0, 0, 1405, 1406, 0, 0,
	0, 0, 1413, 1414, 1415, 1416, 0, 0, 0, 0,
	0, 1426, 1396, 0, 0, 0, 0, 0, 1411, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 1428, 1438,
	0, 0, 1418, 1419, 1420, 0, 0, 0, 0, 1425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 1435, 0, 0, 0, 0, 0,
	0, 1405, 1406, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1426, 0, 0, 1417,
	0, 0, 0, 1411, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1412, 0, 0,
	1436, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1425, 0, 0, 0, 0, 0,
	0, 0, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1412, 0, 0, 0, 1388, 1389, 0, 1421,
	1422, 1423, 1431, 1432, 1433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1424, 0, 1429, 0, 0,
	0, 0, 1391, 0, 1427, 1437, 0, 1402, 1403, 1409,
	1408, 1404, 1430, 0, 1401, 1399, 1400, 1392, 1393, 1394,
	1395, 1397, 1398, 0, 0, 0, 0, 0, 1390, 0,
	0, 2388, 0, 0, 0, 0, 1410, 0, 0, 0,
	0, 0, 0, 1407, 0, 0, 0, 0, 0, 0,
	0, 1388, 1389, 0, 1421, 1422, 1423, 1431, 1432, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1424, 0, 0, 0, 0, 0, 0, 1391, 0, 1427,
	1437, 0, 1402, 1403, 1409, 1408, 1404, 1430, 0, 1401,
	1399, 1400, 1392, 1393, 1394, 1395, 1397, 1398, 1413, 1414,
	1415, 1416, 0, 1390, 0, 0, 2385, 0, 1396, 0,
	0, 1410, 0, 0, 0, 0, 0, 0, 1407, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1428, 1438, 0, 0, 1418, 1419,
	1420, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	1435, 0, 0, 0, 0, 0, 0, 1405, 1406, 0,
	0, 0, 0, 1413, 1414, 1415, 1416, 0, 0, 0,
	0, 0, 1426, 1396, 0, 0, 0, 0, 0, 1411,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 1428,
	1438, 0, 0, 1418, 1419, 1420, 0, 0, 0, 0,
	1425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 1435, 0, 0, 0, 0,
	0, 0, 1405, 1406, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1426, 0, 0,
	1417, 0, 0, 0, 1411, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1412, 0,
	0, 1436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1425, 0, 0, 0, 0,
	0, 0, 0, 1429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1412, 0, 0, 0, 1388, 1389, 0,
	1421, 1422, 1423, 1431, 1432, 1433, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1424, 0, 1429, 0,
	0, 0, 0, 1391, 0, 1427, 1437, 0, 1402, 1403,
	1409, 1408, 1404, 1430, 0, 1401, 1399, 1400, 1392, 1393,
	1394, 1395, 1397, 1398, 0, 0, 0, 0, 0, 1390,
	0, 0, 2384, 0, 0, 0, 0, 1410, 0, 0,
	0, 0, 0, 0, 1407, 0, 0, 0, 0, 0,
	0, 0, 1388, 1389, 0, 1421, 1422, 1423, 1431, 1432,
	1433, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1424, 0, 0, 0, 0, 0, 0, 1391, 0,
	1427, 1437, 0, 1402, 1403, 1409, 1408, 1404, 1430, 0,
	1401, 1399, 1400, 1392, 1393, 1394, 1395, 1397, 1398, 1413,
	1414, 1415, 1416, 0, 1390, 0, 0, 2383, 0, 1396,
	0, 0, 1410, 0, 0, 0, 0, 0, 0, 1407,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1428, 1438, 0, 0, 1418,
	1419, 1420, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 1435, 0, 0, 0, 0, 0, 0, 1405, 1406,
	0, 0, 0, 0, 1413, 1414, 1415, 1416, 0, 0,
	0, 0, 0, 1426, 1396, 0, 0, 0, 0, 0,
	1411, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	1428, 1438, 0, 0, 1418, 1419, 1420, 0, 0, 0,
	0, 1425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 1435, 0, 0, 0,
	0, 0, 0, 1405, 1406, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1426, 0,
	0, 1417, 0, 0, 0, 1411, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1412,
	0, 0, 1436, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1412, 0, 0, 0, 1388, 1389,
	0, 1421, 1422, 1423, 1431, 1432, 1433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1424, 0, 1429,
	0, 0, 0, 0, 1391, 0, 1427, 1437, 0, 1402,
	1403, 1409, 1408, 1404, 1430, 0, 1401, 1399, 1400, 1392,
	1393, 1394, 1395, 1397, 1398, 0, 0, 0, 0, 0,
	1390, 0, 0, 1967, 0, 0, 0, 0, 1410, 0,
	0, 0, 0, 0, 0, 1407, 0, 0, 0, 0,
	0, 0, 0, 1388, 1389, 0, 1421, 1422, 1423, 1431,
	1432, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1424, 0, 0, 0, 0, 0, 0, 1391,
	0, 1427, 1437, 0, 1402, 1403, 1409, 1408, 1404, 1430,
	0, 1401, 1399, 1400, 1392, 1393, 1394, 1395, 1397, 1398,
	1413, 1414, 1415, 1416, 3212, 1390, 0, 0, 0, 0,
	1396, 0, 0, 1410, 0, 0, 0, 0, 0, 0,
	1407, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1428, 1438, 0, 0,
	1418, 1419, 1420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 1435, 0, 0, 0, 0, 0, 0, 1405,
	1406, 0, 0, 0, 0, 1413, 1414, 1415, 1416, 0,
	0, 0, 0, 0, 1426, 1396, 0, 0, 0, 0,
	0, 1411, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 1428, 1438, 0, 0, 1418, 1419, 1420, 0, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 1435, 0, 0,
	0, 0, 0, 0, 1405, 1406, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1426,
	0, 0, 1417, 0, 0, 0, 1411, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1412, 0, 0, 1436, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1425, 0, 0,
	0, 0, 0, 0, 0, 1429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1417, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1412, 0, 0, 0, 1388,
	1389, 0, 1421, 1422, 1423, 1431, 1432, 1433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1424, 0,
	1429, 0, 0, 0, 0, 1391, 0, 1427, 1437, 0,
	1402, 1403, 1409, 1408, 1404, 1430, 0, 1401, 1399, 1400,
	1392, 1393, 1394, 1395, 1397, 1398, 0, 0, 0, 0,
	3208, 1390, 0, 0, 0, 0, 0, 0, 0, 1410,
	0, 0, 0, 0, 0, 0, 1407, 0, 0, 0,
	0, 0, 0, 0, 1388, 1389, 0, 1421, 1422, 1423,
	1431, 1432, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1424, 0, 0, 0, 0, 0, 0,
	1391, 0, 1427, 1437, 0, 1402, 1403, 1409, 1408, 1404,
	1430, 0, 1401, 1399, 1400, 1392, 1393, 1394, 1395, 1397,
	1398, 1413, 1414, 1415, 1416, 3143, 1390, 0, 0, 0,
	0, 1396, 0, 0, 1410, 0, 0, 0, 0, 0,
	0, 1407, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1428, 1438, 0,
	0, 1418, 1419, 1420, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 1435, 0, 0, 0, 0, 0, 0,
	1405, 1406, 0, 0, 0, 0, 1413, 1414, 1415, 1416,
	0, 0, 0, 0, 0, 1426, 1396, 0, 0, 0,
	0, 0, 1411, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 1428, 1438, 0, 0, 1418, 1419, 1420, 0,
	0, 0, 0, 1425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 1435, 0,
	0, 0, 0, 0, 0, 1405, 1406, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1426, 0, 0, 1417, 0, 0, 0, 1411, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1412, 0, 0, 1436, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1425, 0,
	0, 0, 0, 0, 0, 0, 1429, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1412, 0, 0, 0,
	1388, 1389, 0, 1421, 1422, 1423, 1431, 1432, 1433, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1424,
	0, 1429, 0, 0, 0, 0, 1391, 0, 1427, 1437,
	0, 1402, 1403, 1409, 1408, 1404, 1430, 0, 1401, 1399,
	1400, 1392, 1393, 1394, 1395, 1397, 1398, 0, 0, 0,
	0, 3142, 1390, 0, 0, 0, 0, 0, 0, 0,
	1410, 0, 0, 0, 0, 0, 0, 1407, 0, 0,
	0, 0, 0, 0, 0, 1388, 1389, 0, 1421, 1422,
	1423, 1431, 1432, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1424, 0, 0, 0, 0, 0,
	0, 1391, 0, 1427, 1437, 0, 1402, 1403, 1409, 1408,
	1404, 1430, 0, 1401, 1399, 1400, 1392, 1393, 1394, 1395,
	1397, 1398, 1413, 1414, 1415, 1416, 3051, 1390, 0, 0,
	0, 0, 1396, 0, 0, 1410, 0, 0, 0, 0,
	0, 0, 1407, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1428, 1438,
	0, 0, 1418, 1419, 1420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 1435, 0, 0, 0, 0, 0,
	0, 1405, 1406, 0, 0, 0, 0, 1413, 1414, 1415,
	1416, 0, 0, 0, 0, 0, 1426, 1396, 0, 0,
	0, 0, 0, 1411, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 0, 0, 1428, 1438, 0, 0, 1418, 1419, 1420,
	0, 0, 0, 0, 1425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 1435,
	0, 0, 0, 0, 0, 0, 1405, 1406, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1426, 0, 0, 1417, 0, 0, 0, 1411, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1412, 0, 0, 1436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1425,
	0, 0, 0, 0, 0, 0, 0, 1429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1412, 0, 0,
	0, 1388, 1389, 0, 1421, 1422, 1423, 1431, 1432, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1424, 0, 1429, 0, 0, 0, 0, 1391, 0, 1427,
	1437, 0, 1402, 1403, 1409, 1408, 1404, 1430, 0, 1401,
	1399, 1400, 1392, 1393, 1394, 1395, 1397, 1398, 0, 0,
	0, 0, 2969, 1390, 0, 0, 0, 0, 0, 0,
	0, 1410, 0, 0, 0, 0, 0, 0, 1407, 0,
	0, 0, 0, 0, 0, 0, 1388, 1389, 0, 1421,
	1422, 1423, 1431, 1432, 1433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1424, 0, 0, 0, 0,
	0, 0, 1391, 0, 1427, 1437, 0, 1402, 1403, 1409,
	1408, 1404, 1430, 0, 1401, 1399, 1400, 1392, 1393, 1394,
	1395, 1397, 1398, 1413, 1414, 1415, 1416, 2925, 1390, 0,
	0, 0, 0, 1396, 0, 0, 1410, 0, 0, 0,
	0, 0, 0, 1407, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1428,
	1438, 0, 0, 1418, 1419, 1420, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 1435, 0, 0, 0, 0,
	0, 0, 1405, 1406, 0, 0, 0, 0, 1413, 1414,
	1415, 1416, 0, 0, 0, 0, 0, 1426, 1396, 0,
	0, 0, 0, 0, 1411, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 1428, 1438, 0, 0, 1418, 1419,
	1420, 0, 0, 0, 0, 1425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	1435, 0, 0, 0, 0, 0, 0, 1405, 1406, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1426, 0, 0, 1417, 0, 0, 0, 1411,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1412, 0, 0, 1436, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1425, 0, 0, 0, 0, 0, 0, 0, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1417, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1412, 0,
	0, 0, 1388, 1389, 0, 1421, 1422, 1423, 1431, 1432,
	1433, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1424, 0, 1429, 0, 0, 0, 0, 1391, 0,
	1427, 1437, 0, 1402, 1403, 1409, 1408, 1404, 1430, 0,
	1401, 1399, 1400, 1392, 1393, 1394, 1395, 1397, 1398, 0,
	0, 0, 0, 2924, 1390, 0, 0, 0, 0, 0,
	0, 0, 1410, 0, 0, 0, 0, 0, 0, 1407,
	0, 0, 0, 0, 0, 0, 0, 1388, 1389, 0,
	1421, 1422, 1423, 1431, 1432, 1433, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1424, 0, 0, 0,
	0, 0, 0, 1391, 0, 1427, 1437, 0, 1402, 1403,
	1409, 1408, 1404, 1430, 0, 1401, 1399, 1400, 1392, 1393,
	1394, 1395, 1397, 1398, 1413, 1414, 1415, 1416, 2923, 1390,
	0, 0, 0, 0, 1396, 0, 0, 1410, 0, 0,
	0, 0, 0, 0, 1407, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1428, 1438, 0, 0, 1418, 1419, 1420, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 1435, 0, 0, 0,
	0, 0, 0, 1405, 1406, 0, 0, 0, 0, 1413,
	1414, 1415, 1416, 0, 0, 0, 0, 0, 1426, 1396,
	0, 0, 0, 0, 0, 1411, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 1428, 1438, 0, 0, 1418,
	1419, 1420, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 1435, 0, 0, 0, 0, 0, 0, 1405, 1406,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1426, 0, 0, 1417, 0, 0, 0,
	1411, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1412, 0, 0, 1436, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1425, 0, 0, 0, 0, 0, 0, 0, 1429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1417, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1412,
	0, 0, 0, 1388, 1389, 0, 1421, 1422, 1423, 1431,
	1432, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1424, 0, 1429, 0, 0, 0, 0, 1391,
	0, 1427, 1437, 0, 1402, 1403, 1409, 1408, 1404, 1430,
	0, 1401, 1399, 1400, 1392, 1393, 1394, 1395, 1397, 1398,
	0, 0, 0, 0, 2889, 1390, 0, 0, 0, 0,
	0, 0, 0, 1410, 0, 0, 0, 0, 0, 0,
	1407, 0, 0, 0, 0, 0, 0, 0, 1388, 1389,
	0, 1421, 1422, 1423, 1431, 1432, 1433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1424, 0, 0,
	0, 0, 0, 0, 1391, 0, 1427, 1437, 0, 1402,
	1403, 1409, 1408, 1404, 1430, 0, 1401, 1399, 1400, 1392,
	1393, 1394, 1395, 1397, 1398, 1413, 1414, 1415, 1416, 2705,
	1390, 0, 0, 0, 0, 1396, 0, 0, 1410, 0,
	0, 0, 0, 0, 0, 1407, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1428, 1438, 0, 0, 1418, 1419, 1420, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 1435, 0, 0,
	0, 0, 0, 0, 1405, 1406, 0, 0, 0, 0,
	1413, 1414, 1415, 1416, 0, 0, 0, 0, 0, 1426,
	1396, 3298, 0, 0, 0, 0, 1411, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 0, 0, 1428, 1438, 0, 0,
	1418, 1419, 1420, 0, 0, 0, 0, 1425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 1435, 0, 0, 0, 0, 0, 0, 1405,
	1406, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1426, 0, 0, 1417, 0, 0,
	0, 1411, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1412, 0, 0, 1436, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	1429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1412, 0, 0, 0, 1388, 1389, 0, 1421, 1422, 1423,
	1431, 1432, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1424, 0, 1429, 0, 0, 2313, 0,
	1391, 0, 1427, 1437, 0, 1402, 1403, 1409, 1408, 1404,
	1430, 0, 1401, 1399, 1400, 1392, 1393, 1394, 1395, 1397,
	1398, 0, 0, 2342, 0, 0, 1390, 0, 0, 0,
	0, 0, 0, 0, 1410, 0, 0, 0, 0, 0,
	0, 1407, 0, 0, 0, 0, 0, 0, 0, 1388,
	1389, 0, 1421, 1422, 1423, 1431, 1432, 1433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1424, 2314,
	0, 0, 0, 0, 0, 1391, 0, 1427, 1437, 0,
	1402, 1403, 1409, 1408, 1404, 1430, 0, 1401, 1399, 1400,
	1392, 1393, 1394, 1395, 1397, 1398, 1413, 1414, 1415, 1416,
	0, 1390, 0, 0, 0, 0, 1396, 0, 0, 1410,
	0, 0, 0, 0, 0, 0, 1407, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1428, 1438, 0, 0, 1418, 1419, 1420, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 1435, 0,
	0, 0, 0, 0, 0, 1405, 1406, 0, 0, 0,
	0, 1413, 1414, 1415, 1416, 0, 0, 0, 0, 0,
	1426, 1396, 0, 2430, 0, 0, 2429, 1411, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 1428, 1438, 0,
	0, 1418, 1419, 1420, 0, 0, 0, 0, 1425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 1435, 0, 0, 0, 0, 0, 0,
	1405, 1406, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1426, 0, 0, 1417, 0,
	0, 0, 1411, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1412, 0, 0, 1436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1425, 0, 0, 0, 0, 0, 0,
	0, 1429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2055, 0,
	0, 1412, 0, 0, 0, 1388, 1389, 0, 1421, 1422,
	1423, 1431, 1432, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1424, 0, 1429, 0, 2054, 0,
	0, 1391, 0, 1427, 1437, 0, 1402, 1403, 1409, 1408,
	1404, 1430, 0, 1401, 1399, 1400, 1392, 1393, 1394, 1395,
	1397, 1398, 0, 0, 0, 0, 0, 1390, 0, 0,
	0, 0, 0, 0, 0, 1410, 0, 0, 0, 0,
	0, 0, 1407, 0, 0, 0, 0, 0, 0, 0,
	1388, 1389, 0, 1421, 1422, 1423, 1431, 1432, 1433, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1424,
	0, 0, 0, 0, 0, 0, 1391, 0, 1427, 1437,
	0, 1402, 1403, 1409, 1408, 1404, 1430, 0, 1401, 1399,
	1400, 1392, 1393, 1394, 1395, 1397, 1398, 1413, 1414, 1415,
	1416, 0, 1390, 0, 0, 0, 0, 1396, 0, 0,
	1410, 0, 0, 0, 0, 0, 0, 1407, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1428, 1438, 0, 0, 1418, 1419, 1420,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 1435,
	0, 0, 0, 0, 0, 0, 1405, 1406, 0, 0,
	0, 0, 1413, 1414, 1415, 1416, 0, 0, 0, 0,
	0, 1426, 1396, 0, 0, 0, 0, 0, 1411, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 1428, 1438,
	0, 0, 1418, 1419, 1420, 0, 0, 0, 0, 1425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 1435, 0, 0, 0, 0, 0,
	0, 1405, 1406, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1426, 0, 0, 1417,
	0, 0, 0, 1411, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1412, 0, 0,
	1436, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1425, 786, 0, 0, 0, 0,
	0, 0, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1412, 0, 0, 0, 1388, 1389, 0, 1421,
	1422, 1423, 1431, 1432, 1433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1424, 0, 1429, 0, 0,
	0, 0, 1391, 0, 1427, 1437, 0, 1402, 1403, 1409,
	1408, 1404, 1430, 0, 1401, 1399, 1400, 1392, 1393, 1394,
	1395, 1397, 1398, 0, 0, 0, 0, 0, 1390, 0,
	0, 0, 0, 0, 0, 0, 1410, 0, 0, 0,
	0, 0, 0, 1407, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1427,
	0, 0, 1402, 1403, 1409, 1408, 1404, 1430, 0, 1401,
	1399, 1400, 1392, 1393, 1394, 1395, 1397, 1398, 1413, 1414,
	1415, 1416, 0, 0, 0, 0, 0, 0, 1396, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1388, 1389, 0, 1421, 1422, 1423,
	1431, 1432, 1433, 0, 1428, 1438, 0, 0, 1418, 1419,
	1420, 0, 0, 1424, 0, 0, 0, 0, 0, 0,
	1391, 0, 0, 1437, 0, 0, 0, 0, 0, 1434,
	1435, 0, 0, 0, 0, 0, 0, 1405, 1406, 0,
	0, 0, 0, 0, 0, 0, 1390, 0, 0, 0,
	0, 0, 1426, 0, 1410, 0, 0, 0, 0, 1411,
	0, 1407, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1413, 1414, 1415, 1416,
	0, 0, 0, 0, 0, 0, 1396, 0, 0, 0,
	1417, 2436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1412, 0,
	0, 0, 1428, 1438, 0, 0, 1418, 1419, 1420, 0,
	0, 1388, 1389, 0, 1421, 1422, 1423, 1431, 1432, 1433,
	0, 0, 0, 1429, 0, 0, 0, 1434, 1435, 0,
	1424, 0, 0, 0, 2431, 1405, 1406, 1391, 0, 0,
	1437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1426, 0, 0, 0, 0, 2695, 0, 1411, 0, 0,
	0, 0, 0, 1390, 0, 0, 0, 0, 0, 0,
	0, 1410, 0, 0, 1436, 0, 0, 0, 1407, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1427, 0, 0, 1402, 1403,
	1409, 1408, 1404, 1430, 0, 1401, 1399, 1400, 1392, 1393,
	1394, 1395, 1397, 1398, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 1413, 1414, 1415, 1416, 0, 0, 0,
	0, 0, 0, 1396, 0, 0, 1412, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1388, 1389,
	0, 1421, 1422, 1423, 1431, 1432, 1433, 0, 0, 1428,
	1438, 1429, 0, 1418, 1419, 1420, 0, 1424, 0, 0,
	0, 0, 0, 0, 1391, 0, 0, 1437, 0, 0,
	0, 0, 0, 0, 1434, 1435, 0, 0, 0, 0,
	0, 0, 1405, 1406, 0, 0, 0, 0, 0, 0,
	1390, 0, 0, 0, 0, 0, 0, 1426, 1410, 0,
	0, 0, 0, 0, 1411, 1407, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1427, 0, 1425, 1402, 1403, 1409, 1408,
	1404, 1430, 0, 1401, 1399, 1400, 1392, 1393, 1394, 1395,
	1397, 1398, 0, 0, 0, 0, 0, 0, 0, 0,
	1413, 1414, 1415, 1416, 0, 0, 0, 0, 0, 0,
	1396, 0, 0, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1412, 0, 0, 1428, 1438, 0, 0,
	1418, 1419, 1420, 0, 0, 1388, 1389, 0, 1421, 1422,
	1423, 1431, 1432, 1433, 0, 0, 0, 0, 1429, 0,
	0, 1434, 1435, 0, 1424, 0, 0, 0, 2382, 1405,
	1406, 1391, 0, 0, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1426, 0, 0, 0, 0, 0,
	0, 1411, 0, 0, 0, 0, 0, 1390, 0, 0,
	0, 0, 0, 0, 0, 1410, 0, 0, 1436, 0,
	0, 0, 1407, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2398, 0,
	1427, 0, 0, 1402, 1403, 1409, 1408, 1404, 1430, 0,
	1401, 1399, 1400, 1392, 1393, 1394, 1395, 1397, 1398, 0,
	0, 0, 1417, 0, 0, 0, 0, 1413, 1414, 1415,
	1416, 0, 0, 0, 0, 0, 0, 1396, 0, 0,
	1412, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1388, 1389, 0, 1421, 1422, 1423, 1431, 1432,
	1433, 0, 0, 1428, 1438, 1429, 0, 1418, 1419, 1420,
	0, 1424, 0, 0, 0, 0, 0, 0, 1391, 0,
	0, 1437, 0, 0, 0, 0, 0, 0, 1434, 1435,
	0, 0, 0, 0, 0, 0, 1405, 1406, 0, 0,
	0, 0, 0, 0, 1390, 0, 0, 0, 0, 0,
	0, 1426, 1410, 0, 0, 0, 0, 0, 1411, 1407,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1427, 0, 1425,
	1402, 1403, 1409, 1408, 1404, 1430, 0, 1401, 1399, 1400,
	1392, 1393, 1394, 1395, 1397, 1398, 0, 0, 0, 0,
	0, 0, 0, 0, 1413, 1414, 1415, 1416, 0, 0,
	0, 0, 0, 0, 1396, 0, 0, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1412, 0, 0,
	1428, 1438, 0, 0, 1418, 1419, 1420, 0, 0, 1388,
	1389, 0, 1421, 1422, 1423, 1431, 1432, 1433, 0, 0,
	0, 0, 1429, 0, 0, 1434, 1435, 0, 1424, 0,
	0, 0, 0, 1405, 1406, 1391, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1426, 0,
	0, 0, 0, 0, 0, 1411, 0, 0, 0, 0,
	0, 1390, 0, 0, 0, 0, 0, 0, 0, 1410,
	0, 0, 1436, 0, 0, 0, 1407, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1427, 0, 0, 1402, 1403, 1409,
	1408, 1404, 1430, 0, 1401, 1399, 1400, 1392, 1393, 1394,
	1395, 1397, 1398, 0, 0, 0, 1417, 0, 0, 0,
	0, 1413, 1414, 1415, 1416, 0, 0, 0, 0, 0,
	0, 1396, 0, 0, 1412, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1388, 1389, 0, 1421, 1422, 1423,
	1431, 1432, 1433, 0, 0, 0, 0, 1428, 1438, 1429,
	0, 1418, 1419, 1420, 0, 0, 0, 0, 0, 0,
	1391, 0, 0, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 1435, 0, 0, 0, 0, 0, 0,
	1405, 1406, 0, 0, 0, 0, 1390, 0, 0, 0,
	0, 0, 0, 0, 1410, 1426, 0, 0, 0, 0,
	0, 1407, 1411, 0, 0, 0, 0, 582, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 1427, 0, 0, 1402, 1403, 1409, 1408, 1404, 1430,
	0, 1401, 1399, 1400, 1392, 1393, 1394, 1395, 1397, 1398,
	0, 0, 0, 0, 0, 0, 1413, 1414, 1415, 1416,
	584, 603, 0, 0, 0, 0, 1396, 0, 0, 0,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	0, 585, 0, 0, 586, 0, 0, 0, 0, 0,
	0, 1412, 1428, 1438, 0, 0, 1418, 1419, 1420, 696,
	609, 727, 0, 0, 0, 0, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 1429, 1434, 1435, 0,
	0, 0, 0, 703, 0, 1405, 1406, 0, 0, 0,
	0, 0, 588, 0, 0, 701, 0, 0, 0, 0,
	1426, 0, 0, 0, 0, 0, 0, 1411, 0, 0,
	0, 0, 589, 0, 0, 590, 613, 0, 702, 0,
	616, 0, 0, 704, 1436, 0, 0, 732, 0, 0,
	0, 0, 0, 710, 711, 0, 0, 0, 0, 721,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 728, 705, 0, 0, 0, 0, 1427, 0,
	0, 1402, 1403, 1409, 1408, 1404, 1430, 0, 1401, 1399,
	1400, 1392, 1393, 1394, 1395, 1397, 1398, 0, 1417, 726,
	0, 0, 0, 0, 0, 612, 0, 0, 0, 0,
	0, 593, 0, 0, 0, 0, 1412, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	706, 0, 0, 0, 0, 0, 0, 700, 0, 0,
	591, 1429, 0, 0, 0, 0, 0, 0, 0, 594,
	0, 0, 0, 707, 708, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 595, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 714, 0, 0, 0, 0,
	0, 0, 709, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 615, 0, 0, 0, 0, 713, 0, 0,
	0, 0, 596, 0, 0, 0, 0, 0, 0, 0,
	729, 0, 0, 0, 0, 597, 0, 0, 0, 0,
	0, 0, 0, 1427, 0, 0, 1402, 1403, 1409, 1408,
	1404, 1430, 602, 1401, 1399, 1400, 1392, 1393, 1394, 1395,
	1397, 1398, 0, 0, 598, 0, 0, 611, 0, 610,
	0, 0, 0, 0, 599, 0, 0, 0, 712, 0,
	0, 0, 0, 0, 0, 600, 0, 0, 0, 0,
	606, 0, 0, 0, 0, 617, 0, 614, 0, 0,
	0, 604, 0, 0, 0, 723, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 718, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 698, 716,
	730, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 699, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 719, 0, 0, 0, 717, 0,
	0, 0, 733, 734, 0, 0, 0, 0, 731, 0,
	0, 0, 0, 0, 0, 720, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 722, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 724,
}
var sqlPact = [...]int{

	3926, -1000, -25, -1000, -1000, -1000, -1000, -1000, 156, 151,
	150, 149, 147, 146, 145, 142, 139, -1000, -1000, -1000,
	136, -1000, -1000, 131, -1000, -1000, 129, 127, 125, -1000,
	121, 118, -1000, -1000, -1000, -1000, 116, 103, 101, 54433,
	1500, 54031, 41015, 1713, 2008, 38165, 53623, 37757, 53215, 52807,
	99, -1000, 52399, 98, 96, 93, -1000, -1000, 90, 1205,
	35339, 86, 84, 83, 1822, 80, 79, -1000, 77, -1000,
	64985, 1109, -1000, 74, 73, -1000, 6349, 457, 40607, 1979,
	72, 71, 34930, 1962, -1000, -1000, 1111, -1000, -1000, 69,
	67, 65, 62, 59, 57, 56, 49, 47, -1000, 45,
	44, 42, 40, 38, 37, 35, 33, 32, 31, 30,
	29, 27, 26, 25, 23, -1000, 65077, 1345, 1240, 1232,
	1225, 1209, 1242, 753, 21, 19, 18, 16, 11, 7,
	-1000, -1000, 6, 5, 4, 2, -1000, 1, -5, 105,
	-6, -8, -9, -11, -13, 1998, 1944, 1141, 471, 15424,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	58051, 54433, -14, -134, -20, -1000, 2255, 695, 26288, 3926,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 362,
	-1000, -1000, -1000, 199, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1451, 557, -1000, -1000, -1000, 51991, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 54433, -1000, 1494, -106, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 554, -1000, 1487, 254, 1397,
	-1000, -1000, -1000, -1000, -1000, 54433, -1000, -1000, 2536, 2535,
	1401, 553, 51589, -1000, 1769, -1000, 697, 15855, -1000, 915,
	-1000, 15855, 197, -1000, -1000, -1000, -1000, -1000, 40199, 11531,
	39791, 39383, 33298, 51181, 11113, 50773, 926, -1000, -1000, -1000,
	-1000, -1000, -30, 36545, 54433, -1000, 184, -1000, -1000, -1000,
	-1000, -1000, -1000, 22474, 456, 22029, 451, 21584, 394, -1000,
	-1000, -1000, -1000, 2534, 2532, 833, 2531, 2190, 57649, 1291,
	2530, 1138, 910, 781, 2529, 2528, 2527, 2526, 2525, 2524,
	2523, 1082, 50365, 1965, 32880, 32462, 54433, 54433, 1786, 49957,
	-1000, -1000, 1011, 1010, -1000, -1000, -1000, -1000, 2096, 2005,
	2001, 49549, -1000, -1000, 2522, 2521, 2520, 2518, 2517, 57247,
	1283, 2515, 1719, 2514, 2513, 2512, 2510, 2509, 2508, 2505,
	2500, 2492, -1000, 49141, 48733, 48325, 47917, 47509, 32044, 31626,
	-1000, -1000, -1000, 27916, 5906, 47101, 28754, 54433, -1000, -1000,
	22905, 78, -1000, -1000, -1000, 1934, -1000, 22905, 78, -1000,
	1380, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1657, 1217,
	2392, 31208, 1662, 1043, 2089, 2491, 1669, 2076, 2068, 2066,
	2065, 2056, 2490, 1135, 2488, 1112, 2487, 2041, 2039, 2414,
	1394, 38975, 2486, 2485, 2219, 2038, 1932, -1000, -1000, -1000,
	-1000, 1098, -1000, -1000, -1000, 42627, -1000, -1000, 1351, -1000,
	-1000, 1351, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 921,
	56443, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1288, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1919, -1000, 1398, -1000, -1000,
	2484, 1944, 1654, 2238, 2238, 2238, 2282, 343, 328, -1000,
	105, -1000, -1000, 64591, -1000, -1000, 22905, 22905, 22905, 22905,
	22905, 1332, -1000, -1000, -1000, 548, 608, -1000, 544, 482,
	-1000, -1000, -1000, -1000, -1000, -1000, 537, 2409, -1000, 780,
	-1000, -1000, -1000, -1000, 2378, -1000, 13672, -1000, -1000, -1000,
	359, 536, 22905, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 183,
	709, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 473, 1282, 469, 469, 469,
	-1000, -1000, 772, -1000, -1000, -1000, 681, -1000, 674, -1000,
	-1000, -1000, 1963, 535, 534, -1000, 528, 513, 510, -1000,
	-1000, -1000, 509, 506, 505, 504, 503, 502, 500, 499,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 770, -1000,
	-1000, -1000, 498, 495, 494, 493, 492, 491, 490, 489,
	486, -31, 54433, -1000, 362, -31, -1000, -1000, 484, -1000,
	16717, 16717, 16717, -1000, -1000, 1449, 22905, -1000, 1835, -1000,
	776, -230, 670, 27100, -1000, 25457, 670, 615, 30786, -1000,
	1931, -1000, -1000, 483, 181, -1000, -1000, -1000, -1000, -1000,
	1928, 54433, 11947, 54433, 54433, -1000, -1000, 22905, -1000, -1000,
	33714, 36143, 54433, 38567, 2328, 7254, 36143, 54433, 1957, -1000,
	-1000, -1000, 54433, -1000, 22905, -1000, 2326, 1695, -39, -1000,
	-1000, -1000, -1000, -1000, 1673, 1751, 859, 1013, -1000, 15855,
	2182, -1000, -1000, -1000, 180, 11947, -1000, 1631, 2135, 990,
	-1000, 1516, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1208, 2130, -1000, 1491, 2128, 1174, -1000, -1000, 726, 2124,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1427,
	-1000, -1000, 2204, -1000, -1000, 1655, 2108, -189, 33714, 36545,
	-35, -1000, -1000, -44, -1000, 10695, 64591, -1000, -1000, -1000,
	64591, 664, -1000, -1000, 2101, -1000, 64591, 655, -1000, -1000,
	2093, -1000, -1000, -1000, 2483, -1000, 2482, 1613, 2481, 2480,
	2478, -1000, 1065, 1252, 2476, -1000, 2474, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 46693, 46285, 779, -1000, 1445, -1000,
	-1000, 45877, 720, 1611, -1000, -1000, 1610, -1000, 748, -1000,
	2472, 45475, 1837, 720, 1601, -1000, -1000, -1000, -1000, -1000,
	54433, -1000, 54433, -1000, 54433, -1000, 1081, -1000, 56845, -230,
	-1000, -1000, -1000, -1000, -1000, 2092, 2459, 2458, 2457, -1000,
	54433, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	153, 2090, -1000, -1000, 153, 2082, -1000, 153, 2072, -1000,
	152, 2064, -1000, -1000, 1442, 2055, -1000, -63, 2044, -1000,
	-1000, -63, 2036, -1000, -50, -1000, -1000, -1000, 695, -1000,
	27508, 45067, 33714, 711, 547, 64591, -1000, 33714, 64591, -1000,
	-1000, 44659, 44251, -1000, -1000, 1027, 1740, -1000, -1000, -1000,
	-1000, 33714, 33714, -1000, 43843, -1000, -1000, -1000, 1388, 2209,
	54433, -1000, -1000, 1956, -1000, 35741, 54433, -1000, 54433, -1000,
	54433, -1000, 54433, -1000, 54433, -1000, -1000, -1000, -1000, -1000,
	2088, 1247, 1234, -1000, 54433, -1000, 54433, -1000, -1000, -1000,
	1672, -1000, -1000, -1000, -1000, 54433, -1000, -1000, -1000, -1000,
	-1000, -1000, 1954, -1000, 1185, -1000, 1026, -1000, -1000, 155,
	-1000, -1000, -39, -1000, 56443, -1000, -1000, 1944, 1654, -1000,
	54433, -1000, -1000, -1000, 1944, 1455, 1765, 21139, 1728, 22905,
	105, -1000, -1000, 105, 105, 14979, -1000, -1000, 7254, 7254,
	11947, 993, 22905, 22905, 22905, 22905, 22905, 22905, 22905, 22905,
	22905, 22905, 22905, 22905, 22905, 22905, 22905, 22905, 22905, 22905,
	22905, 22905, 22905, 22905, 22905, 22905, 22905, 22905, 22905, 22905,
	22905, 22905, 22905, 22905, 22905, 22905, 22905, 1663, 22905, 920,
	22905, 22905, 22905, 22905, 1344, -1000, -1000, 1366, 387, 1391,
	-1000, 2379, 2379, 2379, 64903, 64903, 470, 2456, 608, -1000,
	22905, -1000, 78, 22905, 12365, -1000, 2399, 1023, -1000, -1000,
	328, 58862, 1592, -1000, 327, 12810, -1000, -1000, -1000, 13672,
	482, 20694, 22905, 766, 64591, 10279, 1973, 1878, -1000, 2398,
	-1000, -1000, 2378, -1000, -1000, -1000, 988, 977, 958, 957,
	480, 650, 640, 629, 624, 573, 22905, 22905, 22905, 22905,
	22905, 22905, 22905, 22905, -1000, 20263, 19818, 19373, 18928, 18483,
	24198, 18038, 22905, 14103, 54433, -31, 2323, 22905, 130, -1000,
	63434, -1000, 130, 130, 479, -52, 64591, 1749, 1745, 26694,
	1685, 1372, 1372, 1372, -1000, 477, 599, 670, 7766, 41417,
	1378, 670, 670, 175, 102, 324, 25051, 1835, 41417, -1000,
	-1000, 54433, 476, 12365, 11947, 1039, -53, 177, 1764, 1759,
	175, -1000, -58, 711, 909, -74, -1000, 4156, -60, -1000,
	980, -1000, -1000, -1000, -1000, 350, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 769, 475,
	474, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 473, 1282, 469, 469, 469, -1000, -1000,
	-1000, 681, -1000, 674, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1924, -44, 38567, 682, -61, 842, -39, -1000, 1351,
	-1000, 1222, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2405, -1000, 2388, -1000, -1000,
	2396, -34, -1000, -1000, 11947, -1000, -41, 1250, -1000, 37349,
	2247, 2242, 2197, 1064, -1000, 1045, 2277, 42627, 2298, 100,
	-1000, 1916, -1000, -1000, 696, 1019, 905, 42627, 1491, -1000,
	7254, -1000, 1784, 2271, 1046, 1051, 1046, 1046, 1078, -1000,
	42627, 903, 1298, 33714, -1000, 902, -1000, -42, 2296, 85,
	-1000, 1914, 899, -1000, -1000, 54433, 11947, 658, -35, 36545,
	54433, 174, -1000, 22905, 78, 22905, 78, -1000, -1000, 2027,
	-1000, -1000, -1000, 2446, 1223, 1717, -1000, -1000, -1000, 468,
	1600, 1491, 1587, -1000, -1000, 43441, 54433, 1785, -37, 54433,
	-1000, -1000, 1295, -1000, 2019, 2017, 481, 2445, -1000, 1443,
	1579, -1000, -1000, -1000, 56041, 907, 2016, 741, 399, 2321,
	399, 29974, -1000, 54433, -1000, 54433, -1000, -1000, -1000, 2444,
	-1000, 54433, -1000, -1000, 54433, -1000, 54433, -1000, 54433, -1000,
	54433, 54433, -1000, 54433, 33714, 33714, 33714, 4156, 34522, -73,
	323, -1000, 43033, 54433, 803, 36947, -206, 658, -1000, 658,
	-1000, 54433, 1951, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 54433, -1000, 54433, -1000, -1000, -1000, -1000, -1000,
	-1000, 1097, -1000, 1949, -1000, 1947, -1000, 172, -1000, -1000,
	-1000, 1481, 54433, 54433, 54433, -1000, 42627, -1000, -1000, 1944,
	-1000, -1000, -1000, -1000, -1000, 64591, -1000, 415, -1000, -1000,
	64591, 1127, 1788, -1000, 1788, -36, -1000, 63053, 1734, 54433,
	-1000, -1000, -1000, -1000, -1000, 693, 430, 430, 938, 938,
	938, 938, 2310, 1471, 1275, 525, 245, 245, 245, 245,
	245, 245, 245, 245, 255, 1136, 1136, 255, 255, 255,
	255, 255, 1136, 1136, 1136, 245, 245, 245, 64903, 64758,
	5603, 22905, 22905, 898, 1358, 387, 5380, 22905, 5688, 5688,
	5688, 5688, -1000, 1730, -1000, -1000, -1000, -1000, 1909, 466,
	24198, 24198, -1000, -1000, -1000, -1000, 13241, 22905, -1000, -1000,
	-1000, -1000, 17593, -1000, -1000, 62672, -249, 322, -143, -3,
	-1000, 22905, 22905, 22905, 320, -1000, 319, -1000, -1000, 897,
	-1000, 896, 885, 883, -1000, 465, 171, 22905, 54433, -1000,
	60386, 588, -170, -1000, -76, 1041, -1000, 22905, 170, -1000,
	1356, 464, 462, 318, -78, 690, 689, 686, 684, 22905,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	64444, 60080, 60005, 59699, 7091, 59624, 59318, -79, 313, -1000,
	1905, -143, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 312,
	-1000, -81, -1000, -86, -1000, 310, -1000, 64277, -143, 309,
	5758, -1000, 24198, 24198, 24198, -1000, 307, -1000, 63128, -1000,
	64130, 17162, 17162, 17162, 303, 63963, 22905, -143, -1000, 458,
	-87, 741, 16717, 25879, 11947, -1000, 741, 741, 22905, -1000,
	22905, 26694, 26694, 1736, 1735, 26694, -1000, -1000, -1000, -1000,
	41417, 522, 670, 41417, -1000, 2378, 1712, -1000, -1000, -1000,
	54433, 362, -1000, 41417, 41417, 11947, 670, -1000, 297, 29160,
	-3, 167, -1000, -1000, 11947, 1775, 1775, -1000, 1904, 54433,
	2344, -1000, -1000, 7254, -1000, 604, 895, -1000, 2395, 453,
	-1000, 2378, 2378, 54433, 112, 15855, -1000, 1351, -1000, -1000,
	1148, -1000, 1244, -1000, -1000, -1000, -1000, 15855, -1000, 1575,
	54433, 54433, 54433, -1000, -1000, 1578, 55639, 1571, 7254, 54433,
	-1000, -1000, 449, 448, 1732, 1726, 54433, 54433, 55237, 54835,
	54433, 1263, 22905, 1423, 1470, 78, -1000, 78, 447, 945,
	54433, 54433, 1158, -1000, -1000, -1000, -1000, -1000, 54433, -1000,
	-1000, 2393, -1000, 1046, -1000, -1000, -1000, 1046, 1491, 1147,
	54433, 33714, 725, 54433, 1300, 78, -1000, 78, 444, 11947,
	1204, -1000, 1860, -1000, 1513, -1000, -1000, 9863, 64591, -1000,
	64591, -1000, 54433, -1000, 778, 54433, 36947, 707, 2010, -1000,
	1491, 2009, 362, -1000, -1000, 110, 711, 33714, 54433, -37,
	33714, 33714, 33714, 2443, 441, 2440, -1000, 54433, 2007, 1433,
	1562, 2142, 646, 54433, 1381, 22905, 1194, -1000, 29568, 789,
	54433, 1130, 87, -1000, -1000, -1000, -1, 54433, -1000, 2438,
	-1000, -1000, 153, 153, 153, -1000, 152, 1442, -1000, -63,
	-63, -1000, -1000, 4156, 711, -38, 440, -1000, 665, 662,
	28338, 33714, -88, -1000, -1000, -1000, -1000, -1000, 54433, 54433,
	572, 1833, 54433, -1000, 711, -1000, 722, -1000, 1008, -44,
	-44, -1000, 1093, 1068, 54433, 11947, 54433, 54433, 11947, 54433,
	-1000, -1000, -1000, -1000, -1000, 1127, -1000, 22905, -1000, -1000,
	-1000, 14979, -1000, -1000, -1000, 54433, -220, 22905, 22905, 5253,
	4931, 22905, 24198, 24198, -1000, 22905, 4584, -1000, -1000, -1000,
	-1000, -1000, 1902, 439, 22905, 7254, 5935, 4387, -1000, 296,
	59243, 255, -1000, 22905, -1000, 295, 16286, -1000, 63509, -12,
	-12, -1000, 2404, 1626, 1276, 1206, 1110, 2391, 9447, -143,
	-89, -1000, -1000, 575, -1000, 2012, -1000, 22905, 63815, 9031,
	-1000, 30380, 742, 1381, -1000, -1000, 2378, -1000, -1000, -1000,
	-1000, 62366, 7254, 7254, 22905, 22905, -1000, 22905, 22905, 22905,
	-1000, -1000, 22905, -1000, -1000, -1000, -1000, 1900, 22905, -1000,
	7254, 7254, 24198, 24198, 24198, 24198, 24198, 24198, 24198, 24198,
	24198, 24198, 24198, 24198, 24198, 24198, 24198, 24198, 24198, 24198,
	24198, 1721, 24198, 2377, 2377, 2377, -1000, 1893, 1900, 22905,
	22905, 7254, 292, 291, 290, -1000, 22905, -143, 4156, -1000,
	1876, -1000, -195, -1000, 1835, -1000, -1000, 1876, 1876, -94,
	64591, -1000, 1736, -1000, 438, 22905, 26694, -1000, 586, -1000,
	-95, -1000, 41417, -1000, 582, -247, -1000, 656, -1000, 362,
	-1000, -1000, -1000, 165, 41417, -1000, -96, -1000, 2319, 289,
	11947, -1000, -1000, -1000, -1000, -1000, 78, -44, 1387, -1000,
	2390, -1000, 579, 288, 2378, 287, 286, -44, 54433, -1000,
	-39, -1000, -1000, -1000, -1000, -1000, -1000, 882, 876, -1000,
	2006, -1000, 1561, -1000, 793, -1000, 1237, 22905, 22905, 437,
	434, 1296, 2436, 2004, 1442, 2003, 1442, -1000, -1000, 701,
	-1000, 64591, 433, 429, -1000, -41, 1248, -1000, -1000, 22905,
	22905, 42225, -1000, 2204, -1000, 875, -1000, -1000, -1000, 1491,
	871, -1000, -1000, 1270, -1000, -1000, -1000, -1000, 22905, -1000,
	-42, 870, 711, 1896, 1025, -1000, 2435, 2434, 2433, 285,
	-43, -1000, 2317, 1425, 54433, 54433, 54433, 2315, 54433, -1000,
	-1000, -1000, -1000, 720, -1000, -1000, 2432, -1000, 800, 11947,
	54433, 2000, 1684, 646, 34120, -1000, 720, 1765, -1000, 64591,
	-1000, 1130, 14534, 2199, -97, -1000, 160, -1000, -1000, -1000,
	741, 29974, 26694, 22905, 2430, -103, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 41823, 41823, 33714, 33714, 33714, 711,
	54433, 54433, 36947, 2428, 421, 54433, 54433, 420, -1000, -1000,
	-1000, 1384, 54433, -1000, -1000, -1000, -1000, -1000, 1311, 1511,
	-1000, 1389, 62291, -1000, 2226, 11947, 2316, 5688, 22905, 22905,
	202, 3730, 831, 5688, 22905, 22905, 7254, 3474, -114, 22905,
	22905, -1000, 22905, 559, 64591, 2403, 22905, 284, 282, 281,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 272, -1000,
	-1000, -1000, -1000, -1000, 64591, 22905, 154, -1000, -1000, -1000,
	58453, -1000, 22905, 268, 265, -1000, 263, 262, 58937, 6760,
	61985, 61910, 61604, 64591, 1893, 64591, -1000, -1000, 692, 692,
	1035, 1035, 1035, 1035, 2377, 918, 976, 730, 601, 601,
	601, 574, 1171, 1171, 601, 601, 601, 1891, 1670, 414,
	5716, -1000, -1000, 64591, 64591, 253, -1000, -1000, -1000, -143,
	231, 1868, 2265, -1000, 26694, 1868, 1868, -1000, -1000, 54433,
	64591, -1000, -230, -1000, 2378, -1000, -1000, 1712, -1000, 8195,
	-1000, 11947, -1000, -1000, 29160, -1000, 413, -1000, 88, -1000,
	-1000, 526, -1000, -1000, 223, -1000, -1000, -44, 54433, 54433,
	54433, 1999, -1000, 2650, -1000, 61529, -115, -1000, 63053, 22905,
	54433, -1000, 1294, 1720, 824, -1000, 54433, -1000, 54433, -1000,
	-1000, 54433, 54433, 54433, 54433, 54433, -116, 64591, -46, -1000,
	649, -1000, 54433, 54433, 33714, -117, 11947, -1000, 33714, 956,
	-1000, -1000, -1000, 1829, 78, -1000, 2427, 411, 1491, 78,
	-1000, -1000, -1000, 409, 54433, 1430, 408, 11947, 1705, 646,
	34120, -1000, 907, 1130, -1000, -1000, -48, -1000, 443, 78,
	54433, 2426, 1381, -1000, -55, 64591, -1000, 648, -1000, -122,
	-1000, -1000, 220, -1000, 2168, 2166, -1000, -1000, 22905, 402,
	397, 54433, 1552, -1000, -1000, -1000, 11947, 981, -1000, -1000,
	-1000, 2226, 5688, 5688, 22905, 22905, 22905, 5688, 3474, -123,
	-1000, 5688, 5688, -143, -1000, -1000, 63509, -1000, -1000, -1000,
	-1000, 64591, 8615, 1313, -1000, 61223, -1000, -1000, -1000, -1000,
	22905, 22905, -1000, -1000, -1000, -1000, -1000, 24198, 1888, 391,
	7254, -1000, -1000, 731, 22905, 22905, 1835, 731, 731, -133,
	670, -1000, -1000, -1000, 2378, 88, -1000, 2419, 11947, -1000,
	-1000, -1000, -1000, -1000, 54433, -1000, 54433, -1000, 11947, 54433,
	1890, 1539, -1000, -1000, 1724, 390, 24198, 54433, 659, 1903,
	1308, 22905, -1000, -138, -140, 1537, -1000, -1000, 1526, 22905,
	-1000, 7254, 1442, 1442, -141, -147, -1000, 864, 863, 857,
	54433, 15855, -1000, -1000, -1000, 855, -1000, -63, 22905, 1300,
	1848, 712, -1000, 36947, 707, -1000, -1000, 22905, -1000, 54433,
	22905, 1418, -1000, 646, 34120, -1000, 2142, -1000, 2011, 54433,
	2194, -1000, -1000, -1000, 1765, 387, -1000, 711, 385, 384,
	-148, 22905, 22905, -149, -75, -1000, 643, 636, -1000, -1000,
	54433, -1000, 5688, 5688, 5688, -1000, 217, -1000, -1000, 1381,
	2256, -1000, 61148, 60842, 5780, 24198, 7254, -154, -1000, 54433,
	64591, -143, -1000, -1000, -1000, 41417, 523, -1000, -1000, 1715,
	-1000, -1000, -1000, 54433, 1559, -1000, -1000, 22905, 5716, 382,
	22905, -1000, -1000, 1806, 1926, 1829, 381, -1000, -1000, -1000,
	-1000, 1201, -1000, -1000, 64591, 2224, -1000, -1000, 380, 377,
	54433, 54433, 376, 635, -1000, 371, 64591, 707, -1000, 1326,
	-1000, 1760, 210, 2314, -156, 800, -157, 54433, 34120, -1000,
	1684, 970, -159, 54433, 1130, -1000, -1000, 33714, 33714, 1308,
	-164, -167, -1000, 1552, -1000, 54433, -1000, 54433, -1000, -1000,
	1476, 22905, -1000, -1000, 5780, -173, -1000, -113, -1000, 2302,
	-1000, -1000, -1000, -1000, 1996, 60767, 1661, 54433, 60461, 1925,
	-1000, -1000, 1300, 54433, 54433, 796, 11947, 1311, 1311, -1000,
	-1000, 22905, 15855, 22905, -1000, 54433, -1000, 2164, 1829, 78,
	1308, 368, 1308, 364, -1000, 1705, 1059, -1000, 741, -1000,
	-1000, -175, -192, 1829, 1308, -1000, -1000, -193, -198, 208,
	23767, 23767, 23767, -143, -1000, 54433, 363, 1982, -1000, 1402,
	1386, -10, 819, -1000, -1000, 1903, -200, 362, -1000, 22905,
	-1000, -201, -1000, 788, -207, -1000, 784, -209, -1000, -210,
	358, -1000, 1300, 712, 1829, 22905, 1829, 22905, -1000, 29974,
	-1000, 711, 711, 1300, 1829, -1000, -1000, -1000, -1000, -1000,
	24629, 1393, 1121, 62747, -1000, -1000, -1000, -1000, 54433, -1000,
	1417, 1409, 1103, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1661, 64591, -1000, 1311, 1845, -1000, 1311, 1887, -1000,
	-1000, 54433, 707, -1000, 1300, -217, 1300, -218, -199, -1000,
	-1000, -1000, 1300, 2320, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2110, -1000, 810, 1439, 1439, 1402, -1000, 353, -1000,
	346, -223, -1000, 740, 1308, 740, 1308, -1000, -1000, 23336,
	-1000, 2349, -1000, -1000, 1714, -1000, 1903, 22905, 22905, 1428,
	-1000, 2416, 1829, -1000, 1829, -1000, -1000, -1000, -1000, -1000,
	-224, -226, -1000, -1000, -1000, -1000, 1300, 1300, 1300, 851,
	740, 740, -1000, 345, -1000, -1000, 22905, -232, 1300, -1000,
}
var sqlPgo = [...]int{

	0, 3026, 3025, 1998, 3023, 3022, 3019, 3018, 3016, 3013,
	3011, 3006, 3005, 2996, 2995, 2993, 2989, 2988, 2986, 2977,
	2976, 2974, 2973, 2969, 2967, 2966, 2954, 2953, 2948, 2947,
	2946, 2945, 2943, 2938, 2935, 2934, 2932, 2930, 2929, 2928,
	2926, 2922, 2920, 2916, 2914, 35, 2910, 2909, 2908, 2903,
	2902, 2900, 2897, 2894, 2891, 2884, 2881, 2880, 2879, 2878,
	2876, 2875, 2874, 2873, 2872, 2869, 2868, 2866, 2864, 2862,
	2854, 2852, 2850, 2847, 2846, 114, 2844, 2843, 2842, 2841,
	2837, 2836, 2833, 2828, 2826, 2821, 2820, 2819, 2817, 2811,
	168, 2810, 2808, 2806, 2805, 2804, 2803, 2802, 2800, 2799,
	2798, 181, 2797, 2796, 2794, 2793, 2792, 2788, 2787, 2786,
	2785, 2784, 2783, 2782, 2780, 2779, 2778, 2777, 2775, 2774,
	2773, 2771, 2769, 2768, 2767, 2766, 2765, 2764, 197, 133,
	2763, 2762, 2761, 2759, 2758, 2757, 100, 82, 21, 2756,
	88, 126, 177, 3781, 175, 2755, 2754, 2753, 2752, 2750,
	59, 120, 130, 125, 118, 84, 2749, 2748, 72, 56,
	30, 26, 92, 2747, 2746, 2744, 2334, 75, 2740, 2739,
	187, 176, 2738, 909, 2737, 127, 85, 86, 104, 60,
	2735, 107, 20, 2734, 151, 115, 2731, 116, 65, 28,
	4565, 134, 201, 73, 112, 149, 148, 159, 154, 132,
	1477, 2730, 179, 111, 140, 2729, 2728, 2727, 38, 141,
	6, 3, 129, 11, 2707, 10, 2705, 13, 2704, 2699,
	2698, 2697, 27, 119, 41, 54, 2696, 22, 58, 156,
	2695, 162, 2694, 87, 2691, 183, 146, 144, 14, 167,
	2690, 2688, 2686, 2685, 2683, 89, 17, 90, 2682, 2681,
	101, 174, 2680, 52, 123, 68, 94, 195, 157, 99,
	161, 169, 2679, 2678, 2677, 152, 2674, 2673, 109, 155,
	2672, 2671, 31, 44, 170, 51, 2670, 2669, 117, 2668,
	145, 2667, 2666, 2665, 196, 124, 153, 18, 62, 91,
	8, 173, 113, 77, 70, 2664, 3265, 1174, 1053, 2663,
	106, 80, 36, 78, 105, 188, 39, 2662, 2661, 1030,
	2658, 2657, 2653, 2652, 131, 2650, 2649, 2648, 95, 32,
	57, 2647, 110, 37, 163, 194, 74, 160, 158, 180,
	2646, 135, 2645, 139, 103, 2640, 143, 185, 71, 2638,
	164, 2634, 190, 2630, 2624, 2623, 2622, 66, 2621, 2618,
	69, 2617, 108, 2616, 2615, 137, 166, 67, 29, 2614,
	55, 222, 2613, 142, 64, 2608, 1440, 34, 0, 4619,
	4201, 2607, 150, 93, 2606, 2605, 2604, 2603, 33, 12,
	5, 7, 15, 16, 655, 102, 2602, 2601, 81, 96,
	121, 2600, 191, 165, 2599, 2598, 2594, 63, 2593, 25,
	2588, 23, 2587, 2586, 24, 1, 2585, 2583, 178, 2582,
	2580, 2578, 2574, 2345, 2572, 186, 2571, 97, 2569, 128,
	98, 2568, 2567, 2563, 2561, 182, 2558, 184, 2556, 9,
	19, 2, 2555, 2551, 2545, 147, 4, 2124, 2544, 2543,
	45, 138, 76, 2540, 2539, 136,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 8, 8, 9, 9, 9, 33,
	33, 11, 11, 10, 10, 10, 12, 12, 7, 7,
	7, 7, 7, 7, 7, 7, 14, 14, 24, 24,
	15, 26, 415, 415, 18, 28, 19, 29, 13, 417,
	417, 417, 417, 22, 20, 20, 30, 139, 139, 17,
	17, 25, 25, 152, 152, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 414, 414, 154, 154, 153, 149,
	149, 418, 418, 155, 155, 155, 157, 157, 34, 34,
	88, 88, 88, 140, 81, 81, 81, 81, 81, 81,
	81, 76, 76, 366, 366, 367, 367, 135, 135, 136,
	136, 136, 136, 137, 137, 138, 138, 138, 48, 36,
	36, 36, 36, 36, 36, 36, 37, 37, 37, 37,
	38, 38, 38, 38, 38, 38, 39, 39, 39, 39,
	39, 39, 46, 46, 46, 129, 129, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 422, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 422, 423, 423, 424,
	424, 425, 425, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 60, 60,
	50, 410, 410, 236, 236, 335, 335, 62, 62, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 71, 71, 71, 72, 72, 72, 69, 69,
	69, 67, 67, 67, 66, 66, 66, 70, 70, 70,
	68, 68, 68, 237, 237, 73, 73, 73, 73, 73,
	73, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 337, 337, 74, 74, 307, 307, 77, 77, 266,
	266, 78, 78, 78, 78, 78, 79, 79, 79, 79,
	89, 89, 89, 89, 413, 413, 229, 229, 170, 170,
	170, 170, 84, 84, 84, 84, 85, 85, 85, 86,
	86, 134, 134, 95, 95, 95, 95, 95, 94, 94,
	94, 94, 94, 94, 40, 40, 40, 41, 41, 42,
	42, 43, 43, 44, 44, 45, 45, 45, 45, 45,
	97, 97, 419, 419, 99, 96, 96, 96, 98, 98,
	98, 98, 100, 101, 101, 101, 101, 101, 101, 102,
	102, 360, 360, 244, 244, 358, 358, 359, 359, 206,
	206, 206, 206, 206, 207, 207, 207, 365, 365, 365,
	365, 365, 365, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	119, 119, 119, 128, 128, 128, 128, 128, 128, 128,
	121, 121, 121, 112, 112, 104, 104, 104, 104, 108,
	108, 108, 108, 108, 105, 105, 109, 109, 111, 111,
	113, 113, 113, 113, 113, 113, 106, 106, 106, 106,
	115, 115, 115, 115, 114, 114, 124, 124, 124, 124,
	124, 124, 321, 321, 120, 120, 120, 120, 123, 123,
	123, 123, 118, 118, 118, 122, 122, 125, 125, 125,
	125, 107, 107, 107, 428, 428, 428, 126, 126, 117,
	117, 127, 127, 127, 127, 127, 127, 127, 116, 116,
	116, 416, 416, 110, 411, 411, 408, 408, 408, 408,
	408, 408, 408, 409, 409, 412, 412, 82, 82, 82,
	55, 55, 429, 429, 429, 56, 56, 430, 430, 430,
	427, 427, 427, 427, 427, 427, 427, 427, 208, 208,
	209, 209, 289, 289, 289, 289, 289, 210, 210, 156,
	156, 156, 213, 214, 214, 211, 211, 212, 212, 212,
	216, 216, 215, 218, 218, 217, 288, 376, 376, 377,
	377, 377, 377, 377, 377, 377, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 374, 374, 374, 375,
	372, 372, 373, 373, 373, 373, 431, 431, 431, 431,
	431, 431, 432, 432, 287, 287, 222, 222, 379, 379,
	379, 379, 380, 380, 380, 380, 380, 383, 382, 381,
	381, 381, 381, 381, 317, 317, 317, 59, 59, 59,
	255, 255, 254, 254, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 131, 131,
	57, 57, 57, 162, 162, 54, 54, 54, 434, 434,
	58, 58, 58, 435, 435, 61, 61, 61, 61, 61,
	61, 53, 53, 53, 53, 53, 436, 436, 272, 272,
	271, 271, 227, 227, 323, 174, 174, 150, 150, 150,
	21, 23, 23, 16, 16, 16, 16, 16, 16, 31,
	31, 32, 32, 27, 27, 420, 420, 421, 421, 83,
	83, 87, 87, 87, 93, 93, 130, 130, 130, 130,
	130, 130, 130, 35, 35, 35, 35, 47, 47, 47,
	47, 91, 438, 438, 438, 92, 92, 437, 437, 169,
	169, 169, 169, 171, 171, 284, 284, 285, 285, 439,
	439, 286, 286, 286, 164, 163, 165, 165, 52, 52,
	52, 158, 158, 159, 159, 160, 160, 161, 161, 440,
	440, 80, 80, 80, 133, 133, 202, 202, 280, 280,
	280, 223, 223, 179, 179, 283, 283, 281, 281, 281,
	253, 253, 253, 132, 132, 232, 232, 246, 246, 247,
	247, 332, 332, 248, 90, 90, 143, 143, 141, 141,
	141, 141, 141, 141, 441, 441, 142, 142, 142, 144,
	144, 144, 144, 144, 144, 144, 147, 147, 147, 147,
	148, 148, 148, 146, 146, 390, 390, 390, 392, 392,
	393, 389, 389, 391, 391, 433, 433, 257, 257, 257,
	220, 221, 219, 219, 442, 442, 225, 225, 224, 226,
	226, 322, 322, 322, 251, 251, 251, 251, 275, 275,
	273, 273, 274, 274, 276, 276, 277, 277, 277, 278,
	278, 279, 279, 250, 250, 303, 303, 145, 145, 145,
	231, 231, 231, 233, 233, 294, 294, 294, 295, 295,
	293, 293, 293, 293, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 325, 325, 234, 234, 326, 282, 282,
	406, 406, 406, 407, 407, 320, 320, 327, 327, 327,
	327, 327, 327, 318, 318, 319, 319, 333, 334, 334,
	260, 260, 260, 260, 258, 258, 259, 259, 328, 328,
	328, 328, 252, 252, 329, 329, 329, 330, 290, 290,
	338, 338, 338, 338, 352, 230, 230, 230, 443, 443,
	339, 339, 339, 339, 339, 339, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 342, 342,
	342, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 351,
	351, 351, 351, 351, 343, 343, 348, 348, 349, 349,
	349, 344, 345, 350, 350, 350, 350, 444, 444, 354,
	354, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	347, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 267, 267, 268, 268, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 298, 298, 298, 298, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 384, 384, 384, 384, 384, 384,
	384, 384, 387, 387, 388, 388, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 394, 394, 395, 395, 397,
	397, 398, 398, 399, 400, 400, 400, 401, 402, 402,
	396, 396, 403, 403, 403, 403, 404, 404, 405, 405,
	405, 405, 405, 309, 309, 310, 310, 316, 316, 316,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 172, 172, 172, 172,
	172, 242, 242, 240, 240, 240, 243, 243, 241, 241,
	239, 239, 238, 238, 306, 306, 304, 304, 308, 308,
	261, 261, 353, 353, 353, 353, 353, 353, 353, 262,
	262, 262, 270, 263, 263, 264, 264, 264, 264, 264,
	300, 301, 265, 265, 265, 302, 302, 311, 315, 315,
	314, 313, 313, 312, 312, 291, 291, 292, 292, 249,
	249, 445, 445, 245, 245, 331, 331, 331, 331, 204,
	204, 235, 235, 203, 203, 197, 197, 198, 198, 198,
	198, 228, 228, 355, 355, 355, 356, 357, 305, 189,
	188, 176, 177, 187, 186, 185, 175, 178, 182, 183,
	184, 180, 181, 193, 192, 191, 190, 336, 199, 199,
	200, 200, 200, 201, 201, 201, 201, 173, 173, 194,
	194, 195, 196, 196, 166, 166, 166, 167, 167, 168,
	168, 364, 364, 362, 362, 362, 363, 363, 363, 363,
	361, 361, 361, 361, 361, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 0, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 6, 4, 6,
	6, 6, 1, 1, 5, 5, 6, 6, 4, 4,
	4, 4, 3, 4, 4, 7, 4, 3, 5, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 4, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 4, 9, 7, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 3, 1, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 3, 3, 4, 3,
	4, 7, 4, 4, 4, 3, 5, 7, 4, 3,
	3, 4, 3, 3, 3, 3, 3, 2, 0, 1,
	0, 1, 0, 3, 3, 3, 3, 3, 6, 4,
	4, 4, 3, 5, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 1, 1, 2, 1, 2, 7, 3,
	6, 1, 2, 1, 3, 2, 0, 8, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 3, 5, 3,
	3, 5, 3, 1, 3, 2, 2, 5, 3, 6,
	3, 1, 1, 2, 1, 1, 1, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 3, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 4, 7, 2,
	6, 4, 7, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 2, 4,
	3, 2, 2, 1, 2, 1, 3, 3, 1, 2,
	1, 2, 1, 2, 1, 1, 3, 5, 4, 6,
	4, 3, 0, 1, 3, 2, 4, 2, 4, 1,
	6, 3, 1, 1, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 1, 3, 2, 1, 3, 1, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 1, 1, 1, 1, 1, 2, 2,
	5, 7, 3, 3, 3, 3, 4, 4, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 5, 4, 6, 4,
	6, 4, 1, 0, 2, 3, 3, 3, 6, 4,
	2, 3, 4, 2, 3, 3, 3, 4, 3, 3,
	3, 3, 4, 3, 1, 1, 1, 2, 3, 2,
	3, 6, 6, 7, 9, 6, 3, 4, 5, 5,
	3, 1, 1, 5, 2, 0, 1, 1, 1, 1,
	3, 2, 2, 2, 1, 2, 0, 3, 3, 2,
	10, 13, 0, 2, 3, 9, 12, 0, 2, 3,
	1, 1, 2, 2, 2, 2, 1, 0, 1, 0,
	1, 3, 1, 1, 1, 1, 3, 8, 0, 1,
	1, 0, 2, 1, 0, 1, 0, 9, 9, 3,
	1, 3, 7, 1, 3, 11, 3, 2, 0, 3,
	1, 2, 2, 3, 2, 6, 2, 1, 1, 2,
	4, 2, 5, 5, 5, 2, 8, 9, 6, 5,
	3, 1, 5, 8, 5, 11, 0, 1, 3, 3,
	2, 2, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 5, 8, 4,
	1, 0, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 2, 2, 2, 2, 2, 3, 1, 4, 2,
	4, 7, 3, 3, 0, 3, 6, 3, 1, 1,
	8, 7, 5, 0, 1, 6, 7, 6, 5, 3,
	4, 14, 17, 14, 17, 4, 0, 2, 2, 0,
	1, 0, 1, 3, 2, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 8, 10, 8, 10, 6,
	8, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 0, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 3, 6, 3, 1, 3, 1, 4,
	2, 1, 3, 1, 3, 8, 5, 4, 3, 0,
	2, 2, 0, 10, 3, 2, 0, 1, 3, 1,
	1, 3, 3, 5, 1, 1, 3, 3, 2, 3,
	4, 3, 4, 5, 0, 2, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 5, 1, 0, 1, 0, 1, 0, 3, 1,
	3, 2, 4, 5, 2, 2, 1, 1, 1, 0,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 4, 2, 5,
	3, 2, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 3, 4, 1, 5,
	3, 4, 5, 1, 5, 1, 3, 2, 0, 3,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 3, 2, 1, 0, 5, 1, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 2, 0,
	2, 5, 2, 1, 1, 2, 3, 0, 1, 1,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 5, 4, 1, 2,
	1, 4, 1, 1, 2, 1, 1, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 1, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 5, 4, 6, 3, 5, 4, 6,
	4, 6, 5, 7, 3, 3, 3, 3, 3, 4,
	3, 2, 4, 2, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 1, 1, 3, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 1, 5, 5, 3, 1, 1, 1,
	2, 2, 2, 4, 3, 5, 6, 8, 6, 6,
	4, 3, 4, 1, 1, 1, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 8, 8,
	6, 4, 6, 6, 6, 4, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 4, 3, 4, 4, 3, 6, 5, 5, 5,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 1, 1, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 1, 2, 3, 2, 3, 2, 3,
	1, 0, 1, 3, 1, 3, 3, 3, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	2, 2, 3, 2, 1, 1, 1, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 1,
	2, 1, 0, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 3, 1, 1, 1, 1, 5, 3,
	1, 1, 3, 1, 2, 2, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 7, 1, 7, 5, 3, 1, 1, 1,
	1, 1, 3, 5, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 445, -75, -48, -46, -77, -78,
	-63, -76, -79, -74, -89, -93, -83, -95, -130, -4,
	-34, -36, -49, -62, -64, -73, -81, -80, -82, -84,
	-88, -87, -40, -90, -94, -103, -131, -132, -133, 80,
	67, 120, 102, 107, 126, 152, 276, 305, 315, 299,
	-98, -99, 334, -35, -47, -92, -91, -5, -11, 27,
	38, -37, -38, -39, 52, -57, -54, -51, -60, -422,
	82, -391, -65, -68, -70, -426, 112, 125, 163, 269,
	-85, -86, 301, 303, -42, -41, 121, -141, -143, -96,
	-97, -134, -104, -105, -106, -107, -108, -109, -110, -111,
	-112, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, 337, 383, 39, 346,
	68, 115, 309, 21, -6, -7, -8, -9, -10, -12,
	-23, -50, -52, -53, -55, -56, -61, -58, -59, -390,
	-66, -67, -69, -71, -72, 300, -144, -142, 442, 395,
	-14, -18, -19, -15, -17, -20, -16, -24, -28, -29,
	-26, -25, -27, -30, -31, -32, -33, -21, -22, -13,
	413, 421, -147, -145, -146, -148, 322, 403, 360, 446,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, -190,
	-194, -195, -196, -166, 4, -368, -370, 21, 22, 23,
	24, 25, 27, 37, 38, 39, 42, 44, 45, 48,
	49, 50, 51, 52, 53, 56, 61, 66, 67, 68,
	69, 70, 75, 72, 73, 74, 77, 79, 80, 81,
	84, 85, 93, 94, 95, 96, 97, 98, 102, 105,
	104, 107, 110, 111, 112, 114, 116, 117, 120, 121,
	124, 122, 366, 368, 123, 125, 126, 127, 137, 138,
	139, 141, 142, 144, 146, 150, 151, 153, 157, 159,
	160, 161, 162, 163, 164, 165, 177, 172, 178, 182,
	185, 184, 186, 187, 188, 179, 193, 196, 197, 198,
	200, 201, 204, 205, 206, 207, 210, 209, 212, 215,
	216, 219, 220, 223, 225, 226, 229, 230, 233, 231,
	232, 235, 236, 238, 237, 245, 246, 248, 249, 250,
	264, 253, 254, 257, 260, 263, 265, 266, 267, 268,
	269, 270, 272, 274, 276, 278, 280, 281, 282, 283,
	284, 285, 287, 288, 290, 291, 292, 293, 294, 299,
	296, 297, 298, 300, 301, 302, 303, 305, 307, 308,
	309, 310, 312, 314, 335, 336, 348, 315, 316, 317,
	318, 319, 320, 321, 325, 329, 326, 327, 328, 330,
	323, 324, 331, 332, 334, 337, 339, 341, 342, 345,
	346, 347, 349, 352, 353, 354, 350, 351, 344, 359,
	357, 358, 361, 362, 363, 364, 365, 367, 369, 374,
	377, 378, 380, 383, 384, 385, 387, 388, 391, 392,
	393, 394, 399, 395, 397, 400, 401, 402, 408, 407,
	414, 415, 417, 418, 419, 32, 40, 41, 43, 46,
	57, 58, 59, 62, 99, 100, 119, 128, 129, 140,
	154, 156, 166, 167, 168, 183, 189, 191, 171, 213,
	243, 244, 258, 262, 273, 275, 286, 311, 340, 355,
	371, 372, 373, 379, 381, 403, 404, 405, 409, 416,
	251, -184, 2, -166, -166, 276, 26, 2, 26, 272,
	324, 362, 364, 2, 192, 2, -413, -229, 2, 26,
	-170, -166, 82, 152, 322, -184, 2, -413, -229, 24,
	2, -166, 2, -171, 2, 315, -166, 445, 77, 220,
	61, 311, 331, -101, 378, -100, 371, 317, -102, -360,
	2, 233, -166, 445, 445, 445, 445, 2, 360, 267,
	407, 323, 396, 95, 283, 176, -408, 2, 4, -370,
	-368, -198, -197, 360, 95, -196, -166, 435, -195, 445,
	445, 445, 2, 197, 198, 282, 281, 331, 332, 445,
	445, 445, 2, 25, 55, 76, 79, 101, 127, 147,
	150, 255, -423, 226, 264, 280, 317, 330, 359, 369,
	380, -427, 347, 56, 396, -434, 385, 110, -271, 95,
	364, 362, 220, 151, 392, 307, 155, 390, 105, 182,
	394, 393, 445, 445, 25, 55, 64, 79, 110, 127,
	147, 150, -425, 264, 280, 314, 317, 330, 359, 369,
	385, 380, 2, 407, 323, 360, 176, 95, 396, 307,
	279, -75, 2, 442, 29, 334, -140, 360, 2, -166,
	197, 198, 2, 445, 445, -408, 2, 197, 198, 2,
	319, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 2, -128, 331, 347,
	160, 38, 61, 26, 66, 96, 153, 176, 177, 205,
	76, 77, 281, 220, 198, -321, 332, 361, 318, 357,
	378, 82, 397, 308, 419, -416, 122, 4, 95, 233,
	333, 371, 70, 365, 366, -433, 2, 360, -437, 2,
	378, 378, 2, -437, 2, -437, 2, -169, 2, 378,
	375, -438, 378, 416, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, -142, -144, -143, 445,
	445, 445, 445, 445, -128, 331, 2, 61, 26, -441,
	145, -224, -225, 389, 190, 118, 256, -141, -143, 2,
	-390, -358, 2, -296, 251, -298, 433, 434, 428, 239,
	420, -309, 101, 228, 227, 390, -299, -311, 119, 311,
	-243, 8, 9, 5, 6, 7, -173, -340, -305, -347,
	382, 130, 242, -201, 448, 10, 442, -387, -143, -310,
	33, 156, 54, -362, -200, -341, -349, -345, -346, -443,
	44, 50, 49, 369, 232, 325, 326, 341, 327, 328,
	42, 399, 172, 248, 250, 184, 4, 191, -199, -166,
	-384, -385, -368, -369, 183, 189, 185, 340, 186, 187,
	188, 41, 286, 141, 142, 140, 111, 100, 99, 244,
	46, 45, 43, 404, -350, 97, 371, 372, 373, 374,
	200, 201, 64, 87, 88, 86, 91, 90, 92, 89,
	333, 396, 55, 32, 166, 167, 171, 243, 168, 62,
	-386, 351, 83, 131, 149, 181, 169, 194, 195, 199,
	214, 217, 234, 241, 259, 261, 306, 338, -444, 405,
	57, 58, 128, 129, 154, 213, 262, 273, 355, 379,
	381, -392, 287, -393, -184, -392, 445, 445, 447, 445,
	-219, -220, -221, 2, 26, 108, 442, 2, -324, 2,
	440, -328, -143, 208, -327, 442, -325, -190, 252, -388,
	312, -384, -385, -173, -166, -200, 4, 228, 227, -3,
	-222, 442, 444, 360, 65, 2, -266, 442, -166, 26,
	-140, 251, 375, 447, -307, 442, 251, 148, 253, -166,
	2, 2, 335, 2, 442, -101, 59, 378, -285, 2,
	-286, -163, -164, -165, 196, 278, 285, 419, -358, -419,
	148, 425, 375, -358, -244, 444, 2, -328, 166, -190,
	2, -188, -361, 4, -368, -370, -369, -371, 64, 26,
	28, 29, 30, 31, 33, 34, 35, 36, 47, 54,
	55, 60, 63, 65, 76, 82, 86, 87, 89, 88,
	90, 91, 92, 101, 103, 106, 108, 109, 113, 115,
	118, 130, 132, 145, 147, 148, 152, 155, 158, 170,
	176, 180, 190, 192, 208, 211, 218, 221, 222, 239,
	240, 242, 247, 251, 252, 255, 256, 271, 277, 289,
	304, 322, 333, 343, 356, 360, 370, 375, 376, 382,
	389, 390, 396, 398, 406, 410, 411, 412, 413, 2,
	-328, 166, 2, -191, 166, -328, -194, 2, -366, 166,
	-364, 10, -363, 5, 4, -368, -370, -369, 2, -175,
	-166, 2, -187, -361, 2, -203, 166, -190, 375, 447,
	-235, -197, -198, -228, -166, 444, -296, 2, -90, 2,
	-296, 166, 2, -90, 166, 2, -296, 166, 2, -90,
	166, 2, 2, 2, 380, 2, 79, 166, -166, 360,
	94, 2, 298, -424, 314, 384, 407, 2, 2, 2,
	2, 2, 2, 2, 360, 323, -435, 287, -180, 2,
	-166, 145, -366, 166, 2, -366, 166, 2, -192, -194,
	-192, 176, 193, -175, 166, 2, 364, 362, 364, 362,
	148, 2, 192, 2, 192, 2, -329, 2, -330, -190,
	2, 2, 2, 2, 2, 166, -166, 360, 94, 2,
	207, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	-237, 166, 2, -190, -237, 166, 2, -237, 166, 2,
	-204, 166, 2, -203, -175, 166, 2, -367, 166, 2,
	-366, -367, 166, 2, -337, 2, -336, -363, 403, -75,
	442, 331, 442, -366, -190, -296, -90, 148, -296, -90,
	2, 95, 360, -128, 2, 145, 398, 2, 8, 2,
	-366, 284, 137, 2, 335, 2, 281, 332, 61, 419,
	148, 2, 2, -411, 2, 251, 148, 2, 148, 2,
	148, 2, 148, 2, 148, 2, 2, 281, 332, 2,
	377, 206, 123, 2, 148, 2, 148, 2, 5, 2,
	196, 278, 348, 2, -190, -428, 2, 360, 407, 323,
	2, 2, 72, 73, 148, 2, 148, 419, 2, -252,
	-328, -284, -285, -284, 375, -171, -441, -224, -225, -128,
	335, 2, 2, -441, -251, -273, -274, 218, 132, 247,
	-257, 26, 108, -257, -257, 48, 443, 443, 11, 12,
	63, 37, 433, 434, 435, 436, 143, 437, 438, 431,
	432, 430, 423, 424, 427, 202, 203, 78, 426, 425,
	71, 224, 313, 133, 134, 135, 136, 295, 173, 174,
	175, 14, 15, 16, 30, 255, 217, 420, 169, 338,
	428, 17, 18, 19, 194, 195, 241, 40, 170, -172,
	-205, -296, -296, -296, -296, -296, 261, 442, -249, -291,
	440, -143, 442, 442, 442, 5, 442, 5, -357, 8,
	-143, -296, -309, 443, -241, 442, -143, -309, -304, 442,
	311, 440, 442, -312, -296, 444, -394, 414, -343, 442,
	275, -342, 442, -342, -342, 408, 415, 421, 415, 421,
	145, 442, 442, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 408, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 447, -392, -222, 442, -245, -331,
	-296, 435, -245, -245, 251, -238, -296, 83, -260, 199,
	234, 149, 214, 306, 181, -357, -75, -293, 448, -320,
	421, -143, -325, -166, -143, -327, 442, -324, -320, 435,
	-190, 442, 148, 442, 444, 148, -228, -361, -190, -199,
	-166, -200, -238, -366, -408, -228, -170, 34, -306, -338,
	-339, -351, -340, -348, -344, -347, 291, 292, 290, 294,
	293, 44, 50, 49, 369, 232, 325, 326, 341, 327,
	328, 42, 399, 172, 248, 250, 184, 4, 43, 404,
	-350, 191, 183, 189, 185, 340, 186, 187, 188, 41,
	286, 141, 142, 140, 111, 100, 99, 244, 46, 45,
	97, 371, 372, 373, 374, 200, 201, 405, 351, 57,
	58, -408, -228, 145, -360, -238, 34, -285, 2, -439,
	447, 216, -207, 223, 238, 159, 252, 417, -365, 5,
	4, -305, -317, 101, 220, -347, 9, 434, -355, 8,
	433, -359, -358, 85, 444, -361, -152, 296, -151, 23,
	27, 112, 401, 124, -212, 178, 267, 119, 344, -415,
	-417, 316, 367, 368, 74, 245, 296, 119, -254, -256,
	34, 93, 236, 263, 51, 164, 227, 228, 346, 409,
	119, 296, 413, 119, -417, 296, -417, -154, 344, -415,
	-417, 316, 296, -153, -212, 119, 448, -366, -235, 447,
	447, -361, 435, 119, 119, 119, 119, 2, 2, 239,
	2, 2, 2, 150, -427, -425, 2, 2, 2, -190,
	166, -191, 166, 2, -194, 407, 251, -410, -236, 360,
	-190, -162, -389, 413, 239, 239, 34, 442, 2, -177,
	166, 2, -167, -166, 176, -389, 239, -329, -202, -190,
	-202, 334, -184, 34, -293, 119, 2, 2, 2, -166,
	-155, 447, 53, 302, 119, -155, 119, -155, 119, -155,
	447, 119, -155, 119, 447, 119, 119, 443, 447, -337,
	-366, -138, 413, 148, 82, 442, -367, -175, 2, -190,
	2, 360, 200, -366, -366, -360, 26, 336, 2, 73,
	-190, -412, 145, -409, 307, -408, -190, -190, -190, -190,
	-190, 145, 2, 377, 2, 377, 2, -166, -166, 216,
	-190, 145, 360, 176, 360, -155, 447, -171, -441, -251,
	-360, -441, -274, -273, -276, -296, 26, -279, 139, 235,
	-296, -298, -142, -142, -142, -226, -322, -296, 277, 176,
	-352, -338, -338, -189, -361, 371, -296, -296, -296, -296,
	-296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
	-296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
	-296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
	-296, 217, 169, 338, 40, 170, -296, 375, -296, -296,
	-296, -296, 231, 239, 242, 382, 130, 391, 108, 245,
	-445, 356, 36, -302, -143, -242, 442, -316, 31, 343,
	26, -309, 442, 2, -291, -296, -292, -239, -238, -238,
	443, 406, 26, 108, 435, 2, 8, -267, -269, 418,
	230, 98, 161, 229, -268, 321, 443, 447, 34, 443,
	-296, -239, -308, -304, -238, -315, -314, 410, -361, 435,
	-395, 138, 155, 8, -357, 371, 371, 371, 371, 442,
	443, 2, 443, 2, 443, 2, 443, 2, 443, 2,
	-296, -296, -296, -296, -296, -296, -296, -238, -261, 2,
	-353, -238, 4, 418, 230, 98, 161, 229, 321, -261,
	2, -238, 2, -238, 2, -262, 2, -296, -238, -263,
	-297, -298, 433, 434, 428, -309, -264, 2, -296, -239,
	-296, 47, 211, 376, -265, -296, 148, -238, -393, 34,
	-238, -231, 447, 148, 34, 4, -231, -231, 442, 443,
	447, 199, 199, -324, -260, 199, -258, 259, -258, -258,
	-406, 442, 441, -320, -176, 440, 449, -361, -319, -318,
	34, -184, 257, -320, -320, 444, 443, -319, -190, 442,
	-238, -361, 349, 443, 444, 194, 194, 443, -138, 375,
	413, -75, 443, 447, -230, 33, 440, -269, 442, -354,
	408, 442, 442, 148, -229, -419, 443, 378, -286, -206,
	285, 342, 297, 329, 9, 8, 8, 447, -361, 447,
	375, -420, 76, 65, -288, 166, 65, -372, -178, 76,
	-373, -166, 60, 390, 277, 147, -420, 76, -420, 76,
	76, 334, 347, 48, -328, 37, -90, 212, 148, 419,
	360, 375, -328, -256, -338, 93, 227, 228, 48, -356,
	-355, 434, -356, 48, -356, -356, -356, 413, -191, -328,
	375, 268, -366, 375, 447, 37, -90, 212, 148, 375,
	-203, -176, -334, -333, 422, -197, -166, 444, -296, -90,
	-296, -90, 119, 2, -435, 207, 442, -222, 239, -255,
	-254, 239, -193, 2, -190, -228, -335, 192, 447, -236,
	268, 119, 119, 442, 116, 283, 2, 251, 239, -177,
	166, -158, 363, 119, -290, 411, -280, -90, 442, 101,
	34, -280, -246, -247, -332, -248, -178, 442, -184, -166,
	2, -190, -237, -237, -237, -203, -204, -175, -366, -367,
	-367, -75, -336, 443, 443, -137, 254, -136, -166, 5,
	-140, 398, -209, -289, -288, -374, -375, -372, 217, 176,
	390, 193, 131, -138, -333, -334, -334, -190, 145, -228,
	-228, 331, 145, 145, 444, 283, 95, 360, 267, 176,
	-190, -203, -190, -328, -441, -277, -355, 442, -278, 311,
	312, 447, -150, 35, 106, 204, -190, 419, 117, -296,
	-296, 375, -445, 356, -302, 117, -296, 231, 242, 382,
	130, 391, 108, 245, 148, 442, -297, -297, 443, -240,
	-296, -296, 441, 451, 443, -442, 447, -224, -296, -238,
	-238, 443, 443, 375, 375, 375, 375, 442, 444, -238,
	-228, 441, 441, 447, 443, -313, -314, 113, -296, 444,
	-400, 260, 442, 442, 443, 443, 447, 419, 419, 419,
	419, -296, 34, 447, 447, 447, 443, 447, 447, 447,
	443, 443, 148, 443, 443, 443, 443, -270, 271, 443,
	11, 12, 433, 434, 435, 436, 143, 437, 438, 431,
	432, 430, 423, 424, 425, 71, 224, 313, 14, 15,
	16, 194, 170, -297, -297, -297, 443, -300, -301, 148,
	145, 34, -265, -265, -265, 443, 148, -238, 442, 443,
	-290, -331, -233, 2, -324, -186, -361, -290, -290, -238,
	-296, -324, -324, -259, 398, 251, 199, -324, -318, 443,
	-407, -357, -320, -319, -357, -295, -294, 146, 237, -184,
	-222, -319, -319, -361, -320, 443, -234, -326, -388, -442,
	444, -361, -129, 5, 242, -129, 148, -228, 24, -338,
	440, 441, 8, 8, 442, -357, -357, -228, 148, -358,
	-285, 388, 69, 285, -358, -151, -190, -178, -185, -166,
	239, -288, 166, -157, 239, -338, -185, 442, 442, 204,
	204, -178, -185, 166, -178, 166, -185, -185, -414, 285,
	246, -296, 219, 283, 240, -152, 296, -90, -90, 442,
	-419, 398, 107, -190, -193, 296, -199, -356, -356, -254,
	296, -191, -366, 413, -175, -153, -90, -90, 442, -176,
	-154, 296, -135, 165, 245, 435, -166, 407, -166, -208,
	-209, -166, -429, 415, 413, 119, 119, -222, 148, -138,
	-366, -190, -366, -366, -366, 2, 442, 2, -190, 119,
	251, 239, -159, 114, -440, 425, -175, -225, -224, -296,
	-253, -283, 304, 251, -223, -179, -178, 403, -184, -253,
	-232, 447, 148, 425, 444, -223, 2, -155, -155, -155,
	-155, -155, -75, -138, 447, 442, 425, 425, 442, -366,
	-366, 443, 447, -190, -177, 176, 176, -183, -167, -138,
	-43, 413, 360, 331, 331, -166, -187, -175, -190, -188,
	-203, -278, -296, -322, -190, 448, -296, -296, 117, 117,
	-296, -297, -297, -296, 117, 148, 442, -296, -306, 30,
	30, 443, 447, -292, -296, 443, 406, -442, -442, -442,
	5, 230, 161, 229, -268, 229, -268, -268, 8, 435,
	-361, 443, -304, 115, -296, 370, -361, 435, -401, -181,
	442, -166, 411, -224, -357, 443, -352, -338, -296, -296,
	-296, -296, -296, -296, -300, -296, -352, -338, -297, -297,
	-297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
	-297, -297, -297, -297, -297, -297, -297, 108, 239, 245,
	-297, -301, -300, -296, -296, -338, 443, 443, 443, -238,
	-75, -250, 155, -334, 447, -250, -250, 443, -259, 442,
	-296, -324, 441, 443, 447, -319, 441, 447, 450, 425,
	-222, 444, -318, 443, 447, -282, 34, 443, -361, -90,
	253, 8, 441, 443, -357, 443, 443, -228, 375, 375,
	119, 239, 400, -376, -373, -296, -227, -323, -296, 442,
	442, -149, 112, 334, -421, 2, 119, -155, 119, -155,
	417, 442, 442, 375, -420, 76, -238, -296, -139, 101,
	-360, -417, 375, 375, 268, -238, 375, -138, 148, 358,
	2, 2, 2, 443, 34, 249, -166, -190, -191, 34,
	-190, -162, 2, -272, 398, -176, -190, 119, -160, 210,
	-440, -364, -389, -275, -273, -253, -245, 240, 75, 443,
	447, 444, -290, -247, -233, -296, 2, 443, -136, -137,
	-366, -366, -366, -138, -140, -140, -289, 2, 442, -177,
	-167, 442, 254, -190, -214, -213, 267, 245, 252, 443,
	-150, -176, -296, -296, 117, 30, 30, -296, -296, -306,
	443, -296, -296, -238, 441, 5, -296, 443, 443, 443,
	443, -296, 444, -402, -166, -296, 443, 443, 443, 443,
	447, 447, 443, 443, 443, 443, -301, 148, 108, 245,
	442, 443, 443, -303, 158, 48, -324, -303, -303, -228,
	-293, -357, -294, -176, 440, -361, -326, 442, 444, 441,
	443, -178, -185, -288, 119, -377, 76, -378, 63, 131,
	82, 239, 242, 390, 277, 60, 101, 289, 34, 443,
	443, 447, -150, -227, -228, 239, 353, 101, 239, 101,
	94, 385, -178, -185, -228, -228, -190, -178, -185, 443,
	447, 425, -193, -191, -366, 443, -176, -367, 371, -210,
	179, -90, 2, 442, -222, -255, -90, 442, -166, 251,
	442, -176, -161, 209, -440, -364, -158, -253, -281, 442,
	251, -90, -179, 2, -225, 425, 443, 443, 94, 94,
	-227, 442, 442, -228, -44, -45, 176, 76, 270, -188,
	360, -150, -296, -296, -296, 443, -442, -361, 435, -396,
	267, 443, -296, -296, -297, 148, 442, -306, -397, 412,
	-296, -238, -397, -397, 443, -320, -357, 2, -288, -185,
	-189, -182, -166, 131, 166, 242, 204, 442, -297, -190,
	442, 2, -431, 103, 180, -287, -432, 81, 354, -323,
	443, 443, 242, 242, -296, -338, -155, -155, 443, 443,
	375, 375, 375, -360, -358, 375, -296, -211, -212, 170,
	-430, 413, -208, -429, -227, -190, -227, 251, -440, -364,
	-159, 109, -228, 76, -275, -302, -138, 442, 442, 443,
	-227, -227, 443, 447, 26, 442, 26, 442, -190, 443,
	-225, 48, 443, 443, -297, -306, 443, -398, -399, -181,
	-319, 441, -378, -182, 239, -296, -168, 442, -296, 180,
	104, 162, -210, 442, 289, -174, 63, 442, 442, -178,
	-185, 442, 425, 442, -429, 265, 94, 236, 443, 34,
	443, -272, 443, -190, -364, -160, 393, 240, 443, -185,
	-253, -367, -367, -287, 443, 443, -45, -228, -228, -403,
	283, 312, 157, -238, 443, 447, 34, 119, 443, -379,
	225, -166, 443, 104, 162, -211, -228, -190, -418, 398,
	-189, -216, -215, -213, -218, -217, -213, -238, -358, -238,
	-190, 94, -210, -90, -287, 442, -287, 442, -161, 334,
	-290, 443, 443, -210, -287, 443, 443, 443, -404, -405,
	40, 387, 85, -296, -404, -404, -399, -401, 131, -380,
	-383, -382, 251, 149, 266, 339, 443, 353, 409, -431,
	443, -222, -296, 443, 447, 403, 443, 447, 403, 443,
	443, 442, -211, -430, -210, -227, -210, -227, -246, -138,
	-138, -211, -210, -405, 274, 144, 311, 274, 144, -182,
	-382, 251, -383, 251, 393, 105, -379, -215, 170, -217,
	148, -228, -429, -211, 443, -211, 443, -290, -211, 30,
	-381, 236, 302, 53, 334, -381, -380, 442, 442, 443,
	-436, 411, -287, -436, -287, -405, 22, 242, 101, -431,
	-238, -238, -156, 53, 302, 2, -210, -210, 443, 443,
	-211, -211, -211, 375, -436, -436, 442, -238, 443, -211,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 26, 27, 331,
	332, 334, 335, 336, 338, 339, 340, 342, 344, 346,
	347, 349, 351, 352, 353, 354, 355, 357, 359, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	403, 405, 0, 826, 828, 830, 832, 29, 30, 0,
	0, 169, 171, 173, 0, 197, 199, 201, 202, 204,
	-2, 0, 285, 286, 288, 290, -2, -2, 0, 0,
	392, 394, 0, 0, 414, 415, 0, 914, -2, 408,
	410, 412, 473, 475, 477, 479, 481, 483, 485, 486,
	488, 490, 492, 494, 496, 498, 500, 502, 504, 506,
	508, 510, 512, 514, 516, 518, -2, -2, -2, 0,
	-2, -2, -2, 844, 33, 35, 37, 39, 41, 43,
	61, 253, 254, 256, 258, 260, 263, 264, 266, 953,
	292, 294, 296, 298, 300, 0, -2, 967, 0, 0,
	45, 46, 47, 48, 49, 50, 51, 68, 69, 70,
	71, 72, 73, 74, 54, 56, 57, 63, 64, 66,
	0, 0, 929, 931, 933, 935, -2, 0, 0, -2,
	9, 11, 13, 15, 17, 19, 21, 23, 25, 333,
	337, 341, 343, 345, 348, 350, 356, 358, 360, 717,
	1546, 1559, 1560, 1561, 1564, 1565, 1566, 1585, 1586, 1587,
	1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597,
	1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607,
	1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617,
	1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
	1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
	1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667,
	1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
	1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
	1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,
	1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747,
	1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
	1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
	1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777,
	1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787,
	1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797,
	1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807,
	1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817,
	1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827,
	1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837,
	1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847,
	1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857,
	1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
	0, 370, 368, 1540, 371, 1722, 373, 375, 279, 280,
	281, 282, 283, 284, 0, 152, 0, 385, 379, 384,
	386, 388, 389, 390, 391, 366, 364, 0, 385, 1588,
	383, 824, 825, 819, 820, 1755, 854, 404, -2, -2,
	-2, 1855, -2, 436, -2, 443, 1858, 1757, 446, 0,
	448, -2, 451, 827, 829, 831, 31, 32, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, -2, -2,
	-2, -2, 0, 0, 1622, 1517, 1561, 1520, 1515, 170,
	172, 174, 175, 0, 0, 0, 0, 0, 0, 198,
	200, 203, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 773, 0, 0, 0, 0, 0, 0, 0, 0,
	640, 641, 0, 0, 646, 768, 769, 790, 0, 0,
	0, 0, 287, 289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 0, 0, 0, 0, 0, 0, 0,
	231, 325, 326, 0, 954, 0, 0, 0, 150, 143,
	0, 0, 629, 393, 395, 0, 142, 0, 0, 823,
	0, 409, 411, 413, 474, 476, 478, 480, 482, 484,
	487, 489, 491, 493, 495, 497, 499, 501, 503, 505,
	507, 509, 511, 513, 515, 517, 519, 520, 0, 0,
	0, 0, 0, 524, 0, -2, -2, 0, 0, 0,
	0, 0, -2, 0, -2, 0, -2, -2, -2, 0,
	0, 0, -2, -2, 0, 0, 0, 523, 525, 526,
	527, 0, 572, 611, 612, 0, 759, 955, 856, 834,
	847, 856, 836, 837, 838, 839, 840, 845, 846, 849,
	0, 841, 842, 843, 34, 36, 38, 40, 42, 44,
	255, 257, 259, 261, 265, 267, -2, 927, 928, 293,
	295, 297, 299, 301, 396, 0, 398, 0, 524, 918,
	0, -2, 0, 959, 959, 959, 0, 0, 928, 926,
	0, 401, 402, 455, 456, 1178, 0, 0, 0, 0,
	0, 1415, 1262, -2, -2, 0, 1295, 1297, 1834, 1855,
	1414, 1299, 1300, 1301, 1302, 1303, 0, 0, 1306, 0,
	1308, 1309, 1310, 1311, 0, 1313, 0, 1317, 1318, 1319,
	0, 1839, 1494, 1557, -2, 1086, 1087, 1088, 1089, 1090,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1553, 1548,
	1386, 1333, -2, 1575, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1631, -2, -2, -2,
	-2, -2, -2, -2, 1142, -2, -2, -2, -2, -2,
	-2, -2, 1868, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, 0, 1823, 1840, 1841, 1846, 1848, 1842, 1831,
	1356, -2, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876,
	1877, 1878, 1881, 1882, 1883, 1884, 1885, 1886, 1143, -2,
	-2, -2, 1835, 1836, 1838, 1847, 1851, 1852, 1857, 1861,
	1862, 945, 1730, 948, 717, 946, 930, 932, 0, 934,
	0, 0, 0, 939, 962, 960, 0, 998, 943, 944,
	954, 1013, 1036, 0, 1018, 0, 1036, 1058, 0, 1023,
	1750, 1334, 1335, 0, 1561, 1558, -2, 1879, 1880, 2,
	0, 0, 0, 0, 0, 194, 367, 0, 372, 374,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 853,
	406, 407, 0, 431, 0, 435, 1830, -2, -2, 439,
	857, 861, 862, 863, 0, 0, 0, 0, 445, 0,
	0, 432, 433, 449, 452, 0, 52, 0, 1840, 1058,
	53, 0, 1530, 1580, 1581, 1582, 1583, 1584, 1868, 1887,
	1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897,
	1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
	1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917,
	1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927,
	1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937,
	1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947,
	1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957,
	1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 55,
	0, 1840, 58, 0, 1840, 0, -2, 62, 0, 1840,
	153, 154, 1571, 1572, 1576, 1577, 1578, 1579, 65, 0,
	1536, 67, 0, 1533, 75, 0, 1840, 1514, 0, 0,
	621, 1511, 1516, 622, 1521, 0, 176, 177, 178, 179,
	180, 1840, 182, 183, 0, 185, 186, 1840, 188, 189,
	0, 191, 206, 207, 0, 209, 0, 1840, 0, 0,
	0, 215, -2, 232, 0, 229, 0, 219, 220, 222,
	223, 224, 225, 226, 0, 0, 0, 774, 0, 269,
	1541, 0, -2, 1840, 762, 765, 1840, 767, 779, 1544,
	0, -2, 0, 952, 1840, 870, 642, 643, 644, 645,
	0, 278, 0, 883, 0, 885, 0, 904, 1064, 1013,
	233, 234, 235, 236, 237, 1840, 0, 0, 0, 242,
	0, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	135, 1840, 304, 323, 135, 1840, 307, 135, 1840, 310,
	135, 1840, 313, 1509, 135, 1840, 316, 317, 1840, 319,
	155, 320, 1840, 322, 0, -2, 361, 1547, -2, 328,
	0, -2, 0, 167, 0, 627, 628, 0, 821, 822,
	416, 0, 0, 521, 522, 0, 0, 532, 533, 534,
	535, 1728, 1646, 538, 0, 541, 562, 576, 0, 0,
	0, 545, 547, 626, 549, 0, 0, 551, 0, 553,
	0, 555, 0, 557, 0, 559, 561, 563, 577, 565,
	0, 0, 0, 575, 0, 581, 0, 584, 585, 586,
	0, 588, 589, 590, 591, 0, 593, 594, -2, -2,
	598, 600, 0, 606, 0, 610, 0, 528, 529, 135,
	1062, 833, -2, 835, 0, 851, 921, -2, 0, 397,
	0, 400, 925, 919, 924, 976, 977, 0, 0, 0,
	0, 957, 958, 0, 0, 0, 916, 917, 0, 0,
	0, 0, 1420, 1421, 1422, 1423, 1424, 1425, 1428, 1429,
	1426, 1427, 1430, 1431, 0, 0, 0, 0, 0, 1432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1433, 1434, 1435, 0, 0, 1437, 0, 1439, 0,
	0, 0, 0, 0, 0, 1241, 1243, 1502, 0, 0,
	1436, 1183, 1184, 1185, 1220, 1221, 0, 0, 1296, 1499,
	1498, 1298, 0, 1451, 0, 1305, 0, 1175, 1312, 1527,
	-2, 0, 1415, 1446, 0, 0, 1320, 1321, 1322, 0,
	0, 1451, 0, 0, 1493, 0, 1388, 0, 1122, 0,
	1123, 1124, 0, 1125, 1126, 1139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1144, 0, 0, 0, 0, 0,
	1474, -2, 0, 0, 0, 947, 0, 0, 1002, 1503,
	1507, 1508, 1002, 1002, 0, 0, 1452, 0, 0, 0,
	0, 1055, 1055, 1055, 1053, 1030, 0, 1036, 0, 1046,
	0, 1036, 1036, 0, -2, 1018, 0, 0, 1046, 1059,
	1060, 0, 0, 0, 0, 0, 0, 1562, 0, 0,
	1548, 1549, 0, 167, 0, 377, 387, 954, 0, 1454,
	1077, 1073, 1080, 1081, 1082, 1083, 1129, 1130, 1131, 1132,
	1133, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
	1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, -2, 1140,
	1142, 1160, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
	1119, 1120, 1121, 1135, 0, 1110, 1110, 1110, 1127, 1128,
	1151, 1152, 1154, 1156, 1158, 1078, 1079, 1145, 1146, 1147,
	1148, 0, 381, 0, 0, 0, 0, -2, 441, 0,
	859, 0, 864, 464, 465, 466, 866, 867, 444, 467,
	468, 469, 470, 471, 472, 0, 734, 0, 736, 1523,
	0, 442, 457, 447, 0, 453, 76, 816, 103, 0,
	816, 816, 0, 0, 122, 0, 0, 0, 0, 0,
	94, 99, 82, 83, 0, 0, 0, 0, 59, 742,
	0, 745, 0, 0, 0, 0, 0, 0, 0, 757,
	0, 0, 0, 0, 93, 0, 88, 78, 0, 0,
	96, 101, 0, 126, 128, 0, 0, 1049, 620, 0,
	0, 1562, 1519, 0, 0, 0, 0, 208, 210, 0,
	212, 213, 214, 0, 773, 0, 221, 218, 262, 717,
	1840, 741, 1840, 739, 1545, 0, 0, 276, 271, 0,
	273, 760, 0, 951, 0, 0, 0, 0, 780, 0,
	1840, 785, 1532, 1567, 1568, 872, 0, 1069, 0, 886,
	0, 0, 1065, 0, 1067, 0, 239, 240, 241, 0,
	302, 0, 133, 134, 0, 305, 0, 308, 0, 311,
	0, 0, 314, 0, 0, 0, 0, 954, 0, 0,
	0, 145, 0, 0, 0, 0, 167, 1049, 418, 1049,
	420, 0, 0, 536, 537, 539, 540, 542, 543, 607,
	544, 548, 0, 614, 1746, 624, 550, 552, 554, 556,
	558, 0, 567, 0, 569, 0, 571, 579, 582, 587,
	592, 0, 0, 0, 0, 758, 0, 850, 922, 924,
	399, 920, 974, 975, 980, 984, 985, 988, 991, 992,
	982, 1178, 940, 941, 942, 968, 969, 799, 0, 0,
	1179, 1074, 1180, 1181, 1529, 0, 1186, 1187, 1188, 1189,
	1190, 1191, 1192, 1193, 1194, 1195, -2, -2, -2, -2,
	-2, -2, -2, -2, 1204, 1205, 1206, 1207, 1208, 1209,
	1210, 1211, 1212, 1213, 1214, -2, -2, -2, 1218, 1219,
	-2, 1438, 1440, 0, 1502, 0, -2, 0, -2, -2,
	-2, -2, 1238, 0, 1240, 1245, 1247, 1249, 0, 0,
	0, 0, 1501, 1259, 1485, 1486, 0, 0, 1417, 1418,
	1419, 1244, 0, 1265, 1500, 1497, 0, 0, 1450, 965,
	1324, 0, 0, 0, 0, 1331, 0, 1528, 1174, 1161,
	1162, 1163, 1164, 1165, 1166, 1176, 1316, 1448, 0, 1447,
	0, 0, 0, 1458, 0, 1492, 1488, 0, 1550, 1556,
	1396, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1368,
	0, 1461, -2, -2, -2, -2, -2, -2, -2, 0,
	1370, 0, 1382, 0, 1384, 0, 1372, 1452, 1471, 0,
	0, 1266, 0, 0, 0, 1415, 0, 1375, 1452, 1479,
	0, 0, 0, 0, 0, 1452, 0, 1484, 949, 0,
	0, 1069, 0, 0, 0, 1506, 1069, 1069, 0, 997,
	0, 0, 0, 0, 0, 0, 1050, 1054, 1051, 1052,
	0, 0, 1036, 1046, 1010, 0, 0, 1531, 1016, 1045,
	0, 717, 1035, 1046, 1046, 0, -2, 1020, 0, 0,
	965, -2, 168, 716, 0, 0, 0, 369, 0, 0,
	0, 363, 365, 0, 1070, 1072, 0, 1084, 0, 0,
	-2, 0, 0, 0, 0, 0, 434, 0, 858, 865,
	0, 461, 0, 463, 735, 1525, 1524, 0, 454, 0,
	0, 0, 0, 815, 105, 1840, 0, 137, 0, 0,
	701, 1537, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 743, 744, 746, 752, 754, 0, 748,
	1526, 0, 749, 0, 751, 753, 755, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 1513, 158, 1048, 0, 1512, 1522, 0, 181, 184,
	187, 190, 0, 216, 0, 0, 649, 632, 0, 737,
	740, 0, 717, 772, 1543, 0, 167, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 778, 0, 0, 0,
	1840, 874, 880, 0, 967, 0, 902, 888, 0, 0,
	0, 902, 906, 907, 909, 910, 0, 0, 1066, 0,
	243, 324, 135, 135, 135, 1510, 135, 135, 156, 318,
	321, 327, 362, 954, 167, 165, 1710, 163, 160, 162,
	0, 0, 0, 650, 652, 653, 654, 655, 0, 1568,
	0, 1674, 1568, 140, 167, 417, 422, 530, 0, 625,
	623, 566, 0, 0, 0, 0, 0, 0, 0, 0,
	608, 609, 613, 1063, 923, 0, 986, 0, 983, 989,
	990, 0, 971, 797, 798, 0, 0, 0, 0, -2,
	-2, 0, 0, 0, 1260, 0, -2, 1239, 1242, 1246,
	1248, 1250, 0, 0, 0, 0, 0, 0, 1441, 0,
	1443, 1261, 1495, 1498, 1413, 0, 0, 964, 965, 965,
	965, 1330, 0, 0, 0, 0, 0, 0, 0, 1449,
	0, 1456, 1457, 0, 1323, 0, 1489, 0, 0, 0,
	1332, 0, 0, 0, 1134, 1108, 0, 1153, 1155, 1157,
	1159, 0, 0, 0, 0, 0, 1351, 0, 0, 0,
	1355, 1367, 0, 1369, 1381, 1383, 1371, 0, 0, 1373,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1269, 1270, 1271, 1374, 1477, 1478, 0,
	0, 0, 0, 0, 0, 1380, 0, 1483, 954, 999,
	994, 1504, 1049, 1001, 1003, 1505, 1534, 994, 994, 0,
	1453, 1038, 0, 1040, 0, 0, 0, 1042, 0, 1031,
	0, 1033, 1046, 1015, 0, 0, 1008, 0, 1007, 717,
	1044, 1017, 1021, 1550, 0, 1061, 0, 1025, 1028, 0,
	0, 1563, 192, 195, 196, 193, 0, 376, 0, 1455,
	0, 1075, 0, 0, 0, 0, 0, 380, 0, 430,
	-2, 459, 460, 462, 458, 104, 803, 0, 0, 1535,
	0, 107, 1840, 116, 0, 678, 0, 0, 0, 0,
	0, 818, 0, 1840, 135, 1840, 135, 118, 121, 0,
	125, 123, 0, 0, 669, 77, 816, 80, 86, 0,
	0, 0, 92, 0, 809, 0, 747, 750, 756, 60,
	0, 811, 801, 0, 800, 127, 81, 87, 0, 813,
	79, 0, 167, 0, 0, 1518, 0, 0, 0, 0,
	648, -2, 0, 0, 0, 0, 0, 0, 0, 270,
	275, 274, 763, -2, 766, 775, 0, 777, 789, 0,
	0, 0, 876, 880, 0, 879, 952, 979, 966, 1068,
	881, 902, 0, 0, 0, 891, 893, 890, 887, 884,
	1069, 0, 0, 0, 0, 0, 238, 303, 306, 309,
	312, 315, 329, 144, 0, 0, 0, 0, 0, 167,
	0, 0, 0, 0, 0, 1568, 1568, 0, 1539, 141,
	419, 0, 0, 568, 570, 578, 601, 602, 664, 0,
	605, 0, 0, 970, 799, 0, 1182, 1223, 0, 0,
	-2, 0, 0, 1227, 0, 0, 0, -2, 0, 0,
	0, 1442, 1444, 0, 1497, 1325, 0, 0, 0, 0,
	1307, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 0, 1314,
	1315, 1416, 1459, 1487, 1491, 0, 1551, 1555, 1394, 1395,
	1399, 1542, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 0, 1460, 1470, 1472, 1267, 1268, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, -2, -2,
	-2, 1285, 1286, 1287, -2, -2, -2, 0, 0, 0,
	1473, 1475, 1476, 1480, 1481, 0, 1377, 1378, 1379, 1482,
	0, 996, 0, 1000, 0, 996, 996, 961, 1039, 0,
	1057, 1041, 1013, 1032, 0, 1022, 1011, 0, 1012, 0,
	1043, 0, 1019, 1024, 0, 1027, 0, 1325, -2, 151,
	378, 0, 1076, 1085, 0, 1137, 1141, 382, 0, 0,
	0, 0, 136, 676, 700, 0, 0, 792, 799, 0,
	0, 109, 0, 0, 0, 117, 0, 114, 0, 120,
	124, 0, 0, 0, 0, 0, 0, 89, 90, 91,
	0, 95, 0, 0, 0, 0, 0, 138, 0, 0,
	211, 771, 217, 658, 0, 633, 0, 717, 741, 0,
	268, 761, 776, 0, 0, 0, 0, 0, 878, 880,
	0, 871, 872, 902, 978, 882, 900, 901, 899, 0,
	0, 0, 967, 908, 905, 911, 912, 0, 164, 0,
	159, 161, 0, 147, 0, 0, 651, 656, 0, 0,
	0, 0, 0, 531, 603, 663, 0, 0, 981, 987,
	972, 799, 1225, 1229, 0, 0, 0, 1231, -2, 0,
	1253, -2, -2, 1445, 1496, 1304, 965, 1326, 1328, 1329,
	1177, 1490, 0, 1401, 1398, 0, 1385, 1109, 1346, 1347,
	0, 0, 1350, 1352, 1353, 1354, 1469, 0, 0, 0,
	0, 1376, 950, 1390, 0, 0, 1004, 1390, 1390, 0,
	1036, 1034, 1009, 1005, 0, 1551, 1026, 0, 0, 1071,
	1136, 805, 807, 106, 0, 677, 0, 680, 0, 0,
	0, 0, 687, 688, 0, 0, 0, 0, 0, 706,
	715, 0, 794, 0, 0, 0, 111, 130, 0, 0,
	817, 0, 135, 135, 0, 0, 804, 0, 0, 0,
	0, 0, 810, 812, 802, 0, 814, 157, 0, 666,
	0, 637, 634, 649, 632, 738, 770, 0, 788, 0,
	0, 0, 868, 880, 0, 873, 874, 277, 0, 0,
	0, 889, 892, 894, 979, 0, 166, 167, 0, 0,
	0, 0, 0, 0, 421, 423, 0, 0, 429, 662,
	0, 973, 1233, -2, -2, 1254, 0, 1552, 1554, 967,
	0, 1387, 0, 0, -2, 0, 0, 0, 936, 0,
	995, 993, 937, 938, 1056, 1046, 0, 1029, 108, 0,
	681, 682, 1538, 684, 0, 686, 689, 0, 691, 1570,
	0, 695, 702, 707, 0, 658, 0, 712, 713, 793,
	704, 0, 110, 112, 129, 796, 113, 119, 0, 0,
	0, 0, 0, 0, 97, 0, 1047, 632, 665, 0,
	635, 0, 0, 0, 0, 789, 0, 0, 0, 875,
	876, 0, 0, 0, 902, 913, 146, 0, 0, 715,
	0, 0, 699, 0, 425, 0, 427, 0, 604, 1327,
	1405, 0, 1348, 1349, -2, 0, 1293, 1389, 1391, 0,
	1014, 1006, 679, 683, 0, 0, 721, 0, 0, 0,
	710, 711, 666, 0, 0, 132, 0, 0, 0, 806,
	808, 0, 0, 0, 630, 0, 638, 0, 658, 0,
	715, 0, 715, 0, 877, 878, 0, 896, 1069, 898,
	903, 0, 0, 658, 715, 698, 424, 0, 0, 0,
	0, 0, 0, 1400, 1294, 0, 0, 0, 690, 726,
	0, 0, 0, 708, 709, 706, 0, 717, 115, 0,
	795, 0, 670, 0, 0, 673, 0, 0, 98, 0,
	0, 639, 666, 637, 658, 0, 658, 0, 869, 0,
	897, 167, 167, 666, 658, 426, 428, 1397, 1402, 1406,
	-2, 1804, 1619, 0, 1403, 1404, 1392, 1393, 0, 692,
	722, 723, 0, 718, 719, 720, 1569, 693, 694, 703,
	714, 721, 131, 667, 0, 0, 668, 0, 0, 100,
	102, 0, 632, 636, 666, 0, 666, 0, 1069, 148,
	149, 696, 666, 0, 1408, 1409, 1410, 1411, 1412, 685,
	724, 0, 725, 0, 0, 0, 726, 671, 0, 674,
	0, 0, 631, 786, 715, 786, 715, 895, 697, 0,
	727, 0, 730, 731, 0, 728, 706, 0, 0, 661,
	781, 0, 658, 783, 658, 1407, 729, 732, 733, 705,
	0, 0, 657, 659, 660, 787, 666, 666, 666, 0,
	786, 786, 672, 0, 782, 784, 0, 0, 666, 675,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 431, 3, 437, 432, 3,
	442, 443, 435, 433, 447, 434, 444, 436, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 451, 446,
	423, 425, 424, 427, 448, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 440, 3, 441, 438, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 449, 430, 450, 428,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 426, 57766, 429, 57767, 439, 57768, 445, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1034
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1040
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1049
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "GRANT")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1069
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1070
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1074
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1090
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1142
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1143
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1154
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1169
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1173
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1177
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1218
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1241
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1245
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1249
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1255
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1259
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1265
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1271
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1281
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1288
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1295
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1302
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1309
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1317
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1322
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1326
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1331
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1337
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1345
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1353
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1364
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableWithIdx(),
			}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1374
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1378
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1384
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1388
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1394
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1398
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1404
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1408
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1415
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1420
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1425
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1430
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1435
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1440
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1445
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1449
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1452
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1461
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1473
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1483
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1490
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1493
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1500
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1509
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1518
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1523
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1530
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1538
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1539
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1543
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1547
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1553
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1561
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1565
		{
			sqlVAL.union.val = nil
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1571
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1575
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1582
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1586
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1590
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1596
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1600
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1626
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1629
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1652
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1656
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1659
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1663
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1698
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1702
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1706
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1710
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1714
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1718
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1721
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1738
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1741
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1745
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1749
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1755
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1759
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1765
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1769
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1775
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1779
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1783
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1787
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1793
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1797
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1803
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1807
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1811
		{
			sqlVAL.union.val = nil
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1817
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1829
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1830
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1831
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1832
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1842
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1850
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1852
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1855
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1865
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1874
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1882
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1884
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1888
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1891
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1901
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1910
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1918
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1920
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1924
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1927
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1931
		{
			return unimplementedWithIssueDetail(sqllex, 19472, "table")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1935
		{
			return unimplementedWithIssueDetail(sqllex, 19472, "column")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1939
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1944
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1945
		{
			sqlVAL.str = ""
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1954
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1955
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1957
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1958
		{
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1959
		{
			return helpWith(sqllex, "CREATE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1962
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1963
		{
			return unimplemented(sqllex, "create cast")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1964
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1965
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1966
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1967
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1968
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1969
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1970
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1971
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1972
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1973
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1974
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1975
		{
			return unimplemented(sqllex, "create operator")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1976
		{
			return unimplemented(sqllex, "create publication")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1977
		{
			return unimplemented(sqllex, "create rule")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1978
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1979
		{
			return unimplemented(sqllex, "create server")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1980
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1981
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1982
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1985
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1986
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1989
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1990
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1993
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1994
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1997
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1998
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1999
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2000
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2001
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2002
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2003
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2004
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2005
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2006
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2007
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2008
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2009
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2010
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2011
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2012
		{
			return unimplemented(sqllex, "drop server")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2013
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2014
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2015
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2016
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2020
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2021
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2022
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2023
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2025
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2026
		{
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2027
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2028
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2038
		{

			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2046
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2050
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2060
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2064
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2070
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2074
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2081
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2085
		{

			sqlVAL.union.val = nil
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:2099
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2109
		{
			return helpWith(sqllex, "DELETE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2116
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2119
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2120
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2121
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2122
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2123
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2132
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2133
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2134
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2135
		{
			return helpWith(sqllex, "DROP")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2138
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2139
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2140
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2141
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2142
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2150
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2154
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2157
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2165
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2169
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2172
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2180
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2184
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2187
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2195
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2203
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2210
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2218
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2226
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2233
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2241
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2245
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2248
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2256
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2260
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2263
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2267
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2271
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2293
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2296
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2298
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2302
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2306
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2313
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2317
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2320
		{
			return helpWith(sqllex, "DELETE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2322
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2323
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2324
		{
			return helpWith(sqllex, "INSERT")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2325
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2327
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2328
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2331
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2336
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2337
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2338
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2342
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2346
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 363:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2356
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2363
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2367
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2371
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2381
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2387
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2391
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2395
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2405
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2409
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2413
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2417
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2420
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2440
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2444
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2448
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2451
		{
			return helpWith(sqllex, "GRANT")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2471
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2475
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2479
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2482
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2487
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2491
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2502
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2506
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2520
		{
			return helpWith(sqllex, "RESET")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2521
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2529
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2533
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2536
		{
			return helpWith(sqllex, "RESET")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2544
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2547
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2558
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2561
		{
			return helpWith(sqllex, "USE")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2565
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2566
		{
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2567
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2568
		{
			return unimplemented(sqllex, "set local")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2572
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2573
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2574
		{
			return helpWith(sqllex, "USE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2590
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2605
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2608
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2626
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2634
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2638
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2642
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2648
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2652
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2658
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2662
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2666
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2670
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2674
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2685
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2688
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2698
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2714
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2718
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2723
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2740
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2743
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2745
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2748
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2752
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2771
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2778
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2784
		{
			return unimplemented(sqllex, "set from current")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2785
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2793
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2798
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2805
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2809
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2815
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2819
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2826
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2832
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2836
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2842
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2846
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2850
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2854
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2858
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2864
		{
			sqlVAL.union.val = tree.Low
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2868
		{
			sqlVAL.union.val = tree.Normal
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2872
		{
			sqlVAL.union.val = tree.High
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2883
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2887
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2891
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2896
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2900
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2912
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2913
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2914
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2915
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2916
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2917
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2919
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2920
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2921
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2922
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2923
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2924
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2925
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2926
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2927
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2928
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2929
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2930
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2931
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2932
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2933
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2934
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2936
		{
			return helpWith(sqllex, "SHOW")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2943
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2944
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2945
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2956
		{
			sqlVAL.str = "client_encoding"
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2959
		{
			sqlVAL.str = "timezone"
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2960
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2974
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2979
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2983
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2994
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3003
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3011
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3018
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3026
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3033
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3043
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3047
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3050
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3052
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3055
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3063
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3066
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3074
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3077
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3090
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3098
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3106
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3109
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3111
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3114
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3116
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3119
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3127
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3130
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3132
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3135
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3143
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3146
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3148
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3152
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3162
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3165
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3174
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3177
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3179
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3182
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3184
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3188
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3191
		{
			sqlVAL.union.val = true
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3192
		{
			sqlVAL.union.val = false
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3200
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3203
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3205
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3209
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3219
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3228
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3237
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3240
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3247
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3251
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3254
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3261
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3265
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3273
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3278
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3283
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3287
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3295
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3299
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3303
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3316
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3319
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3327
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3330
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3334
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3338
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3342
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3348
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[9].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3355
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableWithIdx(),
			}}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3361
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3365
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3376
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3380
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3383
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3391
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3398
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3403
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3523
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3527
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3531
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3570
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3574
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3579
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3583
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3592
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3599
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3603
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3615
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3624
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3627
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3663
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:3675
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3688
		{
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3689
		{
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3690
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 635:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3694
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:3705
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3717
		{
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3718
		{
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3719
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3733
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3734
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3735
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3736
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3737
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3738
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3739
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3740
		{
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3745
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3751
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3755
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3761
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3767
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3770
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 657:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3774
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3782
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3789
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3794
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3799
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3805
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3812
		{
			sqlVAL.str = ""
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3819
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 667:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3825
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3832
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3839
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3845
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3849
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 672:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3855
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3865
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3869
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 675:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3875
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3886
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3897
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3901
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3907
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3911
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3915
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3919
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3923
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3927
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3931
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3949
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3953
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3957
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3961
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3965
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3969
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3973
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3981
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3985
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3989
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 696:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3996
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4006
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4018
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4028
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4040
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4045
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4051
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4057
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4068
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4078
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4088
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4089
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4090
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4091
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4092
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4093
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4110
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4114
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4120
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4124
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4129
		{
			return unimplemented(sqllex, "references match full")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4130
		{
			return unimplemented(sqllex, "references match partial")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4131
		{
			return unimplemented(sqllex, "references match simple")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4132
		{
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4139
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4143
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4147
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4151
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4155
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4161
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4167
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4175
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4179
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4183
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4187
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4191
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4197
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4201
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4207
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4226
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[5].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 738:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4234
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[8].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4242
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4246
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4249
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4250
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4253
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4254
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4256
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4257
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4258
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4261
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4263
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4265
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4267
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4268
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4270
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4271
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4273
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4275
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4283
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4286
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4294
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4298
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4301
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4305
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4309
		{
			sqlVAL.union.val = nil
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4319
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4323
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4326
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4331
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4332
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4340
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[5].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4347
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4348
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4351
		{
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4352
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4358
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4360
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4362
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4364
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4366
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4368
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql-gen.y:4384
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
		//line sql-gen.y:4397
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql-gen.y:4411
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
		//line sql-gen.y:4424
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       sqlDollar[10].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4437
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4440
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4441
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4445
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4460
		{
			sqlVAL.union.val = false
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4466
		{
			sqlVAL.union.val = true
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4470
		{
			sqlVAL.union.val = false
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4476
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4480
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4489
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4500
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4501
		{
			sqlVAL.str = ""
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4505
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4509
		{
			sqlVAL.union.val = tree.Descending
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4513
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 800:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4519
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4526
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4530
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4536
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4540
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4544
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4548
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4552
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4554
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4558
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4562
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4568
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4572
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4578
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4582
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4587
		{
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4588
		{
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4591
		{
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4592
		{
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4600
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4603
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4613
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4622
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4625
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4633
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4636
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4640
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4641
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4642
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4658
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4661
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4663
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4666
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4676
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4679
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4681
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4684
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4688
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4693
		{
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4694
		{
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4695
		{
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4703
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4710
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4713
		{
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4714
		{
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4718
		{
			sqlVAL.str = ""
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4722
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4726
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 852:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4730
		{
			sqlVAL.str = ""
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4736
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4740
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4746
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4750
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4756
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4760
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4773
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4775
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4779
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4783
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4787
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4793
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4799
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4805
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4809
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 868:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4819
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4829
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4839
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4843
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 872:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4847
		{
			sqlVAL.str = ""
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4853
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4857
		{
			sqlVAL.str = ""
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4863
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4867
		{
			sqlVAL.str = ""
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4873
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4877
		{
			sqlVAL.str = ""
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4882
		{
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4883
		{
		}
	case 881:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4895
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 882:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4902
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4909
		{
			return helpWith(sqllex, "INSERT")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4920
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4927
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4931
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4939
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4945
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4949
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4953
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4959
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4963
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4983
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 895:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4987
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4991
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4997
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5001
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5003
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5009
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5014
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5018
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 903:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:5035
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5046
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5050
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5051
		{
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5055
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5059
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5072
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5075
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 913:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5079
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5122
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5128
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5132
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5147
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5151
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5155
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5159
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5163
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5167
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5172
		{
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5173
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5178
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5213
		{
			return helpWith(sqllex, "SELECT")
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5214
		{
			return helpWith(sqllex, "VALUES")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5215
		{
			return helpWith(sqllex, "TABLE")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5237
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5250
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5264
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5276
		{
			return helpWith(sqllex, "SELECT")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5280
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5289
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5298
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5313
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5320
		{
			return helpWith(sqllex, "TABLE")
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5332
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5336
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5340
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5344
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5348
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 950:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5354
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5362
		{
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5363
		{
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5367
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5371
		{
			sqlVAL.union.val = nil
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5376
		{
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5377
		{
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5381
		{
			sqlVAL.union.val = true
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5385
		{
			sqlVAL.union.val = false
		}
	case 959:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5389
		{
			sqlVAL.union.val = false
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5395
		{
			sqlVAL.union.val = true
		}
	case 961:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5401
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5406
		{
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5407
		{
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5410
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5411
		{
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5415
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5419
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5425
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5431
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5435
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5441
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5445
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5449
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5458
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5467
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5478
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5482
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5491
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5497
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5504
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5511
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5520
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5524
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 988:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5528
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5534
		{
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5535
		{
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5538
		{
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5539
		{
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5556
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 994:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5560
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5566
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5570
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 997:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5589
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5592
		{
			return helpWith(sqllex, "VALUES")
		}
	case 999:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5594
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5606
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5609
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5611
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5617
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5621
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5627
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5631
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5637
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5643
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5648
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5660
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5664
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5668
		{
			sqlVAL.union.val = sqlDollar[3].union.indexFlags()
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5672
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5699
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5713
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5722
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5729
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5731
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5735
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5739
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5743
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5759
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5765
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5769
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5775
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5777
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5781
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5787
		{
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5789
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5792
		{
			sqlVAL.union.val = nil
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5793
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5794
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5798
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5802
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5808
		{
			sqlVAL.union.val = true
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5812
		{
			sqlVAL.union.val = false
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5832
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5836
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5840
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5844
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5848
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5852
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5858
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5862
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5869
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5875
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5882
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5888
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5892
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5896
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5900
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5906
		{
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5907
		{
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5918
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5922
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5927
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5928
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5929
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5930
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5934
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5938
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5951
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5955
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5961
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5969
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5978
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5982
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5994
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6008
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6017
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6026
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6032
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6039
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6041
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6050
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6061
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6062
		{
			return unimplemented(sqllex, "interval with precision")
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6079
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6083
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6087
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6091
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6095
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6099
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6103
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6107
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6111
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6115
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6119
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6123
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6127
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6131
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6135
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6139
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6143
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6147
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6178
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6182
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6186
		{
			sqlVAL.union.val = nil
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6193
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6197
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6201
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6205
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6209
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6213
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6217
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6221
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6225
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6229
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6233
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6237
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6241
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6245
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6252
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6259
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6266
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6270
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6277
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6281
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6285
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6289
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6293
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6299
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6314
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6320
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6326
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6334
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6338
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6342
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6348
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6361
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6367
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6371
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6375
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6379
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6388
		{
			sqlVAL.union.val = true
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6389
		{
			sqlVAL.union.val = false
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6394
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6398
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6402
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6406
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6410
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6414
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6418
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6422
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6426
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6431
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6437
		{
			sqlVAL.union.val = tree.Year
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6441
		{
			sqlVAL.union.val = tree.Month
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6445
		{
			sqlVAL.union.val = tree.Day
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6449
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6453
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6457
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6463
		{
			sqlVAL.union.val = tree.Month
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6467
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6471
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6475
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6479
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6483
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6487
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6494
		{
			sqlVAL.union.val = nil
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6500
		{
			sqlVAL.union.val = tree.Second
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6503
		{
			return unimplemented(sqllex, "interval second with precision")
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6527
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6531
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6535
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6538
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6547
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6552
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6556
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6560
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6564
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6568
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6572
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6576
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6580
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6584
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6588
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6592
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6596
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6600
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6604
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6608
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6612
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6616
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6620
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6624
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6628
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6632
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6636
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6640
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6644
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6648
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6652
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6656
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6660
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6664
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6668
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6672
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6676
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6680
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6684
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6688
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6692
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6696
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6700
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6704
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6708
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6712
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6716
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6720
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6724
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6728
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6732
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6736
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6740
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6744
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6748
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6752
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6756
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6760
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6764
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6768
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6772
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6776
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6780
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6784
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6788
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6791
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6793
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6797
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6801
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6805
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6809
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6813
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6817
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6821
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6825
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6829
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6833
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6837
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6841
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6845
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6849
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6853
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6857
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6874
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6878
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6882
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6887
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6899
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6903
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6907
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6911
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6915
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6919
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6923
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6927
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6931
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6935
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6939
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6943
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6947
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6951
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6955
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6959
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6963
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6967
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6971
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6975
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6979
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6983
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6987
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6991
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6995
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6999
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7003
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7007
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7021
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7029
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7065
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7069
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7073
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7077
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7081
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7086
		{
			return unimplemented(sqllex, "func const")
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7088
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7092
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7095
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7097
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7101
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7105
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7109
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7113
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7122
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7127
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7131
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7135
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7140
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7144
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7148
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7152
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7156
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7159
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7163
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7167
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7170
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7171
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7173
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7177
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7181
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7184
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7195
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7202
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7211
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7212
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7216
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation for")
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7218
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7222
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7228
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7232
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7236
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7240
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7246
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7250
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7254
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7258
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7262
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7266
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7270
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7274
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7278
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7282
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7286
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7290
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7294
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7301
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7304
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7306
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7309
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7311
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7314
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7316
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7319
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7321
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7324
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7326
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7329
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7331
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7334
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7336
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7339
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7341
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7345
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7348
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7349
		{
			return unimplemented(sqllex, "treat")
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7351
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7355
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7359
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7363
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7367
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7370
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7372
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7375
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7380
		{
			return unimplemented(sqllex, "within group")
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7381
		{
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7385
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7389
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7396
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7400
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7406
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7410
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7416
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7424
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7428
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7432
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7439
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7459
		{
			sqlVAL.str = ""
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7465
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7469
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7480
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7487
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7494
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7501
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7507
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7520
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7548
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7552
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7556
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7560
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7567
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7583
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7587
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7594
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7606
		{
			sqlVAL.union.val = tree.Any
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7610
		{
			sqlVAL.union.val = tree.Some
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7614
		{
			sqlVAL.union.val = tree.All
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7619
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7620
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7621
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7622
		{
			sqlVAL.union.val = tree.Div
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7623
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7624
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7625
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7626
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7627
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7628
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7629
		{
			sqlVAL.union.val = tree.LT
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7630
		{
			sqlVAL.union.val = tree.GT
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7631
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7632
		{
			sqlVAL.union.val = tree.LE
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7633
		{
			sqlVAL.union.val = tree.GE
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7634
		{
			sqlVAL.union.val = tree.NE
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7638
		{
			sqlVAL.union.val = tree.Like
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7639
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7640
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7641
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7664
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7668
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7674
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7678
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7682
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7693
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7697
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7703
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7707
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7714
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7720
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7724
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7730
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7740
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7744
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7750
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7754
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7760
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7764
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7786
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7790
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7794
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7800
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7807
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7811
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7828
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7832
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7836
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7840
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7844
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7850
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7856
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7862
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7866
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7870
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7876
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7888
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7895
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7899
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7905
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7911
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7915
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7922
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7928
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7932
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7939
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7945
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7949
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7954
		{
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7955
		{
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7959
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7963
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7969
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7978
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7982
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7986
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7994
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7998
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8004
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8008
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8014
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8021
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8049
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8053
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8057
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8063
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8067
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8075
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8079
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8090
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8101
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8111
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8209
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8216
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8220
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8224
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8238
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8242
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8246
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8259
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8277
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8287
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8291
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8305
		{
			sqlVAL.str = ""
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8311
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8315
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
